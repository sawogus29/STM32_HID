
HID_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080084b0  080084b0  000184b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008528  08008528  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008528  08008528  00018528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008530  08008530  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008530  08008530  00018530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008534  08008534  00018534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b38  20000090  080085c8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20000bc8  080085c8  00020bc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017fef  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003493  00000000  00000000  000380af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d28  00000000  00000000  0003b548  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc0  00000000  00000000  0003c270  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024a75  00000000  00000000  0003ce30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e3f6  00000000  00000000  000618a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce12e  00000000  00000000  0006fc9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ddc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000382c  00000000  00000000  0013de44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008498 	.word	0x08008498

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	08008498 	.word	0x08008498

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fb5e 	bl	8000c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f80a 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f8bc 	bl	8000748 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005d0:	f000 f890 	bl	80006f4 <MX_USART3_UART_Init>
  MX_USB_HOST_Init();
 80005d4:	f007 f82a 	bl	800762c <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005d8:	f007 f84e 	bl	8007678 <MX_USB_HOST_Process>
 80005dc:	e7fc      	b.n	80005d8 <main+0x18>
	...

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b0ac      	sub	sp, #176	; 0xb0
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005ea:	2234      	movs	r2, #52	; 0x34
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f007 fb4d 	bl	8007c8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	225c      	movs	r2, #92	; 0x5c
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f007 fb3e 	bl	8007c8e <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	4b35      	ldr	r3, [pc, #212]	; (80006ec <SystemClock_Config+0x10c>)
 8000618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061a:	4a34      	ldr	r2, [pc, #208]	; (80006ec <SystemClock_Config+0x10c>)
 800061c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000620:	6413      	str	r3, [r2, #64]	; 0x40
 8000622:	4b32      	ldr	r3, [pc, #200]	; (80006ec <SystemClock_Config+0x10c>)
 8000624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b2f      	ldr	r3, [pc, #188]	; (80006f0 <SystemClock_Config+0x110>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a2e      	ldr	r2, [pc, #184]	; (80006f0 <SystemClock_Config+0x110>)
 8000638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063c:	6013      	str	r3, [r2, #0]
 800063e:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <SystemClock_Config+0x110>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064a:	2301      	movs	r3, #1
 800064c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800064e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000652:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000664:	2304      	movs	r3, #4
 8000666:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800066a:	23a8      	movs	r3, #168	; 0xa8
 800066c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000676:	2307      	movs	r3, #7
 8000678:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800067c:	2302      	movs	r3, #2
 800067e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000686:	4618      	mov	r0, r3
 8000688:	f003 f922 	bl	80038d0 <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000692:	f000 f9db 	bl	8000a4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2302      	movs	r3, #2
 800069c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ac:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006b2:	2105      	movs	r1, #5
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fb27 	bl	8002d08 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80006c0:	f000 f9c4 	bl	8000a4c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80006c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80006ca:	2300      	movs	r3, #0
 80006cc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fc32 	bl	8002f3c <HAL_RCCEx_PeriphCLKConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x102>
  {
    Error_Handler();
 80006de:	f000 f9b5 	bl	8000a4c <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	37b0      	adds	r7, #176	; 0xb0
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_USART3_UART_Init+0x50>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 800072c:	f003 fb2a 	bl	8003d84 <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000736:	f000 f989 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200004ac 	.word	0x200004ac
 8000744:	40004800 	.word	0x40004800

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	4b38      	ldr	r3, [pc, #224]	; (8000844 <MX_GPIO_Init+0xfc>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a37      	ldr	r2, [pc, #220]	; (8000844 <MX_GPIO_Init+0xfc>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b35      	ldr	r3, [pc, #212]	; (8000844 <MX_GPIO_Init+0xfc>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	4b31      	ldr	r3, [pc, #196]	; (8000844 <MX_GPIO_Init+0xfc>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a30      	ldr	r2, [pc, #192]	; (8000844 <MX_GPIO_Init+0xfc>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b2e      	ldr	r3, [pc, #184]	; (8000844 <MX_GPIO_Init+0xfc>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	4b2a      	ldr	r3, [pc, #168]	; (8000844 <MX_GPIO_Init+0xfc>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a29      	ldr	r2, [pc, #164]	; (8000844 <MX_GPIO_Init+0xfc>)
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b27      	ldr	r3, [pc, #156]	; (8000844 <MX_GPIO_Init+0xfc>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0308 	and.w	r3, r3, #8
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_GPIO_Init+0xfc>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a22      	ldr	r2, [pc, #136]	; (8000844 <MX_GPIO_Init+0xfc>)
 80007bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b20      	ldr	r3, [pc, #128]	; (8000844 <MX_GPIO_Init+0xfc>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_GPIO_Init+0xfc>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a1b      	ldr	r2, [pc, #108]	; (8000844 <MX_GPIO_Init+0xfc>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_GPIO_Init+0xfc>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f244 0181 	movw	r1, #16513	; 0x4081
 80007f0:	4815      	ldr	r0, [pc, #84]	; (8000848 <MX_GPIO_Init+0x100>)
 80007f2:	f000 fd7f 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2140      	movs	r1, #64	; 0x40
 80007fa:	4814      	ldr	r0, [pc, #80]	; (800084c <MX_GPIO_Init+0x104>)
 80007fc:	f000 fd7a 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000800:	f244 0381 	movw	r3, #16513	; 0x4081
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	480b      	ldr	r0, [pc, #44]	; (8000848 <MX_GPIO_Init+0x100>)
 800081a:	f000 fbd9 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800081e:	2340      	movs	r3, #64	; 0x40
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_GPIO_Init+0x104>)
 8000836:	f000 fbcb 	bl	8000fd0 <HAL_GPIO_Init>

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	; 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40020400 	.word	0x40020400
 800084c:	40021800 	.word	0x40021800

08000850 <USBH_CONNECTION_Callback>:

/* USER CODE BEGIN 4 */
void USBH_CONNECTION_Callback(USBH_HandleTypeDef *phost){
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b09f      	sub	sp, #124	; 0x7c
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800085e:	69db      	ldr	r3, [r3, #28]
 8000860:	673b      	str	r3, [r7, #112]	; 0x70
	  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8000862:	2301      	movs	r3, #1
 8000864:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	  uint8_t buffer[100] = {0,};
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	2264      	movs	r2, #100	; 0x64
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f007 fa0c 	bl	8007c8e <memset>

	  do{
		  classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8000876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000878:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800087a:	4619      	mov	r1, r3
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f005 f952 	bl	8005b26 <USBH_HID_GetHIDReportDescriptor>
 8000882:	4603      	mov	r3, r0
 8000884:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	  }while(classReqStatus != USBH_OK);
 8000888:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800088c:	2b00      	cmp	r3, #0
 800088e:	d1f2      	bne.n	8000876 <USBH_CONNECTION_Callback+0x26>

	  memcpy(buffer, phost->device.Data, HID_Handle->HID_Desc.wItemLength);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f503 718e 	add.w	r1, r3, #284	; 0x11c
 8000896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000898:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800089a:	461a      	mov	r2, r3
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	4618      	mov	r0, r3
 80008a2:	f007 f9e9 	bl	8007c78 <memcpy>

	  sprintf(uart_tx_buffer, "\nDescriptor : ");
 80008a6:	4a27      	ldr	r2, [pc, #156]	; (8000944 <USBH_CONNECTION_Callback+0xf4>)
 80008a8:	4b27      	ldr	r3, [pc, #156]	; (8000948 <USBH_CONNECTION_Callback+0xf8>)
 80008aa:	4614      	mov	r4, r2
 80008ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80008ae:	6020      	str	r0, [r4, #0]
 80008b0:	6061      	str	r1, [r4, #4]
 80008b2:	60a2      	str	r2, [r4, #8]
 80008b4:	881a      	ldrh	r2, [r3, #0]
 80008b6:	789b      	ldrb	r3, [r3, #2]
 80008b8:	81a2      	strh	r2, [r4, #12]
 80008ba:	73a3      	strb	r3, [r4, #14]
	  for(int i = 0; i < HID_Handle->HID_Desc.wItemLength; i++){
 80008bc:	2300      	movs	r3, #0
 80008be:	677b      	str	r3, [r7, #116]	; 0x74
 80008c0:	e021      	b.n	8000906 <USBH_CONNECTION_Callback+0xb6>
		  if(i % 16 == 0){
 80008c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80008c4:	f003 030f 	and.w	r3, r3, #15
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d10a      	bne.n	80008e2 <USBH_CONNECTION_Callback+0x92>
				sprintf(uart_tx_buffer + strlen(uart_tx_buffer), "\n");
 80008cc:	481d      	ldr	r0, [pc, #116]	; (8000944 <USBH_CONNECTION_Callback+0xf4>)
 80008ce:	f7ff fc9f 	bl	8000210 <strlen>
 80008d2:	4602      	mov	r2, r0
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <USBH_CONNECTION_Callback+0xf4>)
 80008d6:	4413      	add	r3, r2
 80008d8:	491c      	ldr	r1, [pc, #112]	; (800094c <USBH_CONNECTION_Callback+0xfc>)
 80008da:	461a      	mov	r2, r3
 80008dc:	460b      	mov	r3, r1
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	8013      	strh	r3, [r2, #0]
			}

			sprintf(uart_tx_buffer + strlen(uart_tx_buffer), "0x%02x ", buffer[i]);
 80008e2:	4818      	ldr	r0, [pc, #96]	; (8000944 <USBH_CONNECTION_Callback+0xf4>)
 80008e4:	f7ff fc94 	bl	8000210 <strlen>
 80008e8:	4602      	mov	r2, r0
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <USBH_CONNECTION_Callback+0xf4>)
 80008ec:	18d0      	adds	r0, r2, r3
 80008ee:	f107 0208 	add.w	r2, r7, #8
 80008f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80008f4:	4413      	add	r3, r2
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	4915      	ldr	r1, [pc, #84]	; (8000950 <USBH_CONNECTION_Callback+0x100>)
 80008fc:	f007 fa88 	bl	8007e10 <siprintf>
	  for(int i = 0; i < HID_Handle->HID_Desc.wItemLength; i++){
 8000900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000902:	3301      	adds	r3, #1
 8000904:	677b      	str	r3, [r7, #116]	; 0x74
 8000906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000908:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800090a:	461a      	mov	r2, r3
 800090c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800090e:	4293      	cmp	r3, r2
 8000910:	dbd7      	blt.n	80008c2 <USBH_CONNECTION_Callback+0x72>
	  }
	  uart_length = strlen(uart_tx_buffer) +1;
 8000912:	480c      	ldr	r0, [pc, #48]	; (8000944 <USBH_CONNECTION_Callback+0xf4>)
 8000914:	f7ff fc7c 	bl	8000210 <strlen>
 8000918:	4603      	mov	r3, r0
 800091a:	3301      	adds	r3, #1
 800091c:	461a      	mov	r2, r3
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <USBH_CONNECTION_Callback+0x104>)
 8000920:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3, uart_tx_buffer, (uint16_t)uart_length, 1000);
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <USBH_CONNECTION_Callback+0x104>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	b29a      	uxth	r2, r3
 8000928:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092c:	4905      	ldr	r1, [pc, #20]	; (8000944 <USBH_CONNECTION_Callback+0xf4>)
 800092e:	480a      	ldr	r0, [pc, #40]	; (8000958 <USBH_CONNECTION_Callback+0x108>)
 8000930:	f003 fa75 	bl	8003e1e <HAL_UART_Transmit>
	  uart_length = 0;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <USBH_CONNECTION_Callback+0x104>)
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
}
 800093a:	bf00      	nop
 800093c:	377c      	adds	r7, #124	; 0x7c
 800093e:	46bd      	mov	sp, r7
 8000940:	bd90      	pop	{r4, r7, pc}
 8000942:	bf00      	nop
 8000944:	200000c4 	.word	0x200000c4
 8000948:	080084b0 	.word	0x080084b0
 800094c:	080084c0 	.word	0x080084c0
 8000950:	080084c4 	.word	0x080084c4
 8000954:	200000ac 	.word	0x200000ac
 8000958:	200004ac 	.word	0x200004ac

0800095c <USBH_HID_EventCallback>:

void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b09e      	sub	sp, #120	; 0x78
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800096a:	69db      	ldr	r3, [r3, #28]
 800096c:	673b      	str	r3, [r7, #112]	; 0x70
	uint8_t buffer[100] = {0,};
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	2264      	movs	r2, #100	; 0x64
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f007 f989 	bl	8007c8e <memset>

	if (USBH_HID_FifoRead(&HID_Handle->fifo, buffer, HID_Handle->length) ==  HID_Handle->length){
 800097c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800097e:	f103 0008 	add.w	r0, r3, #8
 8000982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000984:	8b1a      	ldrh	r2, [r3, #24]
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	4619      	mov	r1, r3
 800098c:	f005 f9d8 	bl	8005d40 <USBH_HID_FifoRead>
 8000990:	4603      	mov	r3, r0
 8000992:	461a      	mov	r2, r3
 8000994:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000996:	8b1b      	ldrh	r3, [r3, #24]
 8000998:	429a      	cmp	r2, r3
 800099a:	d147      	bne.n	8000a2c <USBH_HID_EventCallback+0xd0>
		sprintf(uart_tx_buffer, "\nReport : ");
 800099c:	4a25      	ldr	r2, [pc, #148]	; (8000a34 <USBH_HID_EventCallback+0xd8>)
 800099e:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <USBH_HID_EventCallback+0xdc>)
 80009a0:	cb03      	ldmia	r3!, {r0, r1}
 80009a2:	6010      	str	r0, [r2, #0]
 80009a4:	6051      	str	r1, [r2, #4]
 80009a6:	8819      	ldrh	r1, [r3, #0]
 80009a8:	789b      	ldrb	r3, [r3, #2]
 80009aa:	8111      	strh	r1, [r2, #8]
 80009ac:	7293      	strb	r3, [r2, #10]
		for(int i = 0; i < HID_Handle->length; i++){
 80009ae:	2300      	movs	r3, #0
 80009b0:	677b      	str	r3, [r7, #116]	; 0x74
 80009b2:	e021      	b.n	80009f8 <USBH_HID_EventCallback+0x9c>
			if(i % 16 == 0){
 80009b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80009b6:	f003 030f 	and.w	r3, r3, #15
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d10a      	bne.n	80009d4 <USBH_HID_EventCallback+0x78>
				sprintf(uart_tx_buffer + strlen(uart_tx_buffer), "\n");
 80009be:	481d      	ldr	r0, [pc, #116]	; (8000a34 <USBH_HID_EventCallback+0xd8>)
 80009c0:	f7ff fc26 	bl	8000210 <strlen>
 80009c4:	4602      	mov	r2, r0
 80009c6:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <USBH_HID_EventCallback+0xd8>)
 80009c8:	4413      	add	r3, r2
 80009ca:	491c      	ldr	r1, [pc, #112]	; (8000a3c <USBH_HID_EventCallback+0xe0>)
 80009cc:	461a      	mov	r2, r3
 80009ce:	460b      	mov	r3, r1
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	8013      	strh	r3, [r2, #0]
			}

			sprintf(uart_tx_buffer + strlen(uart_tx_buffer), "0x%02x ", buffer[i]);
 80009d4:	4817      	ldr	r0, [pc, #92]	; (8000a34 <USBH_HID_EventCallback+0xd8>)
 80009d6:	f7ff fc1b 	bl	8000210 <strlen>
 80009da:	4602      	mov	r2, r0
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <USBH_HID_EventCallback+0xd8>)
 80009de:	18d0      	adds	r0, r2, r3
 80009e0:	f107 020c 	add.w	r2, r7, #12
 80009e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80009e6:	4413      	add	r3, r2
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	461a      	mov	r2, r3
 80009ec:	4914      	ldr	r1, [pc, #80]	; (8000a40 <USBH_HID_EventCallback+0xe4>)
 80009ee:	f007 fa0f 	bl	8007e10 <siprintf>
		for(int i = 0; i < HID_Handle->length; i++){
 80009f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80009f4:	3301      	adds	r3, #1
 80009f6:	677b      	str	r3, [r7, #116]	; 0x74
 80009f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80009fa:	8b1b      	ldrh	r3, [r3, #24]
 80009fc:	461a      	mov	r2, r3
 80009fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a00:	4293      	cmp	r3, r2
 8000a02:	dbd7      	blt.n	80009b4 <USBH_HID_EventCallback+0x58>
		}
		uart_length = strlen(uart_tx_buffer) +1;
 8000a04:	480b      	ldr	r0, [pc, #44]	; (8000a34 <USBH_HID_EventCallback+0xd8>)
 8000a06:	f7ff fc03 	bl	8000210 <strlen>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	461a      	mov	r2, r3
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <USBH_HID_EventCallback+0xe8>)
 8000a12:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, uart_tx_buffer, (uint16_t)uart_length, 1000);
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <USBH_HID_EventCallback+0xe8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1e:	4905      	ldr	r1, [pc, #20]	; (8000a34 <USBH_HID_EventCallback+0xd8>)
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <USBH_HID_EventCallback+0xec>)
 8000a22:	f003 f9fc 	bl	8003e1e <HAL_UART_Transmit>
		uart_length = 0;
 8000a26:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <USBH_HID_EventCallback+0xe8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
	}
}
 8000a2c:	bf00      	nop
 8000a2e:	3778      	adds	r7, #120	; 0x78
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200000c4 	.word	0x200000c4
 8000a38:	080084cc 	.word	0x080084cc
 8000a3c:	080084c0 	.word	0x080084c0
 8000a40:	080084c4 	.word	0x080084c4
 8000a44:	200000ac 	.word	0x200000ac
 8000a48:	200004ac 	.word	0x200004ac

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a70:	6453      	str	r3, [r2, #68]	; 0x44
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	4a08      	ldr	r2, [pc, #32]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800

08000aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	; 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a19      	ldr	r2, [pc, #100]	; (8000b30 <HAL_UART_MspInit+0x84>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d12c      	bne.n	8000b28 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <HAL_UART_MspInit+0x88>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a17      	ldr	r2, [pc, #92]	; (8000b34 <HAL_UART_MspInit+0x88>)
 8000ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <HAL_UART_MspInit+0x88>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <HAL_UART_MspInit+0x88>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <HAL_UART_MspInit+0x88>)
 8000af4:	f043 0308 	orr.w	r3, r3, #8
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <HAL_UART_MspInit+0x88>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0308 	and.w	r3, r3, #8
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b18:	2307      	movs	r3, #7
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <HAL_UART_MspInit+0x8c>)
 8000b24:	f000 fa54 	bl	8000fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b28:	bf00      	nop
 8000b2a:	3728      	adds	r7, #40	; 0x28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40004800 	.word	0x40004800
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020c00 	.word	0x40020c00

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b90:	f000 f8ca 	bl	8000d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <OTG_FS_IRQHandler+0x10>)
 8000b9e:	f000 fe51 	bl	8001844 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000900 	.word	0x20000900

08000bac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <_sbrk+0x50>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d102      	bne.n	8000bc2 <_sbrk+0x16>
		heap_end = &end;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <_sbrk+0x50>)
 8000bbe:	4a10      	ldr	r2, [pc, #64]	; (8000c00 <_sbrk+0x54>)
 8000bc0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <_sbrk+0x50>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <_sbrk+0x50>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4413      	add	r3, r2
 8000bd0:	466a      	mov	r2, sp
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d907      	bls.n	8000be6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000bd6:	f007 f815 	bl	8007c04 <__errno>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	230c      	movs	r3, #12
 8000bde:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295
 8000be4:	e006      	b.n	8000bf4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <_sbrk+0x50>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	4a03      	ldr	r2, [pc, #12]	; (8000bfc <_sbrk+0x50>)
 8000bf0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200000b0 	.word	0x200000b0
 8000c00:	20000bc8 	.word	0x20000bc8

08000c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <SystemInit+0x28>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <SystemInit+0x28>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <SystemInit+0x28>)
 8000c1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c36:	e003      	b.n	8000c40 <LoopCopyDataInit>

08000c38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c3e:	3104      	adds	r1, #4

08000c40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c40:	480b      	ldr	r0, [pc, #44]	; (8000c70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c48:	d3f6      	bcc.n	8000c38 <CopyDataInit>
  ldr  r2, =_sbss
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c4c:	e002      	b.n	8000c54 <LoopFillZerobss>

08000c4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c50:	f842 3b04 	str.w	r3, [r2], #4

08000c54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c58:	d3f9      	bcc.n	8000c4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c5a:	f7ff ffd3 	bl	8000c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f006 ffd7 	bl	8007c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c62:	f7ff fcad 	bl	80005c0 <main>
  bx  lr    
 8000c66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c68:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c6c:	08008538 	.word	0x08008538
  ldr  r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c74:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000c78:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000c7c:	20000bc8 	.word	0x20000bc8

08000c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC_IRQHandler>
	...

08000c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <HAL_Init+0x40>)
 8000c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_Init+0x40>)
 8000c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <HAL_Init+0x40>)
 8000ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f94d 	bl	8000f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 f808 	bl	8000cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb8:	f7ff fed0 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023c00 	.word	0x40023c00

08000cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_InitTick+0x54>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_InitTick+0x58>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f965 	bl	8000fb6 <HAL_SYSTICK_Config>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00e      	b.n	8000d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d80a      	bhi.n	8000d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f000 f92d 	bl	8000f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d08:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <HAL_InitTick+0x5c>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e000      	b.n	8000d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000004 	.word	0x20000004

08000d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x20>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x24>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_IncTick+0x24>)
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	200004ec 	.word	0x200004ec

08000d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <HAL_GetTick+0x14>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	200004ec 	.word	0x200004ec

08000d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d70:	f7ff ffee 	bl	8000d50 <HAL_GetTick>
 8000d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d80:	d005      	beq.n	8000d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <HAL_Delay+0x40>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d8e:	bf00      	nop
 8000d90:	f7ff ffde 	bl	8000d50 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d8f7      	bhi.n	8000d90 <HAL_Delay+0x28>
  {
  }
}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000008 	.word	0x20000008

08000dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <__NVIC_GetPriorityGrouping+0x18>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	f003 0307 	and.w	r3, r3, #7
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	db0b      	blt.n	8000e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f003 021f 	and.w	r2, r3, #31
 8000e28:	4907      	ldr	r1, [pc, #28]	; (8000e48 <__NVIC_EnableIRQ+0x38>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	2001      	movs	r0, #1
 8000e32:	fa00 f202 	lsl.w	r2, r0, r2
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	; (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	; (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	; 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f18:	d301      	bcc.n	8000f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00f      	b.n	8000f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <SysTick_Config+0x40>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f26:	210f      	movs	r1, #15
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f7ff ff8e 	bl	8000e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <SysTick_Config+0x40>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f36:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <SysTick_Config+0x40>)
 8000f38:	2207      	movs	r2, #7
 8000f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	e000e010 	.word	0xe000e010

08000f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff29 	bl	8000dac <__NVIC_SetPriorityGrouping>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
 8000f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f74:	f7ff ff3e 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 8000f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	68b9      	ldr	r1, [r7, #8]
 8000f7e:	6978      	ldr	r0, [r7, #20]
 8000f80:	f7ff ff8e 	bl	8000ea0 <NVIC_EncodePriority>
 8000f84:	4602      	mov	r2, r0
 8000f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff5d 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f92:	bf00      	nop
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff31 	bl	8000e10 <__NVIC_EnableIRQ>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ffa2 	bl	8000f08 <SysTick_Config>
 8000fc4:	4603      	mov	r3, r0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	e165      	b.n	80012b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fec:	2201      	movs	r2, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	429a      	cmp	r2, r3
 8001006:	f040 8154 	bne.w	80012b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d00b      	beq.n	800102a <HAL_GPIO_Init+0x5a>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d007      	beq.n	800102a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800101e:	2b11      	cmp	r3, #17
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b12      	cmp	r3, #18
 8001028:	d130      	bne.n	800108c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001060:	2201      	movs	r2, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	091b      	lsrs	r3, r3, #4
 8001076:	f003 0201 	and.w	r2, r3, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0xfc>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b12      	cmp	r3, #18
 80010ca:	d123      	bne.n	8001114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3208      	adds	r2, #8
 80010d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	08da      	lsrs	r2, r3, #3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3208      	adds	r2, #8
 800110e:	69b9      	ldr	r1, [r7, #24]
 8001110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0203 	and.w	r2, r3, #3
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 80ae 	beq.w	80012b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b5c      	ldr	r3, [pc, #368]	; (80012cc <HAL_GPIO_Init+0x2fc>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	4a5b      	ldr	r2, [pc, #364]	; (80012cc <HAL_GPIO_Init+0x2fc>)
 8001160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001164:	6453      	str	r3, [r2, #68]	; 0x44
 8001166:	4b59      	ldr	r3, [pc, #356]	; (80012cc <HAL_GPIO_Init+0x2fc>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001172:	4a57      	ldr	r2, [pc, #348]	; (80012d0 <HAL_GPIO_Init+0x300>)
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	3302      	adds	r3, #2
 800117a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4e      	ldr	r2, [pc, #312]	; (80012d4 <HAL_GPIO_Init+0x304>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d025      	beq.n	80011ea <HAL_GPIO_Init+0x21a>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4d      	ldr	r2, [pc, #308]	; (80012d8 <HAL_GPIO_Init+0x308>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d01f      	beq.n	80011e6 <HAL_GPIO_Init+0x216>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4c      	ldr	r2, [pc, #304]	; (80012dc <HAL_GPIO_Init+0x30c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d019      	beq.n	80011e2 <HAL_GPIO_Init+0x212>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4b      	ldr	r2, [pc, #300]	; (80012e0 <HAL_GPIO_Init+0x310>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d013      	beq.n	80011de <HAL_GPIO_Init+0x20e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4a      	ldr	r2, [pc, #296]	; (80012e4 <HAL_GPIO_Init+0x314>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d00d      	beq.n	80011da <HAL_GPIO_Init+0x20a>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a49      	ldr	r2, [pc, #292]	; (80012e8 <HAL_GPIO_Init+0x318>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d007      	beq.n	80011d6 <HAL_GPIO_Init+0x206>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a48      	ldr	r2, [pc, #288]	; (80012ec <HAL_GPIO_Init+0x31c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d101      	bne.n	80011d2 <HAL_GPIO_Init+0x202>
 80011ce:	2306      	movs	r3, #6
 80011d0:	e00c      	b.n	80011ec <HAL_GPIO_Init+0x21c>
 80011d2:	2307      	movs	r3, #7
 80011d4:	e00a      	b.n	80011ec <HAL_GPIO_Init+0x21c>
 80011d6:	2305      	movs	r3, #5
 80011d8:	e008      	b.n	80011ec <HAL_GPIO_Init+0x21c>
 80011da:	2304      	movs	r3, #4
 80011dc:	e006      	b.n	80011ec <HAL_GPIO_Init+0x21c>
 80011de:	2303      	movs	r3, #3
 80011e0:	e004      	b.n	80011ec <HAL_GPIO_Init+0x21c>
 80011e2:	2302      	movs	r3, #2
 80011e4:	e002      	b.n	80011ec <HAL_GPIO_Init+0x21c>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <HAL_GPIO_Init+0x21c>
 80011ea:	2300      	movs	r3, #0
 80011ec:	69fa      	ldr	r2, [r7, #28]
 80011ee:	f002 0203 	and.w	r2, r2, #3
 80011f2:	0092      	lsls	r2, r2, #2
 80011f4:	4093      	lsls	r3, r2
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011fc:	4934      	ldr	r1, [pc, #208]	; (80012d0 <HAL_GPIO_Init+0x300>)
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	3302      	adds	r3, #2
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800120a:	4b39      	ldr	r3, [pc, #228]	; (80012f0 <HAL_GPIO_Init+0x320>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800122e:	4a30      	ldr	r2, [pc, #192]	; (80012f0 <HAL_GPIO_Init+0x320>)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001234:	4b2e      	ldr	r3, [pc, #184]	; (80012f0 <HAL_GPIO_Init+0x320>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001258:	4a25      	ldr	r2, [pc, #148]	; (80012f0 <HAL_GPIO_Init+0x320>)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800125e:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <HAL_GPIO_Init+0x320>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001282:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <HAL_GPIO_Init+0x320>)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001288:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <HAL_GPIO_Init+0x320>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012ac:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <HAL_GPIO_Init+0x320>)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3301      	adds	r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	2b0f      	cmp	r3, #15
 80012bc:	f67f ae96 	bls.w	8000fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c0:	bf00      	nop
 80012c2:	3724      	adds	r7, #36	; 0x24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40013800 	.word	0x40013800
 80012d4:	40020000 	.word	0x40020000
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40020800 	.word	0x40020800
 80012e0:	40020c00 	.word	0x40020c00
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40021400 	.word	0x40021400
 80012ec:	40021800 	.word	0x40021800
 80012f0:	40013c00 	.word	0x40013c00

080012f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
 8001300:	4613      	mov	r3, r2
 8001302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001304:	787b      	ldrb	r3, [r7, #1]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001310:	e003      	b.n	800131a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001312:	887b      	ldrh	r3, [r7, #2]
 8001314:	041a      	lsls	r2, r3, #16
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	619a      	str	r2, [r3, #24]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001326:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001328:	b08f      	sub	sp, #60	; 0x3c
 800132a:	af0a      	add	r7, sp, #40	; 0x28
 800132c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e054      	b.n	80013e2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d106      	bne.n	8001358 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f006 f9c8 	bl	80076e8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2203      	movs	r2, #3
 800135c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001368:	2b00      	cmp	r3, #0
 800136a:	d102      	bne.n	8001372 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f003 fa22 	bl	80047c0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	687e      	ldr	r6, [r7, #4]
 8001384:	466d      	mov	r5, sp
 8001386:	f106 0410 	add.w	r4, r6, #16
 800138a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800138c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800138e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001392:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001396:	e885 0003 	stmia.w	r5, {r0, r1}
 800139a:	1d33      	adds	r3, r6, #4
 800139c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800139e:	6838      	ldr	r0, [r7, #0]
 80013a0:	f003 f99c 	bl	80046dc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2101      	movs	r1, #1
 80013aa:	4618      	mov	r0, r3
 80013ac:	f003 fa19 	bl	80047e2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	603b      	str	r3, [r7, #0]
 80013b6:	687e      	ldr	r6, [r7, #4]
 80013b8:	466d      	mov	r5, sp
 80013ba:	f106 0410 	add.w	r4, r6, #16
 80013be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80013ce:	1d33      	adds	r3, r6, #4
 80013d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013d2:	6838      	ldr	r0, [r7, #0]
 80013d4:	f003 fb2c 	bl	8004a30 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013ea <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80013ea:	b590      	push	{r4, r7, lr}
 80013ec:	b089      	sub	sp, #36	; 0x24
 80013ee:	af04      	add	r7, sp, #16
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	4608      	mov	r0, r1
 80013f4:	4611      	mov	r1, r2
 80013f6:	461a      	mov	r2, r3
 80013f8:	4603      	mov	r3, r0
 80013fa:	70fb      	strb	r3, [r7, #3]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70bb      	strb	r3, [r7, #2]
 8001400:	4613      	mov	r3, r2
 8001402:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800140a:	2b01      	cmp	r3, #1
 800140c:	d101      	bne.n	8001412 <HAL_HCD_HC_Init+0x28>
 800140e:	2302      	movs	r3, #2
 8001410:	e07f      	b.n	8001512 <HAL_HCD_HC_Init+0x128>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800141a:	78fa      	ldrb	r2, [r7, #3]
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	440b      	add	r3, r1
 8001428:	333d      	adds	r3, #61	; 0x3d
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800142e:	78fa      	ldrb	r2, [r7, #3]
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	440b      	add	r3, r1
 800143c:	3338      	adds	r3, #56	; 0x38
 800143e:	787a      	ldrb	r2, [r7, #1]
 8001440:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001442:	78fa      	ldrb	r2, [r7, #3]
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	440b      	add	r3, r1
 8001450:	3340      	adds	r3, #64	; 0x40
 8001452:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001454:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001456:	78fa      	ldrb	r2, [r7, #3]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	440b      	add	r3, r1
 8001464:	3339      	adds	r3, #57	; 0x39
 8001466:	78fa      	ldrb	r2, [r7, #3]
 8001468:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800146a:	78fa      	ldrb	r2, [r7, #3]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	440b      	add	r3, r1
 8001478:	333f      	adds	r3, #63	; 0x3f
 800147a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800147e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001480:	78fa      	ldrb	r2, [r7, #3]
 8001482:	78bb      	ldrb	r3, [r7, #2]
 8001484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001488:	b2d8      	uxtb	r0, r3
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	440b      	add	r3, r1
 8001496:	333a      	adds	r3, #58	; 0x3a
 8001498:	4602      	mov	r2, r0
 800149a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800149c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	da0a      	bge.n	80014ba <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80014a4:	78fa      	ldrb	r2, [r7, #3]
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	4613      	mov	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	440b      	add	r3, r1
 80014b2:	333b      	adds	r3, #59	; 0x3b
 80014b4:	2201      	movs	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]
 80014b8:	e009      	b.n	80014ce <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80014ba:	78fa      	ldrb	r2, [r7, #3]
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	440b      	add	r3, r1
 80014c8:	333b      	adds	r3, #59	; 0x3b
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80014ce:	78fa      	ldrb	r2, [r7, #3]
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	440b      	add	r3, r1
 80014dc:	333c      	adds	r3, #60	; 0x3c
 80014de:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014e2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6818      	ldr	r0, [r3, #0]
 80014e8:	787c      	ldrb	r4, [r7, #1]
 80014ea:	78ba      	ldrb	r2, [r7, #2]
 80014ec:	78f9      	ldrb	r1, [r7, #3]
 80014ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014f0:	9302      	str	r3, [sp, #8]
 80014f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014f6:	9301      	str	r3, [sp, #4]
 80014f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	4623      	mov	r3, r4
 8001500:	f003 fc0c 	bl	8004d1c <USB_HC_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001510:	7bfb      	ldrb	r3, [r7, #15]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	bd90      	pop	{r4, r7, pc}

0800151a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001530:	2b01      	cmp	r3, #1
 8001532:	d101      	bne.n	8001538 <HAL_HCD_HC_Halt+0x1e>
 8001534:	2302      	movs	r3, #2
 8001536:	e00f      	b.n	8001558 <HAL_HCD_HC_Halt+0x3e>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	78fa      	ldrb	r2, [r7, #3]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f003 fe46 	bl	80051da <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	4608      	mov	r0, r1
 800156a:	4611      	mov	r1, r2
 800156c:	461a      	mov	r2, r3
 800156e:	4603      	mov	r3, r0
 8001570:	70fb      	strb	r3, [r7, #3]
 8001572:	460b      	mov	r3, r1
 8001574:	70bb      	strb	r3, [r7, #2]
 8001576:	4613      	mov	r3, r2
 8001578:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800157a:	78fa      	ldrb	r2, [r7, #3]
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	440b      	add	r3, r1
 8001588:	333b      	adds	r3, #59	; 0x3b
 800158a:	78ba      	ldrb	r2, [r7, #2]
 800158c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800158e:	78fa      	ldrb	r2, [r7, #3]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	440b      	add	r3, r1
 800159c:	333f      	adds	r3, #63	; 0x3f
 800159e:	787a      	ldrb	r2, [r7, #1]
 80015a0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80015a2:	7c3b      	ldrb	r3, [r7, #16]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d114      	bne.n	80015d2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80015a8:	78fa      	ldrb	r2, [r7, #3]
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	440b      	add	r3, r1
 80015b6:	3342      	adds	r3, #66	; 0x42
 80015b8:	2203      	movs	r2, #3
 80015ba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80015bc:	78fa      	ldrb	r2, [r7, #3]
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	440b      	add	r3, r1
 80015ca:	333d      	adds	r3, #61	; 0x3d
 80015cc:	7f3a      	ldrb	r2, [r7, #28]
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	e009      	b.n	80015e6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015d2:	78fa      	ldrb	r2, [r7, #3]
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	440b      	add	r3, r1
 80015e0:	3342      	adds	r3, #66	; 0x42
 80015e2:	2202      	movs	r2, #2
 80015e4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80015e6:	787b      	ldrb	r3, [r7, #1]
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	f200 80d6 	bhi.w	800179a <HAL_HCD_HC_SubmitRequest+0x23a>
 80015ee:	a201      	add	r2, pc, #4	; (adr r2, 80015f4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80015f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f4:	08001605 	.word	0x08001605
 80015f8:	08001785 	.word	0x08001785
 80015fc:	08001671 	.word	0x08001671
 8001600:	080016fb 	.word	0x080016fb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001604:	7c3b      	ldrb	r3, [r7, #16]
 8001606:	2b01      	cmp	r3, #1
 8001608:	f040 80c9 	bne.w	800179e <HAL_HCD_HC_SubmitRequest+0x23e>
 800160c:	78bb      	ldrb	r3, [r7, #2]
 800160e:	2b00      	cmp	r3, #0
 8001610:	f040 80c5 	bne.w	800179e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001614:	8b3b      	ldrh	r3, [r7, #24]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d109      	bne.n	800162e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800161a:	78fa      	ldrb	r2, [r7, #3]
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	440b      	add	r3, r1
 8001628:	3351      	adds	r3, #81	; 0x51
 800162a:	2201      	movs	r2, #1
 800162c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800162e:	78fa      	ldrb	r2, [r7, #3]
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	440b      	add	r3, r1
 800163c:	3351      	adds	r3, #81	; 0x51
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d10a      	bne.n	800165a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001644:	78fa      	ldrb	r2, [r7, #3]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	440b      	add	r3, r1
 8001652:	3342      	adds	r3, #66	; 0x42
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001658:	e0a1      	b.n	800179e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800165a:	78fa      	ldrb	r2, [r7, #3]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	440b      	add	r3, r1
 8001668:	3342      	adds	r3, #66	; 0x42
 800166a:	2202      	movs	r2, #2
 800166c:	701a      	strb	r2, [r3, #0]
      break;
 800166e:	e096      	b.n	800179e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001670:	78bb      	ldrb	r3, [r7, #2]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d120      	bne.n	80016b8 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001676:	78fa      	ldrb	r2, [r7, #3]
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	440b      	add	r3, r1
 8001684:	3351      	adds	r3, #81	; 0x51
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10a      	bne.n	80016a2 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800168c:	78fa      	ldrb	r2, [r7, #3]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	440b      	add	r3, r1
 800169a:	3342      	adds	r3, #66	; 0x42
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80016a0:	e07e      	b.n	80017a0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016a2:	78fa      	ldrb	r2, [r7, #3]
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	440b      	add	r3, r1
 80016b0:	3342      	adds	r3, #66	; 0x42
 80016b2:	2202      	movs	r2, #2
 80016b4:	701a      	strb	r2, [r3, #0]
      break;
 80016b6:	e073      	b.n	80017a0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80016b8:	78fa      	ldrb	r2, [r7, #3]
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	440b      	add	r3, r1
 80016c6:	3350      	adds	r3, #80	; 0x50
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10a      	bne.n	80016e4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016ce:	78fa      	ldrb	r2, [r7, #3]
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	440b      	add	r3, r1
 80016dc:	3342      	adds	r3, #66	; 0x42
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
      break;
 80016e2:	e05d      	b.n	80017a0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016e4:	78fa      	ldrb	r2, [r7, #3]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	440b      	add	r3, r1
 80016f2:	3342      	adds	r3, #66	; 0x42
 80016f4:	2202      	movs	r2, #2
 80016f6:	701a      	strb	r2, [r3, #0]
      break;
 80016f8:	e052      	b.n	80017a0 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80016fa:	78bb      	ldrb	r3, [r7, #2]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d120      	bne.n	8001742 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001700:	78fa      	ldrb	r2, [r7, #3]
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	440b      	add	r3, r1
 800170e:	3351      	adds	r3, #81	; 0x51
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10a      	bne.n	800172c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001716:	78fa      	ldrb	r2, [r7, #3]
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	440b      	add	r3, r1
 8001724:	3342      	adds	r3, #66	; 0x42
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800172a:	e039      	b.n	80017a0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800172c:	78fa      	ldrb	r2, [r7, #3]
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	440b      	add	r3, r1
 800173a:	3342      	adds	r3, #66	; 0x42
 800173c:	2202      	movs	r2, #2
 800173e:	701a      	strb	r2, [r3, #0]
      break;
 8001740:	e02e      	b.n	80017a0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001742:	78fa      	ldrb	r2, [r7, #3]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	440b      	add	r3, r1
 8001750:	3350      	adds	r3, #80	; 0x50
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d10a      	bne.n	800176e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001758:	78fa      	ldrb	r2, [r7, #3]
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	440b      	add	r3, r1
 8001766:	3342      	adds	r3, #66	; 0x42
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
      break;
 800176c:	e018      	b.n	80017a0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800176e:	78fa      	ldrb	r2, [r7, #3]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	440b      	add	r3, r1
 800177c:	3342      	adds	r3, #66	; 0x42
 800177e:	2202      	movs	r2, #2
 8001780:	701a      	strb	r2, [r3, #0]
      break;
 8001782:	e00d      	b.n	80017a0 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001784:	78fa      	ldrb	r2, [r7, #3]
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	3342      	adds	r3, #66	; 0x42
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
      break;
 8001798:	e002      	b.n	80017a0 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800179a:	bf00      	nop
 800179c:	e000      	b.n	80017a0 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800179e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80017a0:	78fa      	ldrb	r2, [r7, #3]
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	440b      	add	r3, r1
 80017ae:	3344      	adds	r3, #68	; 0x44
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80017b4:	78fa      	ldrb	r2, [r7, #3]
 80017b6:	8b39      	ldrh	r1, [r7, #24]
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	4403      	add	r3, r0
 80017c4:	3348      	adds	r3, #72	; 0x48
 80017c6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	440b      	add	r3, r1
 80017d6:	335c      	adds	r3, #92	; 0x5c
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	440b      	add	r3, r1
 80017ea:	334c      	adds	r3, #76	; 0x4c
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	440b      	add	r3, r1
 80017fe:	3339      	adds	r3, #57	; 0x39
 8001800:	78fa      	ldrb	r2, [r7, #3]
 8001802:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001804:	78fa      	ldrb	r2, [r7, #3]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	440b      	add	r3, r1
 8001812:	335d      	adds	r3, #93	; 0x5d
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	78fa      	ldrb	r2, [r7, #3]
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	3338      	adds	r3, #56	; 0x38
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	18d1      	adds	r1, r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	461a      	mov	r2, r3
 8001834:	f003 fb7c 	bl	8004f30 <USB_HC_StartXfer>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop

08001844 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f003 f8a5 	bl	80049aa <USB_GetMode>
 8001860:	4603      	mov	r3, r0
 8001862:	2b01      	cmp	r3, #1
 8001864:	f040 80ef 	bne.w	8001a46 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f003 f889 	bl	8004984 <USB_ReadInterrupts>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 80e5 	beq.w	8001a44 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f003 f880 	bl	8004984 <USB_ReadInterrupts>
 8001884:	4603      	mov	r3, r0
 8001886:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800188a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800188e:	d104      	bne.n	800189a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001898:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 f870 	bl	8004984 <USB_ReadInterrupts>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018ae:	d104      	bne.n	80018ba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f003 f860 	bl	8004984 <USB_ReadInterrupts>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80018ce:	d104      	bne.n	80018da <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f003 f850 	bl	8004984 <USB_ReadInterrupts>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d103      	bne.n	80018f6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2202      	movs	r2, #2
 80018f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 f842 	bl	8004984 <USB_ReadInterrupts>
 8001900:	4603      	mov	r3, r0
 8001902:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800190a:	d115      	bne.n	8001938 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001914:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d108      	bne.n	8001938 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f005 ff4e 	bl	80077c8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2101      	movs	r1, #1
 8001932:	4618      	mov	r0, r3
 8001934:	f003 f92c 	bl	8004b90 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f003 f821 	bl	8004984 <USB_ReadInterrupts>
 8001942:	4603      	mov	r3, r0
 8001944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800194c:	d102      	bne.n	8001954 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f001 f966 	bl	8002c20 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f003 f813 	bl	8004984 <USB_ReadInterrupts>
 800195e:	4603      	mov	r3, r0
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b08      	cmp	r3, #8
 8001966:	d106      	bne.n	8001976 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f005 ff11 	bl	8007790 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2208      	movs	r2, #8
 8001974:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f003 f802 	bl	8004984 <USB_ReadInterrupts>
 8001980:	4603      	mov	r3, r0
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800198a:	d138      	bne.n	80019fe <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f003 fc11 	bl	80051b8 <USB_HC_ReadInterrupt>
 8001996:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	e025      	b.n	80019ea <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f003 030f 	and.w	r3, r3, #15
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	fa22 f303 	lsr.w	r3, r2, r3
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d018      	beq.n	80019e4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	015a      	lsls	r2, r3, #5
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4413      	add	r3, r2
 80019ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019c8:	d106      	bne.n	80019d8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	4619      	mov	r1, r3
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f8cf 	bl	8001b74 <HCD_HC_IN_IRQHandler>
 80019d6:	e005      	b.n	80019e4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	4619      	mov	r1, r3
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 fcfd 	bl	80023de <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	3301      	adds	r3, #1
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d3d4      	bcc.n	800199e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f002 ffbe 	bl	8004984 <USB_ReadInterrupts>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	2b10      	cmp	r3, #16
 8001a10:	d101      	bne.n	8001a16 <HAL_HCD_IRQHandler+0x1d2>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <HAL_HCD_IRQHandler+0x1d4>
 8001a16:	2300      	movs	r3, #0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d014      	beq.n	8001a46 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699a      	ldr	r2, [r3, #24]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0210 	bic.w	r2, r2, #16
 8001a2a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f001 f84b 	bl	8002ac8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	699a      	ldr	r2, [r3, #24]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f042 0210 	orr.w	r2, r2, #16
 8001a40:	619a      	str	r2, [r3, #24]
 8001a42:	e000      	b.n	8001a46 <HAL_HCD_IRQHandler+0x202>
      return;
 8001a44:	bf00      	nop
    }
  }
}
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_HCD_Start+0x16>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e013      	b.n	8001a8a <HAL_HCD_Start+0x3e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f002 fe95 	bl	800479e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2101      	movs	r1, #1
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f003 f8ec 	bl	8004c58 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_HCD_Stop+0x16>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e00d      	b.n	8001ac4 <HAL_HCD_Stop+0x32>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 fccb 	bl	8005450 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f003 f893 	bl	8004c04 <USB_ResetPort>
 8001ade:	4603      	mov	r3, r0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001af4:	78fa      	ldrb	r2, [r7, #3]
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	440b      	add	r3, r1
 8001b02:	335c      	adds	r3, #92	; 0x5c
 8001b04:	781b      	ldrb	r3, [r3, #0]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b1e:	78fa      	ldrb	r2, [r7, #3]
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	4613      	mov	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	440b      	add	r3, r1
 8001b2c:	334c      	adds	r3, #76	; 0x4c
 8001b2e:	681b      	ldr	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 f8d5 	bl	8004cf8 <USB_GetCurrentFrame>
 8001b4e:	4603      	mov	r3, r0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f003 f8b0 	bl	8004cca <USB_GetHostSpeed>
 8001b6a:	4603      	mov	r3, r0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b8a:	78fb      	ldrb	r3, [r7, #3]
 8001b8c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	015a      	lsls	r2, r3, #5
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4413      	add	r3, r2
 8001b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d119      	bne.n	8001bd8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	015a      	lsls	r2, r3, #5
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4413      	add	r3, r2
 8001bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	015a      	lsls	r2, r3, #5
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	0151      	lsls	r1, r2, #5
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	440a      	add	r2, r1
 8001bcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	60d3      	str	r3, [r2, #12]
 8001bd6:	e0ce      	b.n	8001d76 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	015a      	lsls	r2, r3, #5
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	4413      	add	r3, r2
 8001be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bee:	d12c      	bne.n	8001c4a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	015a      	lsls	r2, r3, #5
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c02:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	440b      	add	r3, r1
 8001c12:	335d      	adds	r3, #93	; 0x5d
 8001c14:	2207      	movs	r2, #7
 8001c16:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	015a      	lsls	r2, r3, #5
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4413      	add	r3, r2
 8001c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	0151      	lsls	r1, r2, #5
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	440a      	add	r2, r1
 8001c2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c32:	f043 0302 	orr.w	r3, r3, #2
 8001c36:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	4611      	mov	r1, r2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f003 fac9 	bl	80051da <USB_HC_Halt>
 8001c48:	e095      	b.n	8001d76 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	015a      	lsls	r2, r3, #5
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4413      	add	r3, r2
 8001c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 0320 	and.w	r3, r3, #32
 8001c5c:	2b20      	cmp	r3, #32
 8001c5e:	d109      	bne.n	8001c74 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	015a      	lsls	r2, r3, #5
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4413      	add	r3, r2
 8001c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	2320      	movs	r3, #32
 8001c70:	6093      	str	r3, [r2, #8]
 8001c72:	e080      	b.n	8001d76 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	015a      	lsls	r2, r3, #5
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d134      	bne.n	8001cf4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	015a      	lsls	r2, r3, #5
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4413      	add	r3, r2
 8001c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	0151      	lsls	r1, r2, #5
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	440a      	add	r2, r1
 8001ca0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	440b      	add	r3, r1
 8001cb8:	335d      	adds	r3, #93	; 0x5d
 8001cba:	2205      	movs	r2, #5
 8001cbc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	015a      	lsls	r2, r3, #5
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cca:	461a      	mov	r2, r3
 8001ccc:	2310      	movs	r3, #16
 8001cce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	015a      	lsls	r2, r3, #5
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2308      	movs	r3, #8
 8001ce0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f003 fa74 	bl	80051da <USB_HC_Halt>
 8001cf2:	e040      	b.n	8001d76 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	015a      	lsls	r2, r3, #5
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d0a:	d134      	bne.n	8001d76 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	015a      	lsls	r2, r3, #5
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4413      	add	r3, r2
 8001d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	0151      	lsls	r1, r2, #5
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	440a      	add	r2, r1
 8001d22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d26:	f043 0302 	orr.w	r3, r3, #2
 8001d2a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f003 fa4f 	bl	80051da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	015a      	lsls	r2, r3, #5
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4413      	add	r3, r2
 8001d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2310      	movs	r3, #16
 8001d4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	440b      	add	r3, r1
 8001d5c:	335d      	adds	r3, #93	; 0x5d
 8001d5e:	2208      	movs	r2, #8
 8001d60:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	015a      	lsls	r2, r3, #5
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6e:	461a      	mov	r2, r3
 8001d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d74:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	015a      	lsls	r2, r3, #5
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d8c:	d122      	bne.n	8001dd4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	015a      	lsls	r2, r3, #5
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	0151      	lsls	r1, r2, #5
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	440a      	add	r2, r1
 8001da4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 fa0e 	bl	80051da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	015a      	lsls	r2, r3, #5
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dca:	461a      	mov	r2, r3
 8001dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dd0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001dd2:	e300      	b.n	80023d6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	015a      	lsls	r2, r3, #5
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4413      	add	r3, r2
 8001ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	f040 80fd 	bne.w	8001fe6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d01b      	beq.n	8001e2c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	440b      	add	r3, r1
 8001e02:	3348      	adds	r3, #72	; 0x48
 8001e04:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	0159      	lsls	r1, r3, #5
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	440b      	add	r3, r1
 8001e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e18:	1ad1      	subs	r1, r2, r3
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4403      	add	r3, r0
 8001e28:	334c      	adds	r3, #76	; 0x4c
 8001e2a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	440b      	add	r3, r1
 8001e3a:	335d      	adds	r3, #93	; 0x5d
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3358      	adds	r3, #88	; 0x58
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	015a      	lsls	r2, r3, #5
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e60:	461a      	mov	r2, r3
 8001e62:	2301      	movs	r3, #1
 8001e64:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	440b      	add	r3, r1
 8001e74:	333f      	adds	r3, #63	; 0x3f
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00a      	beq.n	8001e92 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	440b      	add	r3, r1
 8001e8a:	333f      	adds	r3, #63	; 0x3f
 8001e8c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d121      	bne.n	8001ed6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	0151      	lsls	r1, r2, #5
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	440a      	add	r2, r1
 8001ea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 f98c 	bl	80051da <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	015a      	lsls	r2, r3, #5
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ece:	461a      	mov	r2, r3
 8001ed0:	2310      	movs	r3, #16
 8001ed2:	6093      	str	r3, [r2, #8]
 8001ed4:	e070      	b.n	8001fb8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	440b      	add	r3, r1
 8001ee4:	333f      	adds	r3, #63	; 0x3f
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d12a      	bne.n	8001f42 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	015a      	lsls	r2, r3, #5
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	0151      	lsls	r1, r2, #5
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	440a      	add	r2, r1
 8001f02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f0a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	335c      	adds	r3, #92	; 0x5c
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	b2d8      	uxtb	r0, r3
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	440b      	add	r3, r1
 8001f32:	335c      	adds	r3, #92	; 0x5c
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	4601      	mov	r1, r0
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f005 fc52 	bl	80077e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001f40:	e03a      	b.n	8001fb8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	440b      	add	r3, r1
 8001f50:	333f      	adds	r3, #63	; 0x3f
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d12f      	bne.n	8001fb8 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	440b      	add	r3, r1
 8001f66:	335c      	adds	r3, #92	; 0x5c
 8001f68:	2201      	movs	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	440b      	add	r3, r1
 8001f7a:	3350      	adds	r3, #80	; 0x50
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	f083 0301 	eor.w	r3, r3, #1
 8001f82:	b2d8      	uxtb	r0, r3
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	440b      	add	r3, r1
 8001f92:	3350      	adds	r3, #80	; 0x50
 8001f94:	4602      	mov	r2, r0
 8001f96:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	b2d8      	uxtb	r0, r3
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	440b      	add	r3, r1
 8001faa:	335c      	adds	r3, #92	; 0x5c
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4601      	mov	r1, r0
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f005 fc16 	bl	80077e4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	440b      	add	r3, r1
 8001fc6:	3350      	adds	r3, #80	; 0x50
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	f083 0301 	eor.w	r3, r3, #1
 8001fce:	b2d8      	uxtb	r0, r3
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	440b      	add	r3, r1
 8001fde:	3350      	adds	r3, #80	; 0x50
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	701a      	strb	r2, [r3, #0]
}
 8001fe4:	e1f7      	b.n	80023d6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	f040 811a 	bne.w	8002232 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4413      	add	r3, r2
 8002006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	0151      	lsls	r1, r2, #5
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	440a      	add	r2, r1
 8002014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002018:	f023 0302 	bic.w	r3, r3, #2
 800201c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	335d      	adds	r3, #93	; 0x5d
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d10a      	bne.n	800204a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	335c      	adds	r3, #92	; 0x5c
 8002044:	2201      	movs	r2, #1
 8002046:	701a      	strb	r2, [r3, #0]
 8002048:	e0d9      	b.n	80021fe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	440b      	add	r3, r1
 8002058:	335d      	adds	r3, #93	; 0x5d
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b05      	cmp	r3, #5
 800205e:	d10a      	bne.n	8002076 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	440b      	add	r3, r1
 800206e:	335c      	adds	r3, #92	; 0x5c
 8002070:	2205      	movs	r2, #5
 8002072:	701a      	strb	r2, [r3, #0]
 8002074:	e0c3      	b.n	80021fe <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	335d      	adds	r3, #93	; 0x5d
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b06      	cmp	r3, #6
 800208a:	d00a      	beq.n	80020a2 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	440b      	add	r3, r1
 800209a:	335d      	adds	r3, #93	; 0x5d
 800209c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d156      	bne.n	8002150 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	440b      	add	r3, r1
 80020b0:	3358      	adds	r3, #88	; 0x58
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	1c59      	adds	r1, r3, #1
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4403      	add	r3, r0
 80020c4:	3358      	adds	r3, #88	; 0x58
 80020c6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	440b      	add	r3, r1
 80020d6:	3358      	adds	r3, #88	; 0x58
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d914      	bls.n	8002108 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	440b      	add	r3, r1
 80020ec:	3358      	adds	r3, #88	; 0x58
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	440b      	add	r3, r1
 8002100:	335c      	adds	r3, #92	; 0x5c
 8002102:	2204      	movs	r2, #4
 8002104:	701a      	strb	r2, [r3, #0]
 8002106:	e009      	b.n	800211c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	440b      	add	r3, r1
 8002116:	335c      	adds	r3, #92	; 0x5c
 8002118:	2202      	movs	r2, #2
 800211a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	015a      	lsls	r2, r3, #5
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4413      	add	r3, r2
 8002124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002132:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800213a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4413      	add	r3, r2
 8002144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002148:	461a      	mov	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e056      	b.n	80021fe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	440b      	add	r3, r1
 800215e:	335d      	adds	r3, #93	; 0x5d
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b03      	cmp	r3, #3
 8002164:	d123      	bne.n	80021ae <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	440b      	add	r3, r1
 8002174:	335c      	adds	r3, #92	; 0x5c
 8002176:	2202      	movs	r2, #2
 8002178:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4413      	add	r3, r2
 8002182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002190:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002198:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a6:	461a      	mov	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	e027      	b.n	80021fe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	440b      	add	r3, r1
 80021bc:	335d      	adds	r3, #93	; 0x5d
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b07      	cmp	r3, #7
 80021c2:	d11c      	bne.n	80021fe <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	440b      	add	r3, r1
 80021d2:	3358      	adds	r3, #88	; 0x58
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	1c59      	adds	r1, r3, #1
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4403      	add	r3, r0
 80021e6:	3358      	adds	r3, #88	; 0x58
 80021e8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	440b      	add	r3, r1
 80021f8:	335c      	adds	r3, #92	; 0x5c
 80021fa:	2204      	movs	r2, #4
 80021fc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220a:	461a      	mov	r2, r3
 800220c:	2302      	movs	r3, #2
 800220e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	b2d8      	uxtb	r0, r3
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	440b      	add	r3, r1
 8002222:	335c      	adds	r3, #92	; 0x5c
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	4601      	mov	r1, r0
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f005 fada 	bl	80077e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002230:	e0d1      	b.n	80023d6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4413      	add	r3, r2
 800223a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002244:	2b80      	cmp	r3, #128	; 0x80
 8002246:	d13e      	bne.n	80022c6 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4413      	add	r3, r2
 8002250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	0151      	lsls	r1, r2, #5
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	440a      	add	r2, r1
 800225e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002262:	f043 0302 	orr.w	r3, r3, #2
 8002266:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	3358      	adds	r3, #88	; 0x58
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	1c59      	adds	r1, r3, #1
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4403      	add	r3, r0
 800228a:	3358      	adds	r3, #88	; 0x58
 800228c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	335d      	adds	r3, #93	; 0x5d
 800229e:	2206      	movs	r2, #6
 80022a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f002 ff94 	bl	80051da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022be:	461a      	mov	r2, r3
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	6093      	str	r3, [r2, #8]
}
 80022c4:	e087      	b.n	80023d6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	2b10      	cmp	r3, #16
 80022da:	d17c      	bne.n	80023d6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	440b      	add	r3, r1
 80022ea:	333f      	adds	r3, #63	; 0x3f
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d122      	bne.n	8002338 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	440b      	add	r3, r1
 8002300:	3358      	adds	r3, #88	; 0x58
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4413      	add	r3, r2
 800230e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	0151      	lsls	r1, r2, #5
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	440a      	add	r2, r1
 800231c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002320:	f043 0302 	orr.w	r3, r3, #2
 8002324:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f002 ff52 	bl	80051da <USB_HC_Halt>
 8002336:	e045      	b.n	80023c4 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	333f      	adds	r3, #63	; 0x3f
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00a      	beq.n	8002364 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	440b      	add	r3, r1
 800235c:	333f      	adds	r3, #63	; 0x3f
 800235e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002360:	2b02      	cmp	r3, #2
 8002362:	d12f      	bne.n	80023c4 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	440b      	add	r3, r1
 8002372:	3358      	adds	r3, #88	; 0x58
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d121      	bne.n	80023c4 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	440b      	add	r3, r1
 800238e:	335d      	adds	r3, #93	; 0x5d
 8002390:	2203      	movs	r2, #3
 8002392:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4413      	add	r3, r2
 800239c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	0151      	lsls	r1, r2, #5
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	440a      	add	r2, r1
 80023aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023ae:	f043 0302 	orr.w	r3, r3, #2
 80023b2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	4611      	mov	r1, r2
 80023be:	4618      	mov	r0, r3
 80023c0:	f002 ff0b 	bl	80051da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d0:	461a      	mov	r2, r3
 80023d2:	2310      	movs	r3, #16
 80023d4:	6093      	str	r3, [r2, #8]
}
 80023d6:	bf00      	nop
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b086      	sub	sp, #24
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b04      	cmp	r3, #4
 800240c:	d119      	bne.n	8002442 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4413      	add	r3, r2
 8002416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241a:	461a      	mov	r2, r3
 800241c:	2304      	movs	r3, #4
 800241e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4413      	add	r3, r2
 8002428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	0151      	lsls	r1, r2, #5
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	440a      	add	r2, r1
 8002436:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800243a:	f043 0302 	orr.w	r3, r3, #2
 800243e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002440:	e33e      	b.n	8002ac0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4413      	add	r3, r2
 800244a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 0320 	and.w	r3, r3, #32
 8002454:	2b20      	cmp	r3, #32
 8002456:	d141      	bne.n	80024dc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002464:	461a      	mov	r2, r3
 8002466:	2320      	movs	r3, #32
 8002468:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	440b      	add	r3, r1
 8002478:	333d      	adds	r3, #61	; 0x3d
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b01      	cmp	r3, #1
 800247e:	f040 831f 	bne.w	8002ac0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	440b      	add	r3, r1
 8002490:	333d      	adds	r3, #61	; 0x3d
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	440b      	add	r3, r1
 80024a4:	335c      	adds	r3, #92	; 0x5c
 80024a6:	2202      	movs	r2, #2
 80024a8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	0151      	lsls	r1, r2, #5
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	440a      	add	r2, r1
 80024c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024c4:	f043 0302 	orr.w	r3, r3, #2
 80024c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f002 fe80 	bl	80051da <USB_HC_Halt>
}
 80024da:	e2f1      	b.n	8002ac0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ee:	2b40      	cmp	r3, #64	; 0x40
 80024f0:	d13f      	bne.n	8002572 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	440b      	add	r3, r1
 8002500:	335d      	adds	r3, #93	; 0x5d
 8002502:	2204      	movs	r2, #4
 8002504:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	440b      	add	r3, r1
 8002514:	333d      	adds	r3, #61	; 0x3d
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	440b      	add	r3, r1
 8002528:	3358      	adds	r3, #88	; 0x58
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4413      	add	r3, r2
 8002536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	0151      	lsls	r1, r2, #5
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	440a      	add	r2, r1
 8002544:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002548:	f043 0302 	orr.w	r3, r3, #2
 800254c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f002 fe3e 	bl	80051da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4413      	add	r3, r2
 8002566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256a:	461a      	mov	r2, r3
 800256c:	2340      	movs	r3, #64	; 0x40
 800256e:	6093      	str	r3, [r2, #8]
}
 8002570:	e2a6      	b.n	8002ac0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4413      	add	r3, r2
 800257a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002588:	d122      	bne.n	80025d0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4413      	add	r3, r2
 8002592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	0151      	lsls	r1, r2, #5
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	440a      	add	r2, r1
 80025a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025a4:	f043 0302 	orr.w	r3, r3, #2
 80025a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f002 fe10 	bl	80051da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c6:	461a      	mov	r2, r3
 80025c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025cc:	6093      	str	r3, [r2, #8]
}
 80025ce:	e277      	b.n	8002ac0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d135      	bne.n	8002652 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	440b      	add	r3, r1
 80025f4:	3358      	adds	r3, #88	; 0x58
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4413      	add	r3, r2
 8002602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	0151      	lsls	r1, r2, #5
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	440a      	add	r2, r1
 8002610:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002614:	f043 0302 	orr.w	r3, r3, #2
 8002618:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f002 fdd8 	bl	80051da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	461a      	mov	r2, r3
 8002638:	2301      	movs	r3, #1
 800263a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	440b      	add	r3, r1
 800264a:	335d      	adds	r3, #93	; 0x5d
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
}
 8002650:	e236      	b.n	8002ac0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4413      	add	r3, r2
 800265a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	2b08      	cmp	r3, #8
 8002666:	d12b      	bne.n	80026c0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	461a      	mov	r2, r3
 8002676:	2308      	movs	r3, #8
 8002678:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4413      	add	r3, r2
 8002682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	0151      	lsls	r1, r2, #5
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	440a      	add	r2, r1
 8002690:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002694:	f043 0302 	orr.w	r3, r3, #2
 8002698:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f002 fd98 	bl	80051da <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	440b      	add	r3, r1
 80026b8:	335d      	adds	r3, #93	; 0x5d
 80026ba:	2205      	movs	r2, #5
 80026bc:	701a      	strb	r2, [r3, #0]
}
 80026be:	e1ff      	b.n	8002ac0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b10      	cmp	r3, #16
 80026d4:	d155      	bne.n	8002782 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	4613      	mov	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	440b      	add	r3, r1
 80026e4:	3358      	adds	r3, #88	; 0x58
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	440b      	add	r3, r1
 80026f8:	335d      	adds	r3, #93	; 0x5d
 80026fa:	2203      	movs	r2, #3
 80026fc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	440b      	add	r3, r1
 800270c:	333d      	adds	r3, #61	; 0x3d
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d114      	bne.n	800273e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	440b      	add	r3, r1
 8002722:	333c      	adds	r3, #60	; 0x3c
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	440b      	add	r3, r1
 8002738:	333d      	adds	r3, #61	; 0x3d
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4413      	add	r3, r2
 8002746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	0151      	lsls	r1, r2, #5
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	440a      	add	r2, r1
 8002754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002758:	f043 0302 	orr.w	r3, r3, #2
 800275c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f002 fd36 	bl	80051da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4413      	add	r3, r2
 8002776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277a:	461a      	mov	r2, r3
 800277c:	2310      	movs	r3, #16
 800277e:	6093      	str	r3, [r2, #8]
}
 8002780:	e19e      	b.n	8002ac0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4413      	add	r3, r2
 800278a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002794:	2b80      	cmp	r3, #128	; 0x80
 8002796:	d12b      	bne.n	80027f0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	0151      	lsls	r1, r2, #5
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	440a      	add	r2, r1
 80027ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027b2:	f043 0302 	orr.w	r3, r3, #2
 80027b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f002 fd09 	bl	80051da <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	440b      	add	r3, r1
 80027d6:	335d      	adds	r3, #93	; 0x5d
 80027d8:	2206      	movs	r2, #6
 80027da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e8:	461a      	mov	r2, r3
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	6093      	str	r3, [r2, #8]
}
 80027ee:	e167      	b.n	8002ac0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002806:	d135      	bne.n	8002874 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4413      	add	r3, r2
 8002810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	0151      	lsls	r1, r2, #5
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	440a      	add	r2, r1
 800281e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002822:	f043 0302 	orr.w	r3, r3, #2
 8002826:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	4611      	mov	r1, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f002 fcd1 	bl	80051da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4413      	add	r3, r2
 8002840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002844:	461a      	mov	r2, r3
 8002846:	2310      	movs	r3, #16
 8002848:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4413      	add	r3, r2
 8002852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002856:	461a      	mov	r2, r3
 8002858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800285c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	440b      	add	r3, r1
 800286c:	335d      	adds	r3, #93	; 0x5d
 800286e:	2208      	movs	r2, #8
 8002870:	701a      	strb	r2, [r3, #0]
}
 8002872:	e125      	b.n	8002ac0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b02      	cmp	r3, #2
 8002888:	f040 811a 	bne.w	8002ac0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4413      	add	r3, r2
 8002894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	0151      	lsls	r1, r2, #5
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	440a      	add	r2, r1
 80028a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028a6:	f023 0302 	bic.w	r3, r3, #2
 80028aa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	440b      	add	r3, r1
 80028ba:	335d      	adds	r3, #93	; 0x5d
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d137      	bne.n	8002932 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	440b      	add	r3, r1
 80028d0:	335c      	adds	r3, #92	; 0x5c
 80028d2:	2201      	movs	r2, #1
 80028d4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	440b      	add	r3, r1
 80028e4:	333f      	adds	r3, #63	; 0x3f
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d00b      	beq.n	8002904 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	440b      	add	r3, r1
 80028fa:	333f      	adds	r3, #63	; 0x3f
 80028fc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028fe:	2b03      	cmp	r3, #3
 8002900:	f040 80c5 	bne.w	8002a8e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	440b      	add	r3, r1
 8002912:	3351      	adds	r3, #81	; 0x51
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	f083 0301 	eor.w	r3, r3, #1
 800291a:	b2d8      	uxtb	r0, r3
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	440b      	add	r3, r1
 800292a:	3351      	adds	r3, #81	; 0x51
 800292c:	4602      	mov	r2, r0
 800292e:	701a      	strb	r2, [r3, #0]
 8002930:	e0ad      	b.n	8002a8e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	440b      	add	r3, r1
 8002940:	335d      	adds	r3, #93	; 0x5d
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b03      	cmp	r3, #3
 8002946:	d10a      	bne.n	800295e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	440b      	add	r3, r1
 8002956:	335c      	adds	r3, #92	; 0x5c
 8002958:	2202      	movs	r2, #2
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	e097      	b.n	8002a8e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	4613      	mov	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	440b      	add	r3, r1
 800296c:	335d      	adds	r3, #93	; 0x5d
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b04      	cmp	r3, #4
 8002972:	d10a      	bne.n	800298a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	440b      	add	r3, r1
 8002982:	335c      	adds	r3, #92	; 0x5c
 8002984:	2202      	movs	r2, #2
 8002986:	701a      	strb	r2, [r3, #0]
 8002988:	e081      	b.n	8002a8e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	440b      	add	r3, r1
 8002998:	335d      	adds	r3, #93	; 0x5d
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b05      	cmp	r3, #5
 800299e:	d10a      	bne.n	80029b6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	440b      	add	r3, r1
 80029ae:	335c      	adds	r3, #92	; 0x5c
 80029b0:	2205      	movs	r2, #5
 80029b2:	701a      	strb	r2, [r3, #0]
 80029b4:	e06b      	b.n	8002a8e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	440b      	add	r3, r1
 80029c4:	335d      	adds	r3, #93	; 0x5d
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b06      	cmp	r3, #6
 80029ca:	d00a      	beq.n	80029e2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	440b      	add	r3, r1
 80029da:	335d      	adds	r3, #93	; 0x5d
 80029dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d155      	bne.n	8002a8e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	440b      	add	r3, r1
 80029f0:	3358      	adds	r3, #88	; 0x58
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	1c59      	adds	r1, r3, #1
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4403      	add	r3, r0
 8002a04:	3358      	adds	r3, #88	; 0x58
 8002a06:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	440b      	add	r3, r1
 8002a16:	3358      	adds	r3, #88	; 0x58
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d914      	bls.n	8002a48 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	440b      	add	r3, r1
 8002a2c:	3358      	adds	r3, #88	; 0x58
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	440b      	add	r3, r1
 8002a40:	335c      	adds	r3, #92	; 0x5c
 8002a42:	2204      	movs	r2, #4
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	e009      	b.n	8002a5c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	440b      	add	r3, r1
 8002a56:	335c      	adds	r3, #92	; 0x5c
 8002a58:	2202      	movs	r2, #2
 8002a5a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a72:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a7a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	b2d8      	uxtb	r0, r3
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	440b      	add	r3, r1
 8002ab2:	335c      	adds	r3, #92	; 0x5c
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4601      	mov	r1, r0
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f004 fe92 	bl	80077e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ac0:	bf00      	nop
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08a      	sub	sp, #40	; 0x28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	0c5b      	lsrs	r3, r3, #17
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	091b      	lsrs	r3, r3, #4
 8002af8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002afc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d003      	beq.n	8002b0c <HCD_RXQLVL_IRQHandler+0x44>
 8002b04:	2b05      	cmp	r3, #5
 8002b06:	f000 8082 	beq.w	8002c0e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b0a:	e083      	b.n	8002c14 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d07f      	beq.n	8002c12 <HCD_RXQLVL_IRQHandler+0x14a>
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	440b      	add	r3, r1
 8002b20:	3344      	adds	r3, #68	; 0x44
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d074      	beq.n	8002c12 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	440b      	add	r3, r1
 8002b3a:	3344      	adds	r3, #68	; 0x44
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	b292      	uxth	r2, r2
 8002b42:	4619      	mov	r1, r3
 8002b44:	f001 fef5 	bl	8004932 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	3344      	adds	r3, #68	; 0x44
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	18d1      	adds	r1, r2, r3
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	4403      	add	r3, r0
 8002b6c:	3344      	adds	r3, #68	; 0x44
 8002b6e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	440b      	add	r3, r1
 8002b7e:	334c      	adds	r3, #76	; 0x4c
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	18d1      	adds	r1, r2, r3
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4403      	add	r3, r0
 8002b94:	334c      	adds	r3, #76	; 0x4c
 8002b96:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <HCD_RXQLVL_IRQHandler+0x154>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d031      	beq.n	8002c12 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bc4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bcc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	440b      	add	r3, r1
 8002bee:	3350      	adds	r3, #80	; 0x50
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	f083 0301 	eor.w	r3, r3, #1
 8002bf6:	b2d8      	uxtb	r0, r3
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	440b      	add	r3, r1
 8002c06:	3350      	adds	r3, #80	; 0x50
 8002c08:	4602      	mov	r2, r0
 8002c0a:	701a      	strb	r2, [r3, #0]
      break;
 8002c0c:	e001      	b.n	8002c12 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002c0e:	bf00      	nop
 8002c10:	e000      	b.n	8002c14 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002c12:	bf00      	nop
  }
}
 8002c14:	bf00      	nop
 8002c16:	3728      	adds	r7, #40	; 0x28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	1ff80000 	.word	0x1ff80000

08002c20 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c4c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d10b      	bne.n	8002c70 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d102      	bne.n	8002c68 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f004 fda2 	bl	80077ac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f043 0302 	orr.w	r3, r3, #2
 8002c6e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d132      	bne.n	8002ce0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f043 0308 	orr.w	r3, r3, #8
 8002c80:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d126      	bne.n	8002cda <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d113      	bne.n	8002cbc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c9e:	d106      	bne.n	8002cae <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2102      	movs	r1, #2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f001 ff72 	bl	8004b90 <USB_InitFSLSPClkSel>
 8002cac:	e011      	b.n	8002cd2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f001 ff6b 	bl	8004b90 <USB_InitFSLSPClkSel>
 8002cba:	e00a      	b.n	8002cd2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d106      	bne.n	8002cd2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002cd0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f004 fd94 	bl	8007800 <HAL_HCD_PortEnabled_Callback>
 8002cd8:	e002      	b.n	8002ce0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f004 fd9e 	bl	800781c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	2b20      	cmp	r3, #32
 8002ce8:	d103      	bne.n	8002cf2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f043 0320 	orr.w	r3, r3, #32
 8002cf0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	6013      	str	r3, [r2, #0]
}
 8002cfe:	bf00      	nop
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0cc      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d1c:	4b68      	ldr	r3, [pc, #416]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d90c      	bls.n	8002d44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2a:	4b65      	ldr	r3, [pc, #404]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d32:	4b63      	ldr	r3, [pc, #396]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0b8      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d020      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d5c:	4b59      	ldr	r3, [pc, #356]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4a58      	ldr	r2, [pc, #352]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d74:	4b53      	ldr	r3, [pc, #332]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	4a52      	ldr	r2, [pc, #328]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d80:	4b50      	ldr	r3, [pc, #320]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	494d      	ldr	r1, [pc, #308]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d044      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d107      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da6:	4b47      	ldr	r3, [pc, #284]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d119      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e07f      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d003      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d107      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc6:	4b3f      	ldr	r3, [pc, #252]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e06f      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd6:	4b3b      	ldr	r3, [pc, #236]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e067      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002de6:	4b37      	ldr	r3, [pc, #220]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f023 0203 	bic.w	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4934      	ldr	r1, [pc, #208]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df8:	f7fd ffaa 	bl	8000d50 <HAL_GetTick>
 8002dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	e00a      	b.n	8002e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e00:	f7fd ffa6 	bl	8000d50 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e04f      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e16:	4b2b      	ldr	r3, [pc, #172]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 020c 	and.w	r2, r3, #12
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d1eb      	bne.n	8002e00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e28:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d20c      	bcs.n	8002e50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e36:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3e:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e032      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d008      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e5c:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4916      	ldr	r1, [pc, #88]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d009      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e7a:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	490e      	ldr	r1, [pc, #56]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e8e:	f000 fb7f 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 8002e92:	4601      	mov	r1, r0
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea0:	5cd3      	ldrb	r3, [r2, r3]
 8002ea2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ea6:	4a09      	ldr	r2, [pc, #36]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd ff0a 	bl	8000cc8 <HAL_InitTick>

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40023c00 	.word	0x40023c00
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	080084dc 	.word	0x080084dc
 8002ecc:	20000000 	.word	0x20000000
 8002ed0:	20000004 	.word	0x20000004

08002ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	20000000 	.word	0x20000000

08002eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ef0:	f7ff fff0 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002ef4:	4601      	mov	r1, r0
 8002ef6:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	0a9b      	lsrs	r3, r3, #10
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	4a03      	ldr	r2, [pc, #12]	; (8002f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f02:	5cd3      	ldrb	r3, [r2, r3]
 8002f04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	080084ec 	.word	0x080084ec

08002f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f18:	f7ff ffdc 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002f1c:	4601      	mov	r1, r0
 8002f1e:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	0b5b      	lsrs	r3, r3, #13
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	4a03      	ldr	r2, [pc, #12]	; (8002f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f2a:	5cd3      	ldrb	r3, [r2, r3]
 8002f2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40023800 	.word	0x40023800
 8002f38:	080084ec 	.word	0x080084ec

08002f3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08c      	sub	sp, #48	; 0x30
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d010      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002f74:	4b6f      	ldr	r3, [pc, #444]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f7a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f82:	496c      	ldr	r1, [pc, #432]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002f92:	2301      	movs	r3, #1
 8002f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d010      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002fa2:	4b64      	ldr	r3, [pc, #400]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fa8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb0:	4960      	ldr	r1, [pc, #384]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d017      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fd0:	4b58      	ldr	r3, [pc, #352]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	4955      	ldr	r1, [pc, #340]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d017      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800300c:	4b49      	ldr	r3, [pc, #292]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800300e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003012:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301a:	4946      	ldr	r1, [pc, #280]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800302a:	d101      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800302c:	2301      	movs	r3, #1
 800302e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003038:	2301      	movs	r3, #1
 800303a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 808a 	beq.w	800315e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	4b39      	ldr	r3, [pc, #228]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	4a38      	ldr	r2, [pc, #224]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003058:	6413      	str	r3, [r2, #64]	; 0x40
 800305a:	4b36      	ldr	r3, [pc, #216]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003066:	4b34      	ldr	r3, [pc, #208]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a33      	ldr	r2, [pc, #204]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800306c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003070:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003072:	f7fd fe6d 	bl	8000d50 <HAL_GetTick>
 8003076:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003078:	e008      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800307a:	f7fd fe69 	bl	8000d50 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e278      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800308c:	4b2a      	ldr	r3, [pc, #168]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0f0      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003098:	4b26      	ldr	r3, [pc, #152]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800309a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d02f      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b0:	6a3a      	ldr	r2, [r7, #32]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d028      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030b6:	4b1f      	ldr	r3, [pc, #124]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030be:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030c0:	4b1e      	ldr	r3, [pc, #120]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030c6:	4b1d      	ldr	r3, [pc, #116]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80030cc:	4a19      	ldr	r2, [pc, #100]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80030d2:	4b18      	ldr	r3, [pc, #96]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d114      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80030de:	f7fd fe37 	bl	8000d50 <HAL_GetTick>
 80030e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e4:	e00a      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e6:	f7fd fe33 	bl	8000d50 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d901      	bls.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e240      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fc:	4b0d      	ldr	r3, [pc, #52]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0ee      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003114:	d114      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003116:	4b07      	ldr	r3, [pc, #28]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800312a:	4902      	ldr	r1, [pc, #8]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800312c:	4313      	orrs	r3, r2
 800312e:	608b      	str	r3, [r1, #8]
 8003130:	e00c      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800
 8003138:	40007000 	.word	0x40007000
 800313c:	42470e40 	.word	0x42470e40
 8003140:	4b4a      	ldr	r3, [pc, #296]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4a49      	ldr	r2, [pc, #292]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003146:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800314a:	6093      	str	r3, [r2, #8]
 800314c:	4b47      	ldr	r3, [pc, #284]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800314e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003158:	4944      	ldr	r1, [pc, #272]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800315a:	4313      	orrs	r3, r2
 800315c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	2b00      	cmp	r3, #0
 8003168:	d004      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003170:	4b3f      	ldr	r3, [pc, #252]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003172:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00a      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003180:	4b3a      	ldr	r3, [pc, #232]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003186:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318e:	4937      	ldr	r1, [pc, #220]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031a2:	4b32      	ldr	r3, [pc, #200]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b0:	492e      	ldr	r1, [pc, #184]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d011      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80031c4:	4b29      	ldr	r3, [pc, #164]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ca:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d2:	4926      	ldr	r1, [pc, #152]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031e2:	d101      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80031e4:	2301      	movs	r3, #1
 80031e6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80031f4:	4b1d      	ldr	r3, [pc, #116]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003202:	491a      	ldr	r1, [pc, #104]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003212:	2b00      	cmp	r3, #0
 8003214:	d011      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800321c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003224:	4911      	ldr	r1, [pc, #68]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003234:	d101      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003236:	2301      	movs	r3, #1
 8003238:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323c:	2b01      	cmp	r3, #1
 800323e:	d005      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003248:	f040 80ff 	bne.w	800344a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800324c:	4b09      	ldr	r3, [pc, #36]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003252:	f7fd fd7d 	bl	8000d50 <HAL_GetTick>
 8003256:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003258:	e00e      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800325a:	f7fd fd79 	bl	8000d50 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d907      	bls.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e188      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800326c:	40023800 	.word	0x40023800
 8003270:	424711e0 	.word	0x424711e0
 8003274:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003278:	4b7e      	ldr	r3, [pc, #504]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1ea      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	2b00      	cmp	r3, #0
 8003296:	d009      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d028      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d124      	bne.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80032ac:	4b71      	ldr	r3, [pc, #452]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032b2:	0c1b      	lsrs	r3, r3, #16
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	3301      	adds	r3, #1
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032be:	4b6d      	ldr	r3, [pc, #436]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c4:	0e1b      	lsrs	r3, r3, #24
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	019b      	lsls	r3, r3, #6
 80032d6:	431a      	orrs	r2, r3
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	085b      	lsrs	r3, r3, #1
 80032dc:	3b01      	subs	r3, #1
 80032de:	041b      	lsls	r3, r3, #16
 80032e0:	431a      	orrs	r2, r3
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	061b      	lsls	r3, r3, #24
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	071b      	lsls	r3, r3, #28
 80032ee:	4961      	ldr	r1, [pc, #388]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d004      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800330a:	d00a      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003314:	2b00      	cmp	r3, #0
 8003316:	d035      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800331c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003320:	d130      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003322:	4b54      	ldr	r3, [pc, #336]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003328:	0c1b      	lsrs	r3, r3, #16
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	3301      	adds	r3, #1
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003334:	4b4f      	ldr	r3, [pc, #316]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800333a:	0f1b      	lsrs	r3, r3, #28
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	019b      	lsls	r3, r3, #6
 800334c:	431a      	orrs	r2, r3
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	085b      	lsrs	r3, r3, #1
 8003352:	3b01      	subs	r3, #1
 8003354:	041b      	lsls	r3, r3, #16
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	061b      	lsls	r3, r3, #24
 800335e:	431a      	orrs	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	071b      	lsls	r3, r3, #28
 8003364:	4943      	ldr	r1, [pc, #268]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800336c:	4b41      	ldr	r3, [pc, #260]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800336e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003372:	f023 021f 	bic.w	r2, r3, #31
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	3b01      	subs	r3, #1
 800337c:	493d      	ldr	r1, [pc, #244]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338c:	2b00      	cmp	r3, #0
 800338e:	d029      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003394:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003398:	d124      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800339a:	4b36      	ldr	r3, [pc, #216]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800339c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a0:	0c1b      	lsrs	r3, r3, #16
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	3301      	adds	r3, #1
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033ac:	4b31      	ldr	r3, [pc, #196]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b2:	0f1b      	lsrs	r3, r3, #28
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	019b      	lsls	r3, r3, #6
 80033c4:	431a      	orrs	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	085b      	lsrs	r3, r3, #1
 80033cc:	3b01      	subs	r3, #1
 80033ce:	041b      	lsls	r3, r3, #16
 80033d0:	431a      	orrs	r2, r3
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	061b      	lsls	r3, r3, #24
 80033d6:	431a      	orrs	r2, r3
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	071b      	lsls	r3, r3, #28
 80033dc:	4925      	ldr	r1, [pc, #148]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d016      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	019b      	lsls	r3, r3, #6
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	085b      	lsrs	r3, r3, #1
 8003402:	3b01      	subs	r3, #1
 8003404:	041b      	lsls	r3, r3, #16
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	061b      	lsls	r3, r3, #24
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	071b      	lsls	r3, r3, #28
 8003416:	4917      	ldr	r1, [pc, #92]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800341e:	4b16      	ldr	r3, [pc, #88]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003420:	2201      	movs	r2, #1
 8003422:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003424:	f7fd fc94 	bl	8000d50 <HAL_GetTick>
 8003428:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800342a:	e008      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800342c:	f7fd fc90 	bl	8000d50 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e09f      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800343e:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344c:	2b01      	cmp	r3, #1
 800344e:	f040 8095 	bne.w	800357c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003452:	4b0a      	ldr	r3, [pc, #40]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003458:	f7fd fc7a 	bl	8000d50 <HAL_GetTick>
 800345c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800345e:	e00f      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003460:	f7fd fc76 	bl	8000d50 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d908      	bls.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e085      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003472:	bf00      	nop
 8003474:	40023800 	.word	0x40023800
 8003478:	42470068 	.word	0x42470068
 800347c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003480:	4b41      	ldr	r3, [pc, #260]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800348c:	d0e8      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d009      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d02b      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d127      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80034b6:	4b34      	ldr	r3, [pc, #208]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034bc:	0c1b      	lsrs	r3, r3, #16
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	3301      	adds	r3, #1
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699a      	ldr	r2, [r3, #24]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	019b      	lsls	r3, r3, #6
 80034d2:	431a      	orrs	r2, r3
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	085b      	lsrs	r3, r3, #1
 80034d8:	3b01      	subs	r3, #1
 80034da:	041b      	lsls	r3, r3, #16
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	061b      	lsls	r3, r3, #24
 80034e4:	4928      	ldr	r1, [pc, #160]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80034ec:	4b26      	ldr	r3, [pc, #152]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034f2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fa:	3b01      	subs	r3, #1
 80034fc:	021b      	lsls	r3, r3, #8
 80034fe:	4922      	ldr	r1, [pc, #136]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003500:	4313      	orrs	r3, r2
 8003502:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350e:	2b00      	cmp	r3, #0
 8003510:	d01d      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003516:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800351a:	d118      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800351c:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003522:	0e1b      	lsrs	r3, r3, #24
 8003524:	f003 030f 	and.w	r3, r3, #15
 8003528:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699a      	ldr	r2, [r3, #24]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	019b      	lsls	r3, r3, #6
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	085b      	lsrs	r3, r3, #1
 800353c:	3b01      	subs	r3, #1
 800353e:	041b      	lsls	r3, r3, #16
 8003540:	431a      	orrs	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	061b      	lsls	r3, r3, #24
 8003546:	4910      	ldr	r1, [pc, #64]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800354e:	4b0f      	ldr	r3, [pc, #60]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003550:	2201      	movs	r2, #1
 8003552:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003554:	f7fd fbfc 	bl	8000d50 <HAL_GetTick>
 8003558:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800355a:	e008      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800355c:	f7fd fbf8 	bl	8000d50 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e007      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800357a:	d1ef      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3730      	adds	r7, #48	; 0x30
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40023800 	.word	0x40023800
 800358c:	42470070 	.word	0x42470070

08003590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035aa:	4bc6      	ldr	r3, [pc, #792]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x334>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	2b0c      	cmp	r3, #12
 80035b4:	f200 817e 	bhi.w	80038b4 <HAL_RCC_GetSysClockFreq+0x324>
 80035b8:	a201      	add	r2, pc, #4	; (adr r2, 80035c0 <HAL_RCC_GetSysClockFreq+0x30>)
 80035ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035be:	bf00      	nop
 80035c0:	080035f5 	.word	0x080035f5
 80035c4:	080038b5 	.word	0x080038b5
 80035c8:	080038b5 	.word	0x080038b5
 80035cc:	080038b5 	.word	0x080038b5
 80035d0:	080035fb 	.word	0x080035fb
 80035d4:	080038b5 	.word	0x080038b5
 80035d8:	080038b5 	.word	0x080038b5
 80035dc:	080038b5 	.word	0x080038b5
 80035e0:	08003601 	.word	0x08003601
 80035e4:	080038b5 	.word	0x080038b5
 80035e8:	080038b5 	.word	0x080038b5
 80035ec:	080038b5 	.word	0x080038b5
 80035f0:	0800375d 	.word	0x0800375d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035f4:	4bb4      	ldr	r3, [pc, #720]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x338>)
 80035f6:	613b      	str	r3, [r7, #16]
       break;
 80035f8:	e15f      	b.n	80038ba <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035fa:	4bb4      	ldr	r3, [pc, #720]	; (80038cc <HAL_RCC_GetSysClockFreq+0x33c>)
 80035fc:	613b      	str	r3, [r7, #16]
      break;
 80035fe:	e15c      	b.n	80038ba <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003600:	4bb0      	ldr	r3, [pc, #704]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003608:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800360a:	4bae      	ldr	r3, [pc, #696]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x334>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d04a      	beq.n	80036ac <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003616:	4bab      	ldr	r3, [pc, #684]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	099b      	lsrs	r3, r3, #6
 800361c:	f04f 0400 	mov.w	r4, #0
 8003620:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	ea03 0501 	and.w	r5, r3, r1
 800362c:	ea04 0602 	and.w	r6, r4, r2
 8003630:	4629      	mov	r1, r5
 8003632:	4632      	mov	r2, r6
 8003634:	f04f 0300 	mov.w	r3, #0
 8003638:	f04f 0400 	mov.w	r4, #0
 800363c:	0154      	lsls	r4, r2, #5
 800363e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003642:	014b      	lsls	r3, r1, #5
 8003644:	4619      	mov	r1, r3
 8003646:	4622      	mov	r2, r4
 8003648:	1b49      	subs	r1, r1, r5
 800364a:	eb62 0206 	sbc.w	r2, r2, r6
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	f04f 0400 	mov.w	r4, #0
 8003656:	0194      	lsls	r4, r2, #6
 8003658:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800365c:	018b      	lsls	r3, r1, #6
 800365e:	1a5b      	subs	r3, r3, r1
 8003660:	eb64 0402 	sbc.w	r4, r4, r2
 8003664:	f04f 0100 	mov.w	r1, #0
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	00e2      	lsls	r2, r4, #3
 800366e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003672:	00d9      	lsls	r1, r3, #3
 8003674:	460b      	mov	r3, r1
 8003676:	4614      	mov	r4, r2
 8003678:	195b      	adds	r3, r3, r5
 800367a:	eb44 0406 	adc.w	r4, r4, r6
 800367e:	f04f 0100 	mov.w	r1, #0
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	0262      	lsls	r2, r4, #9
 8003688:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800368c:	0259      	lsls	r1, r3, #9
 800368e:	460b      	mov	r3, r1
 8003690:	4614      	mov	r4, r2
 8003692:	4618      	mov	r0, r3
 8003694:	4621      	mov	r1, r4
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f04f 0400 	mov.w	r4, #0
 800369c:	461a      	mov	r2, r3
 800369e:	4623      	mov	r3, r4
 80036a0:	f7fc fe0e 	bl	80002c0 <__aeabi_uldivmod>
 80036a4:	4603      	mov	r3, r0
 80036a6:	460c      	mov	r4, r1
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	e049      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ac:	4b85      	ldr	r3, [pc, #532]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x334>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	099b      	lsrs	r3, r3, #6
 80036b2:	f04f 0400 	mov.w	r4, #0
 80036b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	ea03 0501 	and.w	r5, r3, r1
 80036c2:	ea04 0602 	and.w	r6, r4, r2
 80036c6:	4629      	mov	r1, r5
 80036c8:	4632      	mov	r2, r6
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	f04f 0400 	mov.w	r4, #0
 80036d2:	0154      	lsls	r4, r2, #5
 80036d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036d8:	014b      	lsls	r3, r1, #5
 80036da:	4619      	mov	r1, r3
 80036dc:	4622      	mov	r2, r4
 80036de:	1b49      	subs	r1, r1, r5
 80036e0:	eb62 0206 	sbc.w	r2, r2, r6
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	f04f 0400 	mov.w	r4, #0
 80036ec:	0194      	lsls	r4, r2, #6
 80036ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036f2:	018b      	lsls	r3, r1, #6
 80036f4:	1a5b      	subs	r3, r3, r1
 80036f6:	eb64 0402 	sbc.w	r4, r4, r2
 80036fa:	f04f 0100 	mov.w	r1, #0
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	00e2      	lsls	r2, r4, #3
 8003704:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003708:	00d9      	lsls	r1, r3, #3
 800370a:	460b      	mov	r3, r1
 800370c:	4614      	mov	r4, r2
 800370e:	195b      	adds	r3, r3, r5
 8003710:	eb44 0406 	adc.w	r4, r4, r6
 8003714:	f04f 0100 	mov.w	r1, #0
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	02a2      	lsls	r2, r4, #10
 800371e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003722:	0299      	lsls	r1, r3, #10
 8003724:	460b      	mov	r3, r1
 8003726:	4614      	mov	r4, r2
 8003728:	4618      	mov	r0, r3
 800372a:	4621      	mov	r1, r4
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f04f 0400 	mov.w	r4, #0
 8003732:	461a      	mov	r2, r3
 8003734:	4623      	mov	r3, r4
 8003736:	f7fc fdc3 	bl	80002c0 <__aeabi_uldivmod>
 800373a:	4603      	mov	r3, r0
 800373c:	460c      	mov	r4, r1
 800373e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003740:	4b60      	ldr	r3, [pc, #384]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	0c1b      	lsrs	r3, r3, #16
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	3301      	adds	r3, #1
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	fbb2 f3f3 	udiv	r3, r2, r3
 8003758:	613b      	str	r3, [r7, #16]
      break;
 800375a:	e0ae      	b.n	80038ba <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800375c:	4b59      	ldr	r3, [pc, #356]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x334>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003764:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003766:	4b57      	ldr	r3, [pc, #348]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d04a      	beq.n	8003808 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003772:	4b54      	ldr	r3, [pc, #336]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	099b      	lsrs	r3, r3, #6
 8003778:	f04f 0400 	mov.w	r4, #0
 800377c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	ea03 0501 	and.w	r5, r3, r1
 8003788:	ea04 0602 	and.w	r6, r4, r2
 800378c:	4629      	mov	r1, r5
 800378e:	4632      	mov	r2, r6
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	f04f 0400 	mov.w	r4, #0
 8003798:	0154      	lsls	r4, r2, #5
 800379a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800379e:	014b      	lsls	r3, r1, #5
 80037a0:	4619      	mov	r1, r3
 80037a2:	4622      	mov	r2, r4
 80037a4:	1b49      	subs	r1, r1, r5
 80037a6:	eb62 0206 	sbc.w	r2, r2, r6
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	f04f 0400 	mov.w	r4, #0
 80037b2:	0194      	lsls	r4, r2, #6
 80037b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037b8:	018b      	lsls	r3, r1, #6
 80037ba:	1a5b      	subs	r3, r3, r1
 80037bc:	eb64 0402 	sbc.w	r4, r4, r2
 80037c0:	f04f 0100 	mov.w	r1, #0
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	00e2      	lsls	r2, r4, #3
 80037ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037ce:	00d9      	lsls	r1, r3, #3
 80037d0:	460b      	mov	r3, r1
 80037d2:	4614      	mov	r4, r2
 80037d4:	195b      	adds	r3, r3, r5
 80037d6:	eb44 0406 	adc.w	r4, r4, r6
 80037da:	f04f 0100 	mov.w	r1, #0
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	0262      	lsls	r2, r4, #9
 80037e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80037e8:	0259      	lsls	r1, r3, #9
 80037ea:	460b      	mov	r3, r1
 80037ec:	4614      	mov	r4, r2
 80037ee:	4618      	mov	r0, r3
 80037f0:	4621      	mov	r1, r4
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f04f 0400 	mov.w	r4, #0
 80037f8:	461a      	mov	r2, r3
 80037fa:	4623      	mov	r3, r4
 80037fc:	f7fc fd60 	bl	80002c0 <__aeabi_uldivmod>
 8003800:	4603      	mov	r3, r0
 8003802:	460c      	mov	r4, r1
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	e049      	b.n	800389c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003808:	4b2e      	ldr	r3, [pc, #184]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x334>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	099b      	lsrs	r3, r3, #6
 800380e:	f04f 0400 	mov.w	r4, #0
 8003812:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	ea03 0501 	and.w	r5, r3, r1
 800381e:	ea04 0602 	and.w	r6, r4, r2
 8003822:	4629      	mov	r1, r5
 8003824:	4632      	mov	r2, r6
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	f04f 0400 	mov.w	r4, #0
 800382e:	0154      	lsls	r4, r2, #5
 8003830:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003834:	014b      	lsls	r3, r1, #5
 8003836:	4619      	mov	r1, r3
 8003838:	4622      	mov	r2, r4
 800383a:	1b49      	subs	r1, r1, r5
 800383c:	eb62 0206 	sbc.w	r2, r2, r6
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	f04f 0400 	mov.w	r4, #0
 8003848:	0194      	lsls	r4, r2, #6
 800384a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800384e:	018b      	lsls	r3, r1, #6
 8003850:	1a5b      	subs	r3, r3, r1
 8003852:	eb64 0402 	sbc.w	r4, r4, r2
 8003856:	f04f 0100 	mov.w	r1, #0
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	00e2      	lsls	r2, r4, #3
 8003860:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003864:	00d9      	lsls	r1, r3, #3
 8003866:	460b      	mov	r3, r1
 8003868:	4614      	mov	r4, r2
 800386a:	195b      	adds	r3, r3, r5
 800386c:	eb44 0406 	adc.w	r4, r4, r6
 8003870:	f04f 0100 	mov.w	r1, #0
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	02a2      	lsls	r2, r4, #10
 800387a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800387e:	0299      	lsls	r1, r3, #10
 8003880:	460b      	mov	r3, r1
 8003882:	4614      	mov	r4, r2
 8003884:	4618      	mov	r0, r3
 8003886:	4621      	mov	r1, r4
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f04f 0400 	mov.w	r4, #0
 800388e:	461a      	mov	r2, r3
 8003890:	4623      	mov	r3, r4
 8003892:	f7fc fd15 	bl	80002c0 <__aeabi_uldivmod>
 8003896:	4603      	mov	r3, r0
 8003898:	460c      	mov	r4, r1
 800389a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800389c:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x334>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	0f1b      	lsrs	r3, r3, #28
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b0:	613b      	str	r3, [r7, #16]
      break;
 80038b2:	e002      	b.n	80038ba <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038b4:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x338>)
 80038b6:	613b      	str	r3, [r7, #16]
      break;
 80038b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ba:	693b      	ldr	r3, [r7, #16]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	371c      	adds	r7, #28
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038c4:	40023800 	.word	0x40023800
 80038c8:	00f42400 	.word	0x00f42400
 80038cc:	007a1200 	.word	0x007a1200

080038d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8083 	beq.w	80039f0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038ea:	4b95      	ldr	r3, [pc, #596]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d019      	beq.n	800392a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038f6:	4b92      	ldr	r3, [pc, #584]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d106      	bne.n	8003910 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003902:	4b8f      	ldr	r3, [pc, #572]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800390e:	d00c      	beq.n	800392a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003910:	4b8b      	ldr	r3, [pc, #556]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003918:	2b0c      	cmp	r3, #12
 800391a:	d112      	bne.n	8003942 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800391c:	4b88      	ldr	r3, [pc, #544]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003928:	d10b      	bne.n	8003942 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392a:	4b85      	ldr	r3, [pc, #532]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d05b      	beq.n	80039ee <HAL_RCC_OscConfig+0x11e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d157      	bne.n	80039ee <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e216      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394a:	d106      	bne.n	800395a <HAL_RCC_OscConfig+0x8a>
 800394c:	4b7c      	ldr	r3, [pc, #496]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a7b      	ldr	r2, [pc, #492]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	e01d      	b.n	8003996 <HAL_RCC_OscConfig+0xc6>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003962:	d10c      	bne.n	800397e <HAL_RCC_OscConfig+0xae>
 8003964:	4b76      	ldr	r3, [pc, #472]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a75      	ldr	r2, [pc, #468]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 800396a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	4b73      	ldr	r3, [pc, #460]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a72      	ldr	r2, [pc, #456]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	e00b      	b.n	8003996 <HAL_RCC_OscConfig+0xc6>
 800397e:	4b70      	ldr	r3, [pc, #448]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a6f      	ldr	r2, [pc, #444]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	4b6d      	ldr	r3, [pc, #436]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a6c      	ldr	r2, [pc, #432]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003990:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003994:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d013      	beq.n	80039c6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399e:	f7fd f9d7 	bl	8000d50 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a6:	f7fd f9d3 	bl	8000d50 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b64      	cmp	r3, #100	; 0x64
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e1db      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b8:	4b61      	ldr	r3, [pc, #388]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0f0      	beq.n	80039a6 <HAL_RCC_OscConfig+0xd6>
 80039c4:	e014      	b.n	80039f0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c6:	f7fd f9c3 	bl	8000d50 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ce:	f7fd f9bf 	bl	8000d50 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b64      	cmp	r3, #100	; 0x64
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e1c7      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e0:	4b57      	ldr	r3, [pc, #348]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1f0      	bne.n	80039ce <HAL_RCC_OscConfig+0xfe>
 80039ec:	e000      	b.n	80039f0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d06f      	beq.n	8003adc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80039fc:	4b50      	ldr	r3, [pc, #320]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 030c 	and.w	r3, r3, #12
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d017      	beq.n	8003a38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a08:	4b4d      	ldr	r3, [pc, #308]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d105      	bne.n	8003a20 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a14:	4b4a      	ldr	r3, [pc, #296]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00b      	beq.n	8003a38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a20:	4b47      	ldr	r3, [pc, #284]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a28:	2b0c      	cmp	r3, #12
 8003a2a:	d11c      	bne.n	8003a66 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2c:	4b44      	ldr	r3, [pc, #272]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d116      	bne.n	8003a66 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a38:	4b41      	ldr	r3, [pc, #260]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_OscConfig+0x180>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e18f      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a50:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4938      	ldr	r1, [pc, #224]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a64:	e03a      	b.n	8003adc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d020      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a6e:	4b35      	ldr	r3, [pc, #212]	; (8003b44 <HAL_RCC_OscConfig+0x274>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a74:	f7fd f96c 	bl	8000d50 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a7c:	f7fd f968 	bl	8000d50 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e170      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8e:	4b2c      	ldr	r3, [pc, #176]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9a:	4b29      	ldr	r3, [pc, #164]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4925      	ldr	r1, [pc, #148]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	600b      	str	r3, [r1, #0]
 8003aae:	e015      	b.n	8003adc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ab0:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <HAL_RCC_OscConfig+0x274>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab6:	f7fd f94b 	bl	8000d50 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003abe:	f7fd f947 	bl	8000d50 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e14f      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad0:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1f0      	bne.n	8003abe <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d037      	beq.n	8003b58 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d016      	beq.n	8003b1e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003af0:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <HAL_RCC_OscConfig+0x278>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af6:	f7fd f92b 	bl	8000d50 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003afe:	f7fd f927 	bl	8000d50 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e12f      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b10:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x22e>
 8003b1c:	e01c      	b.n	8003b58 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <HAL_RCC_OscConfig+0x278>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b24:	f7fd f914 	bl	8000d50 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b2a:	e00f      	b.n	8003b4c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b2c:	f7fd f910 	bl	8000d50 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d908      	bls.n	8003b4c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e118      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
 8003b3e:	bf00      	nop
 8003b40:	40023800 	.word	0x40023800
 8003b44:	42470000 	.word	0x42470000
 8003b48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b4c:	4b8a      	ldr	r3, [pc, #552]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e9      	bne.n	8003b2c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8097 	beq.w	8003c94 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b66:	2300      	movs	r3, #0
 8003b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b6a:	4b83      	ldr	r3, [pc, #524]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10f      	bne.n	8003b96 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	4b7f      	ldr	r3, [pc, #508]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	4a7e      	ldr	r2, [pc, #504]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b84:	6413      	str	r3, [r2, #64]	; 0x40
 8003b86:	4b7c      	ldr	r3, [pc, #496]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b92:	2301      	movs	r3, #1
 8003b94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b96:	4b79      	ldr	r3, [pc, #484]	; (8003d7c <HAL_RCC_OscConfig+0x4ac>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d118      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ba2:	4b76      	ldr	r3, [pc, #472]	; (8003d7c <HAL_RCC_OscConfig+0x4ac>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a75      	ldr	r2, [pc, #468]	; (8003d7c <HAL_RCC_OscConfig+0x4ac>)
 8003ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bae:	f7fd f8cf 	bl	8000d50 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb6:	f7fd f8cb 	bl	8000d50 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e0d3      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc8:	4b6c      	ldr	r3, [pc, #432]	; (8003d7c <HAL_RCC_OscConfig+0x4ac>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0f0      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d106      	bne.n	8003bea <HAL_RCC_OscConfig+0x31a>
 8003bdc:	4b66      	ldr	r3, [pc, #408]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be0:	4a65      	ldr	r2, [pc, #404]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	6713      	str	r3, [r2, #112]	; 0x70
 8003be8:	e01c      	b.n	8003c24 <HAL_RCC_OscConfig+0x354>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b05      	cmp	r3, #5
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x33c>
 8003bf2:	4b61      	ldr	r3, [pc, #388]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	4a60      	ldr	r2, [pc, #384]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003bf8:	f043 0304 	orr.w	r3, r3, #4
 8003bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfe:	4b5e      	ldr	r3, [pc, #376]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c02:	4a5d      	ldr	r2, [pc, #372]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003c04:	f043 0301 	orr.w	r3, r3, #1
 8003c08:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0a:	e00b      	b.n	8003c24 <HAL_RCC_OscConfig+0x354>
 8003c0c:	4b5a      	ldr	r3, [pc, #360]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c10:	4a59      	ldr	r2, [pc, #356]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003c12:	f023 0301 	bic.w	r3, r3, #1
 8003c16:	6713      	str	r3, [r2, #112]	; 0x70
 8003c18:	4b57      	ldr	r3, [pc, #348]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1c:	4a56      	ldr	r2, [pc, #344]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003c1e:	f023 0304 	bic.w	r3, r3, #4
 8003c22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d015      	beq.n	8003c58 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2c:	f7fd f890 	bl	8000d50 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c32:	e00a      	b.n	8003c4a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c34:	f7fd f88c 	bl	8000d50 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e092      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4a:	4b4b      	ldr	r3, [pc, #300]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0ee      	beq.n	8003c34 <HAL_RCC_OscConfig+0x364>
 8003c56:	e014      	b.n	8003c82 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c58:	f7fd f87a 	bl	8000d50 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c5e:	e00a      	b.n	8003c76 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c60:	f7fd f876 	bl	8000d50 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e07c      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c76:	4b40      	ldr	r3, [pc, #256]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1ee      	bne.n	8003c60 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d105      	bne.n	8003c94 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c88:	4b3b      	ldr	r3, [pc, #236]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	4a3a      	ldr	r2, [pc, #232]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d068      	beq.n	8003d6e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c9c:	4b36      	ldr	r3, [pc, #216]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 030c 	and.w	r3, r3, #12
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d060      	beq.n	8003d6a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d145      	bne.n	8003d3c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb0:	4b33      	ldr	r3, [pc, #204]	; (8003d80 <HAL_RCC_OscConfig+0x4b0>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb6:	f7fd f84b 	bl	8000d50 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cbe:	f7fd f847 	bl	8000d50 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e04f      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd0:	4b29      	ldr	r3, [pc, #164]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	019b      	lsls	r3, r3, #6
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	041b      	lsls	r3, r3, #16
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	061b      	lsls	r3, r3, #24
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	071b      	lsls	r3, r3, #28
 8003d08:	491b      	ldr	r1, [pc, #108]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d0e:	4b1c      	ldr	r3, [pc, #112]	; (8003d80 <HAL_RCC_OscConfig+0x4b0>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d14:	f7fd f81c 	bl	8000d50 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1c:	f7fd f818 	bl	8000d50 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e020      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2e:	4b12      	ldr	r3, [pc, #72]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x44c>
 8003d3a:	e018      	b.n	8003d6e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3c:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <HAL_RCC_OscConfig+0x4b0>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d42:	f7fd f805 	bl	8000d50 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d4a:	f7fd f801 	bl	8000d50 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e009      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <HAL_RCC_OscConfig+0x4a8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f0      	bne.n	8003d4a <HAL_RCC_OscConfig+0x47a>
 8003d68:	e001      	b.n	8003d6e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	40007000 	.word	0x40007000
 8003d80:	42470060 	.word	0x42470060

08003d84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e03f      	b.n	8003e16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fc fe7e 	bl	8000aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2224      	movs	r2, #36	; 0x24
 8003db4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f90b 	bl	8003fe4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b088      	sub	sp, #32
 8003e22:	af02      	add	r7, sp, #8
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	603b      	str	r3, [r7, #0]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b20      	cmp	r3, #32
 8003e3c:	f040 8083 	bne.w	8003f46 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <HAL_UART_Transmit+0x2e>
 8003e46:	88fb      	ldrh	r3, [r7, #6]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e07b      	b.n	8003f48 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_UART_Transmit+0x40>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e074      	b.n	8003f48 <HAL_UART_Transmit+0x12a>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2221      	movs	r2, #33	; 0x21
 8003e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003e74:	f7fc ff6c 	bl	8000d50 <HAL_GetTick>
 8003e78:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	88fa      	ldrh	r2, [r7, #6]
 8003e7e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	88fa      	ldrh	r2, [r7, #6]
 8003e84:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003e8e:	e042      	b.n	8003f16 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea6:	d122      	bne.n	8003eee <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	2180      	movs	r1, #128	; 0x80
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 f84c 	bl	8003f50 <UART_WaitOnFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e042      	b.n	8003f48 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ed4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d103      	bne.n	8003ee6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	3302      	adds	r3, #2
 8003ee2:	60bb      	str	r3, [r7, #8]
 8003ee4:	e017      	b.n	8003f16 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	60bb      	str	r3, [r7, #8]
 8003eec:	e013      	b.n	8003f16 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2180      	movs	r1, #128	; 0x80
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f829 	bl	8003f50 <UART_WaitOnFlagUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e01f      	b.n	8003f48 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	60ba      	str	r2, [r7, #8]
 8003f0e:	781a      	ldrb	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1b7      	bne.n	8003e90 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2200      	movs	r2, #0
 8003f28:	2140      	movs	r1, #64	; 0x40
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f810 	bl	8003f50 <UART_WaitOnFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e006      	b.n	8003f48 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	e000      	b.n	8003f48 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003f46:	2302      	movs	r3, #2
  }
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f60:	e02c      	b.n	8003fbc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f68:	d028      	beq.n	8003fbc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d007      	beq.n	8003f80 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f70:	f7fc feee 	bl	8000d50 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d21d      	bcs.n	8003fbc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f8e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695a      	ldr	r2, [r3, #20]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0201 	bic.w	r2, r2, #1
 8003f9e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e00f      	b.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	bf0c      	ite	eq
 8003fcc:	2301      	moveq	r3, #1
 8003fce:	2300      	movne	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	79fb      	ldrb	r3, [r7, #7]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d0c3      	beq.n	8003f62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fe8:	b085      	sub	sp, #20
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	4313      	orrs	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004026:	f023 030c 	bic.w	r3, r3, #12
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6812      	ldr	r2, [r2, #0]
 800402e:	68f9      	ldr	r1, [r7, #12]
 8004030:	430b      	orrs	r3, r1
 8004032:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004052:	f040 818b 	bne.w	800436c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4ac1      	ldr	r2, [pc, #772]	; (8004360 <UART_SetConfig+0x37c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d005      	beq.n	800406c <UART_SetConfig+0x88>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4abf      	ldr	r2, [pc, #764]	; (8004364 <UART_SetConfig+0x380>)
 8004066:	4293      	cmp	r3, r2
 8004068:	f040 80bd 	bne.w	80041e6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800406c:	f7fe ff52 	bl	8002f14 <HAL_RCC_GetPCLK2Freq>
 8004070:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	461d      	mov	r5, r3
 8004076:	f04f 0600 	mov.w	r6, #0
 800407a:	46a8      	mov	r8, r5
 800407c:	46b1      	mov	r9, r6
 800407e:	eb18 0308 	adds.w	r3, r8, r8
 8004082:	eb49 0409 	adc.w	r4, r9, r9
 8004086:	4698      	mov	r8, r3
 8004088:	46a1      	mov	r9, r4
 800408a:	eb18 0805 	adds.w	r8, r8, r5
 800408e:	eb49 0906 	adc.w	r9, r9, r6
 8004092:	f04f 0100 	mov.w	r1, #0
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800409e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040a6:	4688      	mov	r8, r1
 80040a8:	4691      	mov	r9, r2
 80040aa:	eb18 0005 	adds.w	r0, r8, r5
 80040ae:	eb49 0106 	adc.w	r1, r9, r6
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	461d      	mov	r5, r3
 80040b8:	f04f 0600 	mov.w	r6, #0
 80040bc:	196b      	adds	r3, r5, r5
 80040be:	eb46 0406 	adc.w	r4, r6, r6
 80040c2:	461a      	mov	r2, r3
 80040c4:	4623      	mov	r3, r4
 80040c6:	f7fc f8fb 	bl	80002c0 <__aeabi_uldivmod>
 80040ca:	4603      	mov	r3, r0
 80040cc:	460c      	mov	r4, r1
 80040ce:	461a      	mov	r2, r3
 80040d0:	4ba5      	ldr	r3, [pc, #660]	; (8004368 <UART_SetConfig+0x384>)
 80040d2:	fba3 2302 	umull	r2, r3, r3, r2
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	461d      	mov	r5, r3
 80040e0:	f04f 0600 	mov.w	r6, #0
 80040e4:	46a9      	mov	r9, r5
 80040e6:	46b2      	mov	sl, r6
 80040e8:	eb19 0309 	adds.w	r3, r9, r9
 80040ec:	eb4a 040a 	adc.w	r4, sl, sl
 80040f0:	4699      	mov	r9, r3
 80040f2:	46a2      	mov	sl, r4
 80040f4:	eb19 0905 	adds.w	r9, r9, r5
 80040f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80040fc:	f04f 0100 	mov.w	r1, #0
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004108:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800410c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004110:	4689      	mov	r9, r1
 8004112:	4692      	mov	sl, r2
 8004114:	eb19 0005 	adds.w	r0, r9, r5
 8004118:	eb4a 0106 	adc.w	r1, sl, r6
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	461d      	mov	r5, r3
 8004122:	f04f 0600 	mov.w	r6, #0
 8004126:	196b      	adds	r3, r5, r5
 8004128:	eb46 0406 	adc.w	r4, r6, r6
 800412c:	461a      	mov	r2, r3
 800412e:	4623      	mov	r3, r4
 8004130:	f7fc f8c6 	bl	80002c0 <__aeabi_uldivmod>
 8004134:	4603      	mov	r3, r0
 8004136:	460c      	mov	r4, r1
 8004138:	461a      	mov	r2, r3
 800413a:	4b8b      	ldr	r3, [pc, #556]	; (8004368 <UART_SetConfig+0x384>)
 800413c:	fba3 1302 	umull	r1, r3, r3, r2
 8004140:	095b      	lsrs	r3, r3, #5
 8004142:	2164      	movs	r1, #100	; 0x64
 8004144:	fb01 f303 	mul.w	r3, r1, r3
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	3332      	adds	r3, #50	; 0x32
 800414e:	4a86      	ldr	r2, [pc, #536]	; (8004368 <UART_SetConfig+0x384>)
 8004150:	fba2 2303 	umull	r2, r3, r2, r3
 8004154:	095b      	lsrs	r3, r3, #5
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800415c:	4498      	add	r8, r3
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	461d      	mov	r5, r3
 8004162:	f04f 0600 	mov.w	r6, #0
 8004166:	46a9      	mov	r9, r5
 8004168:	46b2      	mov	sl, r6
 800416a:	eb19 0309 	adds.w	r3, r9, r9
 800416e:	eb4a 040a 	adc.w	r4, sl, sl
 8004172:	4699      	mov	r9, r3
 8004174:	46a2      	mov	sl, r4
 8004176:	eb19 0905 	adds.w	r9, r9, r5
 800417a:	eb4a 0a06 	adc.w	sl, sl, r6
 800417e:	f04f 0100 	mov.w	r1, #0
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800418a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800418e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004192:	4689      	mov	r9, r1
 8004194:	4692      	mov	sl, r2
 8004196:	eb19 0005 	adds.w	r0, r9, r5
 800419a:	eb4a 0106 	adc.w	r1, sl, r6
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	461d      	mov	r5, r3
 80041a4:	f04f 0600 	mov.w	r6, #0
 80041a8:	196b      	adds	r3, r5, r5
 80041aa:	eb46 0406 	adc.w	r4, r6, r6
 80041ae:	461a      	mov	r2, r3
 80041b0:	4623      	mov	r3, r4
 80041b2:	f7fc f885 	bl	80002c0 <__aeabi_uldivmod>
 80041b6:	4603      	mov	r3, r0
 80041b8:	460c      	mov	r4, r1
 80041ba:	461a      	mov	r2, r3
 80041bc:	4b6a      	ldr	r3, [pc, #424]	; (8004368 <UART_SetConfig+0x384>)
 80041be:	fba3 1302 	umull	r1, r3, r3, r2
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	2164      	movs	r1, #100	; 0x64
 80041c6:	fb01 f303 	mul.w	r3, r1, r3
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	3332      	adds	r3, #50	; 0x32
 80041d0:	4a65      	ldr	r2, [pc, #404]	; (8004368 <UART_SetConfig+0x384>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	f003 0207 	and.w	r2, r3, #7
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4442      	add	r2, r8
 80041e2:	609a      	str	r2, [r3, #8]
 80041e4:	e26f      	b.n	80046c6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041e6:	f7fe fe81 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 80041ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	461d      	mov	r5, r3
 80041f0:	f04f 0600 	mov.w	r6, #0
 80041f4:	46a8      	mov	r8, r5
 80041f6:	46b1      	mov	r9, r6
 80041f8:	eb18 0308 	adds.w	r3, r8, r8
 80041fc:	eb49 0409 	adc.w	r4, r9, r9
 8004200:	4698      	mov	r8, r3
 8004202:	46a1      	mov	r9, r4
 8004204:	eb18 0805 	adds.w	r8, r8, r5
 8004208:	eb49 0906 	adc.w	r9, r9, r6
 800420c:	f04f 0100 	mov.w	r1, #0
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004218:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800421c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004220:	4688      	mov	r8, r1
 8004222:	4691      	mov	r9, r2
 8004224:	eb18 0005 	adds.w	r0, r8, r5
 8004228:	eb49 0106 	adc.w	r1, r9, r6
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	461d      	mov	r5, r3
 8004232:	f04f 0600 	mov.w	r6, #0
 8004236:	196b      	adds	r3, r5, r5
 8004238:	eb46 0406 	adc.w	r4, r6, r6
 800423c:	461a      	mov	r2, r3
 800423e:	4623      	mov	r3, r4
 8004240:	f7fc f83e 	bl	80002c0 <__aeabi_uldivmod>
 8004244:	4603      	mov	r3, r0
 8004246:	460c      	mov	r4, r1
 8004248:	461a      	mov	r2, r3
 800424a:	4b47      	ldr	r3, [pc, #284]	; (8004368 <UART_SetConfig+0x384>)
 800424c:	fba3 2302 	umull	r2, r3, r3, r2
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	461d      	mov	r5, r3
 800425a:	f04f 0600 	mov.w	r6, #0
 800425e:	46a9      	mov	r9, r5
 8004260:	46b2      	mov	sl, r6
 8004262:	eb19 0309 	adds.w	r3, r9, r9
 8004266:	eb4a 040a 	adc.w	r4, sl, sl
 800426a:	4699      	mov	r9, r3
 800426c:	46a2      	mov	sl, r4
 800426e:	eb19 0905 	adds.w	r9, r9, r5
 8004272:	eb4a 0a06 	adc.w	sl, sl, r6
 8004276:	f04f 0100 	mov.w	r1, #0
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004282:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004286:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800428a:	4689      	mov	r9, r1
 800428c:	4692      	mov	sl, r2
 800428e:	eb19 0005 	adds.w	r0, r9, r5
 8004292:	eb4a 0106 	adc.w	r1, sl, r6
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	461d      	mov	r5, r3
 800429c:	f04f 0600 	mov.w	r6, #0
 80042a0:	196b      	adds	r3, r5, r5
 80042a2:	eb46 0406 	adc.w	r4, r6, r6
 80042a6:	461a      	mov	r2, r3
 80042a8:	4623      	mov	r3, r4
 80042aa:	f7fc f809 	bl	80002c0 <__aeabi_uldivmod>
 80042ae:	4603      	mov	r3, r0
 80042b0:	460c      	mov	r4, r1
 80042b2:	461a      	mov	r2, r3
 80042b4:	4b2c      	ldr	r3, [pc, #176]	; (8004368 <UART_SetConfig+0x384>)
 80042b6:	fba3 1302 	umull	r1, r3, r3, r2
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	2164      	movs	r1, #100	; 0x64
 80042be:	fb01 f303 	mul.w	r3, r1, r3
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	3332      	adds	r3, #50	; 0x32
 80042c8:	4a27      	ldr	r2, [pc, #156]	; (8004368 <UART_SetConfig+0x384>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042d6:	4498      	add	r8, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	461d      	mov	r5, r3
 80042dc:	f04f 0600 	mov.w	r6, #0
 80042e0:	46a9      	mov	r9, r5
 80042e2:	46b2      	mov	sl, r6
 80042e4:	eb19 0309 	adds.w	r3, r9, r9
 80042e8:	eb4a 040a 	adc.w	r4, sl, sl
 80042ec:	4699      	mov	r9, r3
 80042ee:	46a2      	mov	sl, r4
 80042f0:	eb19 0905 	adds.w	r9, r9, r5
 80042f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80042f8:	f04f 0100 	mov.w	r1, #0
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004304:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004308:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800430c:	4689      	mov	r9, r1
 800430e:	4692      	mov	sl, r2
 8004310:	eb19 0005 	adds.w	r0, r9, r5
 8004314:	eb4a 0106 	adc.w	r1, sl, r6
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	461d      	mov	r5, r3
 800431e:	f04f 0600 	mov.w	r6, #0
 8004322:	196b      	adds	r3, r5, r5
 8004324:	eb46 0406 	adc.w	r4, r6, r6
 8004328:	461a      	mov	r2, r3
 800432a:	4623      	mov	r3, r4
 800432c:	f7fb ffc8 	bl	80002c0 <__aeabi_uldivmod>
 8004330:	4603      	mov	r3, r0
 8004332:	460c      	mov	r4, r1
 8004334:	461a      	mov	r2, r3
 8004336:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <UART_SetConfig+0x384>)
 8004338:	fba3 1302 	umull	r1, r3, r3, r2
 800433c:	095b      	lsrs	r3, r3, #5
 800433e:	2164      	movs	r1, #100	; 0x64
 8004340:	fb01 f303 	mul.w	r3, r1, r3
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	3332      	adds	r3, #50	; 0x32
 800434a:	4a07      	ldr	r2, [pc, #28]	; (8004368 <UART_SetConfig+0x384>)
 800434c:	fba2 2303 	umull	r2, r3, r2, r3
 8004350:	095b      	lsrs	r3, r3, #5
 8004352:	f003 0207 	and.w	r2, r3, #7
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4442      	add	r2, r8
 800435c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800435e:	e1b2      	b.n	80046c6 <UART_SetConfig+0x6e2>
 8004360:	40011000 	.word	0x40011000
 8004364:	40011400 	.word	0x40011400
 8004368:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4ad7      	ldr	r2, [pc, #860]	; (80046d0 <UART_SetConfig+0x6ec>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d005      	beq.n	8004382 <UART_SetConfig+0x39e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4ad6      	ldr	r2, [pc, #856]	; (80046d4 <UART_SetConfig+0x6f0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	f040 80d1 	bne.w	8004524 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004382:	f7fe fdc7 	bl	8002f14 <HAL_RCC_GetPCLK2Freq>
 8004386:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	469a      	mov	sl, r3
 800438c:	f04f 0b00 	mov.w	fp, #0
 8004390:	46d0      	mov	r8, sl
 8004392:	46d9      	mov	r9, fp
 8004394:	eb18 0308 	adds.w	r3, r8, r8
 8004398:	eb49 0409 	adc.w	r4, r9, r9
 800439c:	4698      	mov	r8, r3
 800439e:	46a1      	mov	r9, r4
 80043a0:	eb18 080a 	adds.w	r8, r8, sl
 80043a4:	eb49 090b 	adc.w	r9, r9, fp
 80043a8:	f04f 0100 	mov.w	r1, #0
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043bc:	4688      	mov	r8, r1
 80043be:	4691      	mov	r9, r2
 80043c0:	eb1a 0508 	adds.w	r5, sl, r8
 80043c4:	eb4b 0609 	adc.w	r6, fp, r9
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	4619      	mov	r1, r3
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	f04f 0400 	mov.w	r4, #0
 80043da:	0094      	lsls	r4, r2, #2
 80043dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043e0:	008b      	lsls	r3, r1, #2
 80043e2:	461a      	mov	r2, r3
 80043e4:	4623      	mov	r3, r4
 80043e6:	4628      	mov	r0, r5
 80043e8:	4631      	mov	r1, r6
 80043ea:	f7fb ff69 	bl	80002c0 <__aeabi_uldivmod>
 80043ee:	4603      	mov	r3, r0
 80043f0:	460c      	mov	r4, r1
 80043f2:	461a      	mov	r2, r3
 80043f4:	4bb8      	ldr	r3, [pc, #736]	; (80046d8 <UART_SetConfig+0x6f4>)
 80043f6:	fba3 2302 	umull	r2, r3, r3, r2
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	469b      	mov	fp, r3
 8004404:	f04f 0c00 	mov.w	ip, #0
 8004408:	46d9      	mov	r9, fp
 800440a:	46e2      	mov	sl, ip
 800440c:	eb19 0309 	adds.w	r3, r9, r9
 8004410:	eb4a 040a 	adc.w	r4, sl, sl
 8004414:	4699      	mov	r9, r3
 8004416:	46a2      	mov	sl, r4
 8004418:	eb19 090b 	adds.w	r9, r9, fp
 800441c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004420:	f04f 0100 	mov.w	r1, #0
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800442c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004430:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004434:	4689      	mov	r9, r1
 8004436:	4692      	mov	sl, r2
 8004438:	eb1b 0509 	adds.w	r5, fp, r9
 800443c:	eb4c 060a 	adc.w	r6, ip, sl
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	4619      	mov	r1, r3
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	f04f 0300 	mov.w	r3, #0
 800444e:	f04f 0400 	mov.w	r4, #0
 8004452:	0094      	lsls	r4, r2, #2
 8004454:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004458:	008b      	lsls	r3, r1, #2
 800445a:	461a      	mov	r2, r3
 800445c:	4623      	mov	r3, r4
 800445e:	4628      	mov	r0, r5
 8004460:	4631      	mov	r1, r6
 8004462:	f7fb ff2d 	bl	80002c0 <__aeabi_uldivmod>
 8004466:	4603      	mov	r3, r0
 8004468:	460c      	mov	r4, r1
 800446a:	461a      	mov	r2, r3
 800446c:	4b9a      	ldr	r3, [pc, #616]	; (80046d8 <UART_SetConfig+0x6f4>)
 800446e:	fba3 1302 	umull	r1, r3, r3, r2
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	2164      	movs	r1, #100	; 0x64
 8004476:	fb01 f303 	mul.w	r3, r1, r3
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	3332      	adds	r3, #50	; 0x32
 8004480:	4a95      	ldr	r2, [pc, #596]	; (80046d8 <UART_SetConfig+0x6f4>)
 8004482:	fba2 2303 	umull	r2, r3, r2, r3
 8004486:	095b      	lsrs	r3, r3, #5
 8004488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800448c:	4498      	add	r8, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	469b      	mov	fp, r3
 8004492:	f04f 0c00 	mov.w	ip, #0
 8004496:	46d9      	mov	r9, fp
 8004498:	46e2      	mov	sl, ip
 800449a:	eb19 0309 	adds.w	r3, r9, r9
 800449e:	eb4a 040a 	adc.w	r4, sl, sl
 80044a2:	4699      	mov	r9, r3
 80044a4:	46a2      	mov	sl, r4
 80044a6:	eb19 090b 	adds.w	r9, r9, fp
 80044aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044ae:	f04f 0100 	mov.w	r1, #0
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044c2:	4689      	mov	r9, r1
 80044c4:	4692      	mov	sl, r2
 80044c6:	eb1b 0509 	adds.w	r5, fp, r9
 80044ca:	eb4c 060a 	adc.w	r6, ip, sl
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	4619      	mov	r1, r3
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	f04f 0300 	mov.w	r3, #0
 80044dc:	f04f 0400 	mov.w	r4, #0
 80044e0:	0094      	lsls	r4, r2, #2
 80044e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044e6:	008b      	lsls	r3, r1, #2
 80044e8:	461a      	mov	r2, r3
 80044ea:	4623      	mov	r3, r4
 80044ec:	4628      	mov	r0, r5
 80044ee:	4631      	mov	r1, r6
 80044f0:	f7fb fee6 	bl	80002c0 <__aeabi_uldivmod>
 80044f4:	4603      	mov	r3, r0
 80044f6:	460c      	mov	r4, r1
 80044f8:	461a      	mov	r2, r3
 80044fa:	4b77      	ldr	r3, [pc, #476]	; (80046d8 <UART_SetConfig+0x6f4>)
 80044fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	2164      	movs	r1, #100	; 0x64
 8004504:	fb01 f303 	mul.w	r3, r1, r3
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	3332      	adds	r3, #50	; 0x32
 800450e:	4a72      	ldr	r2, [pc, #456]	; (80046d8 <UART_SetConfig+0x6f4>)
 8004510:	fba2 2303 	umull	r2, r3, r2, r3
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	f003 020f 	and.w	r2, r3, #15
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4442      	add	r2, r8
 8004520:	609a      	str	r2, [r3, #8]
 8004522:	e0d0      	b.n	80046c6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004524:	f7fe fce2 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 8004528:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	469a      	mov	sl, r3
 800452e:	f04f 0b00 	mov.w	fp, #0
 8004532:	46d0      	mov	r8, sl
 8004534:	46d9      	mov	r9, fp
 8004536:	eb18 0308 	adds.w	r3, r8, r8
 800453a:	eb49 0409 	adc.w	r4, r9, r9
 800453e:	4698      	mov	r8, r3
 8004540:	46a1      	mov	r9, r4
 8004542:	eb18 080a 	adds.w	r8, r8, sl
 8004546:	eb49 090b 	adc.w	r9, r9, fp
 800454a:	f04f 0100 	mov.w	r1, #0
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004556:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800455a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800455e:	4688      	mov	r8, r1
 8004560:	4691      	mov	r9, r2
 8004562:	eb1a 0508 	adds.w	r5, sl, r8
 8004566:	eb4b 0609 	adc.w	r6, fp, r9
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	4619      	mov	r1, r3
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	f04f 0400 	mov.w	r4, #0
 800457c:	0094      	lsls	r4, r2, #2
 800457e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004582:	008b      	lsls	r3, r1, #2
 8004584:	461a      	mov	r2, r3
 8004586:	4623      	mov	r3, r4
 8004588:	4628      	mov	r0, r5
 800458a:	4631      	mov	r1, r6
 800458c:	f7fb fe98 	bl	80002c0 <__aeabi_uldivmod>
 8004590:	4603      	mov	r3, r0
 8004592:	460c      	mov	r4, r1
 8004594:	461a      	mov	r2, r3
 8004596:	4b50      	ldr	r3, [pc, #320]	; (80046d8 <UART_SetConfig+0x6f4>)
 8004598:	fba3 2302 	umull	r2, r3, r3, r2
 800459c:	095b      	lsrs	r3, r3, #5
 800459e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	469b      	mov	fp, r3
 80045a6:	f04f 0c00 	mov.w	ip, #0
 80045aa:	46d9      	mov	r9, fp
 80045ac:	46e2      	mov	sl, ip
 80045ae:	eb19 0309 	adds.w	r3, r9, r9
 80045b2:	eb4a 040a 	adc.w	r4, sl, sl
 80045b6:	4699      	mov	r9, r3
 80045b8:	46a2      	mov	sl, r4
 80045ba:	eb19 090b 	adds.w	r9, r9, fp
 80045be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80045c2:	f04f 0100 	mov.w	r1, #0
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045d6:	4689      	mov	r9, r1
 80045d8:	4692      	mov	sl, r2
 80045da:	eb1b 0509 	adds.w	r5, fp, r9
 80045de:	eb4c 060a 	adc.w	r6, ip, sl
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	4619      	mov	r1, r3
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	f04f 0400 	mov.w	r4, #0
 80045f4:	0094      	lsls	r4, r2, #2
 80045f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045fa:	008b      	lsls	r3, r1, #2
 80045fc:	461a      	mov	r2, r3
 80045fe:	4623      	mov	r3, r4
 8004600:	4628      	mov	r0, r5
 8004602:	4631      	mov	r1, r6
 8004604:	f7fb fe5c 	bl	80002c0 <__aeabi_uldivmod>
 8004608:	4603      	mov	r3, r0
 800460a:	460c      	mov	r4, r1
 800460c:	461a      	mov	r2, r3
 800460e:	4b32      	ldr	r3, [pc, #200]	; (80046d8 <UART_SetConfig+0x6f4>)
 8004610:	fba3 1302 	umull	r1, r3, r3, r2
 8004614:	095b      	lsrs	r3, r3, #5
 8004616:	2164      	movs	r1, #100	; 0x64
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	3332      	adds	r3, #50	; 0x32
 8004622:	4a2d      	ldr	r2, [pc, #180]	; (80046d8 <UART_SetConfig+0x6f4>)
 8004624:	fba2 2303 	umull	r2, r3, r2, r3
 8004628:	095b      	lsrs	r3, r3, #5
 800462a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800462e:	4498      	add	r8, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	469b      	mov	fp, r3
 8004634:	f04f 0c00 	mov.w	ip, #0
 8004638:	46d9      	mov	r9, fp
 800463a:	46e2      	mov	sl, ip
 800463c:	eb19 0309 	adds.w	r3, r9, r9
 8004640:	eb4a 040a 	adc.w	r4, sl, sl
 8004644:	4699      	mov	r9, r3
 8004646:	46a2      	mov	sl, r4
 8004648:	eb19 090b 	adds.w	r9, r9, fp
 800464c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004650:	f04f 0100 	mov.w	r1, #0
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800465c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004660:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004664:	4689      	mov	r9, r1
 8004666:	4692      	mov	sl, r2
 8004668:	eb1b 0509 	adds.w	r5, fp, r9
 800466c:	eb4c 060a 	adc.w	r6, ip, sl
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	4619      	mov	r1, r3
 8004676:	f04f 0200 	mov.w	r2, #0
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	f04f 0400 	mov.w	r4, #0
 8004682:	0094      	lsls	r4, r2, #2
 8004684:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004688:	008b      	lsls	r3, r1, #2
 800468a:	461a      	mov	r2, r3
 800468c:	4623      	mov	r3, r4
 800468e:	4628      	mov	r0, r5
 8004690:	4631      	mov	r1, r6
 8004692:	f7fb fe15 	bl	80002c0 <__aeabi_uldivmod>
 8004696:	4603      	mov	r3, r0
 8004698:	460c      	mov	r4, r1
 800469a:	461a      	mov	r2, r3
 800469c:	4b0e      	ldr	r3, [pc, #56]	; (80046d8 <UART_SetConfig+0x6f4>)
 800469e:	fba3 1302 	umull	r1, r3, r3, r2
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	2164      	movs	r1, #100	; 0x64
 80046a6:	fb01 f303 	mul.w	r3, r1, r3
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	3332      	adds	r3, #50	; 0x32
 80046b0:	4a09      	ldr	r2, [pc, #36]	; (80046d8 <UART_SetConfig+0x6f4>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	f003 020f 	and.w	r2, r3, #15
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4442      	add	r2, r8
 80046c2:	609a      	str	r2, [r3, #8]
}
 80046c4:	e7ff      	b.n	80046c6 <UART_SetConfig+0x6e2>
 80046c6:	bf00      	nop
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046d0:	40011000 	.word	0x40011000
 80046d4:	40011400 	.word	0x40011400
 80046d8:	51eb851f 	.word	0x51eb851f

080046dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046dc:	b084      	sub	sp, #16
 80046de:	b580      	push	{r7, lr}
 80046e0:	b084      	sub	sp, #16
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	f107 001c 	add.w	r0, r7, #28
 80046ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d122      	bne.n	800473a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800471c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800471e:	2b01      	cmp	r3, #1
 8004720:	d105      	bne.n	800472e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f94a 	bl	80049c8 <USB_CoreReset>
 8004734:	4603      	mov	r3, r0
 8004736:	73fb      	strb	r3, [r7, #15]
 8004738:	e01a      	b.n	8004770 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f93e 	bl	80049c8 <USB_CoreReset>
 800474c:	4603      	mov	r3, r0
 800474e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004752:	2b00      	cmp	r3, #0
 8004754:	d106      	bne.n	8004764 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	639a      	str	r2, [r3, #56]	; 0x38
 8004762:	e005      	b.n	8004770 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	2b01      	cmp	r3, #1
 8004774:	d10b      	bne.n	800478e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f043 0206 	orr.w	r2, r3, #6
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f043 0220 	orr.w	r2, r3, #32
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800478e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800479a:	b004      	add	sp, #16
 800479c:	4770      	bx	lr

0800479e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f043 0201 	orr.w	r2, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f023 0201 	bic.w	r2, r3, #1
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b082      	sub	sp, #8
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	460b      	mov	r3, r1
 80047ec:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d106      	bne.n	800480e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	60da      	str	r2, [r3, #12]
 800480c:	e00b      	b.n	8004826 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800480e:	78fb      	ldrb	r3, [r7, #3]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d106      	bne.n	8004822 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	60da      	str	r2, [r3, #12]
 8004820:	e001      	b.n	8004826 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e003      	b.n	800482e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004826:	2032      	movs	r0, #50	; 0x32
 8004828:	f7fc fa9e 	bl	8000d68 <HAL_Delay>

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	019b      	lsls	r3, r3, #6
 800484a:	f043 0220 	orr.w	r2, r3, #32
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	3301      	adds	r3, #1
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4a09      	ldr	r2, [pc, #36]	; (8004880 <USB_FlushTxFifo+0x48>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d901      	bls.n	8004864 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e006      	b.n	8004872 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	f003 0320 	and.w	r3, r3, #32
 800486c:	2b20      	cmp	r3, #32
 800486e:	d0f0      	beq.n	8004852 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	00030d40 	.word	0x00030d40

08004884 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2210      	movs	r2, #16
 8004894:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3301      	adds	r3, #1
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4a09      	ldr	r2, [pc, #36]	; (80048c4 <USB_FlushRxFifo+0x40>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d901      	bls.n	80048a8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e006      	b.n	80048b6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f003 0310 	and.w	r3, r3, #16
 80048b0:	2b10      	cmp	r3, #16
 80048b2:	d0f0      	beq.n	8004896 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	00030d40 	.word	0x00030d40

080048c8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b089      	sub	sp, #36	; 0x24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	4611      	mov	r1, r2
 80048d4:	461a      	mov	r2, r3
 80048d6:	460b      	mov	r3, r1
 80048d8:	71fb      	strb	r3, [r7, #7]
 80048da:	4613      	mov	r3, r2
 80048dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80048e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d11a      	bne.n	8004924 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80048ee:	88bb      	ldrh	r3, [r7, #4]
 80048f0:	3303      	adds	r3, #3
 80048f2:	089b      	lsrs	r3, r3, #2
 80048f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80048f6:	2300      	movs	r3, #0
 80048f8:	61bb      	str	r3, [r7, #24]
 80048fa:	e00f      	b.n	800491c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80048fc:	79fb      	ldrb	r3, [r7, #7]
 80048fe:	031a      	lsls	r2, r3, #12
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	4413      	add	r3, r2
 8004904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004908:	461a      	mov	r2, r3
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	3304      	adds	r3, #4
 8004914:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	3301      	adds	r3, #1
 800491a:	61bb      	str	r3, [r7, #24]
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	429a      	cmp	r2, r3
 8004922:	d3eb      	bcc.n	80048fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3724      	adds	r7, #36	; 0x24
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004932:	b480      	push	{r7}
 8004934:	b089      	sub	sp, #36	; 0x24
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	4613      	mov	r3, r2
 800493e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004948:	88fb      	ldrh	r3, [r7, #6]
 800494a:	3303      	adds	r3, #3
 800494c:	089b      	lsrs	r3, r3, #2
 800494e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004950:	2300      	movs	r3, #0
 8004952:	61bb      	str	r3, [r7, #24]
 8004954:	e00b      	b.n	800496e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	601a      	str	r2, [r3, #0]
    pDest++;
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	3304      	adds	r3, #4
 8004966:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	3301      	adds	r3, #1
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	429a      	cmp	r2, r3
 8004974:	d3ef      	bcc.n	8004956 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004976:	69fb      	ldr	r3, [r7, #28]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3724      	adds	r7, #36	; 0x24
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4013      	ands	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800499c:	68fb      	ldr	r3, [r7, #12]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	f003 0301 	and.w	r3, r3, #1
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
	...

080049c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3301      	adds	r3, #1
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4a13      	ldr	r2, [pc, #76]	; (8004a2c <USB_CoreReset+0x64>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e01b      	b.n	8004a1e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	daf2      	bge.n	80049d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f043 0201 	orr.w	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	3301      	adds	r3, #1
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4a09      	ldr	r2, [pc, #36]	; (8004a2c <USB_CoreReset+0x64>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d901      	bls.n	8004a10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e006      	b.n	8004a1e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d0f0      	beq.n	80049fe <USB_CoreReset+0x36>

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	00030d40 	.word	0x00030d40

08004a30 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a30:	b084      	sub	sp, #16
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	f107 001c 	add.w	r0, r7, #28
 8004a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	2300      	movs	r3, #0
 8004a50:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d018      	beq.n	8004a9c <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d10a      	bne.n	8004a86 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a7e:	f043 0304 	orr.w	r3, r3, #4
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	e014      	b.n	8004ab0 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a94:	f023 0304 	bic.w	r3, r3, #4
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	e009      	b.n	8004ab0 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004aaa:	f023 0304 	bic.w	r3, r3, #4
 8004aae:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004ab0:	2110      	movs	r1, #16
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7ff fec0 	bl	8004838 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7ff fee3 	bl	8004884 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	e015      	b.n	8004af0 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	3301      	adds	r3, #1
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d3e5      	bcc.n	8004ac4 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004af8:	2101      	movs	r1, #1
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f8ac 	bl	8004c58 <USB_DriveVbus>

  HAL_Delay(200U);
 8004b00:	20c8      	movs	r0, #200	; 0xc8
 8004b02:	f7fc f931 	bl	8000d68 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b12:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00b      	beq.n	8004b38 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b26:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a14      	ldr	r2, [pc, #80]	; (8004b7c <USB_HostInit+0x14c>)
 8004b2c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a13      	ldr	r2, [pc, #76]	; (8004b80 <USB_HostInit+0x150>)
 8004b32:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004b36:	e009      	b.n	8004b4c <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2280      	movs	r2, #128	; 0x80
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a10      	ldr	r2, [pc, #64]	; (8004b84 <USB_HostInit+0x154>)
 8004b42:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a10      	ldr	r2, [pc, #64]	; (8004b88 <USB_HostInit+0x158>)
 8004b48:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d105      	bne.n	8004b5e <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	f043 0210 	orr.w	r2, r3, #16
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699a      	ldr	r2, [r3, #24]
 8004b62:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <USB_HostInit+0x15c>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b76:	b004      	add	sp, #16
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	01000200 	.word	0x01000200
 8004b80:	00e00300 	.word	0x00e00300
 8004b84:	00600080 	.word	0x00600080
 8004b88:	004000e0 	.word	0x004000e0
 8004b8c:	a3200008 	.word	0xa3200008

08004b90 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bae:	f023 0303 	bic.w	r3, r3, #3
 8004bb2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	68f9      	ldr	r1, [r7, #12]
 8004bc4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d107      	bne.n	8004be2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bd8:	461a      	mov	r2, r3
 8004bda:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004bde:	6053      	str	r3, [r2, #4]
 8004be0:	e009      	b.n	8004bf6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d106      	bne.n	8004bf6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f241 7370 	movw	r3, #6000	; 0x1770
 8004bf4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c24:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c32:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004c34:	2064      	movs	r0, #100	; 0x64
 8004c36:	f7fc f897 	bl	8000d68 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c46:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004c48:	200a      	movs	r0, #10
 8004c4a:	f7fc f88d 	bl	8000d68 <HAL_Delay>

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	460b      	mov	r3, r1
 8004c62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c7c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d109      	bne.n	8004c9c <USB_DriveVbus+0x44>
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d106      	bne.n	8004c9c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c9a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca6:	d109      	bne.n	8004cbc <USB_DriveVbus+0x64>
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d106      	bne.n	8004cbc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004cb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cba:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b085      	sub	sp, #20
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	0c5b      	lsrs	r3, r3, #17
 8004ce8:	f003 0303 	and.w	r3, r3, #3
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	b29b      	uxth	r3, r3
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
	...

08004d1c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	4608      	mov	r0, r1
 8004d26:	4611      	mov	r1, r2
 8004d28:	461a      	mov	r2, r3
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	70fb      	strb	r3, [r7, #3]
 8004d2e:	460b      	mov	r3, r1
 8004d30:	70bb      	strb	r3, [r7, #2]
 8004d32:	4613      	mov	r3, r2
 8004d34:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004d3e:	78fb      	ldrb	r3, [r7, #3]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d50:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004d52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d87e      	bhi.n	8004e58 <USB_HC_Init+0x13c>
 8004d5a:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <USB_HC_Init+0x44>)
 8004d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d60:	08004d71 	.word	0x08004d71
 8004d64:	08004e1b 	.word	0x08004e1b
 8004d68:	08004d71 	.word	0x08004d71
 8004d6c:	08004ddd 	.word	0x08004ddd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	f240 439d 	movw	r3, #1181	; 0x49d
 8004d82:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004d84:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	da10      	bge.n	8004dae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	78fa      	ldrb	r2, [r7, #3]
 8004d9c:	0151      	lsls	r1, r2, #5
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	440a      	add	r2, r1
 8004da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004daa:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004dac:	e057      	b.n	8004e5e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d051      	beq.n	8004e5e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	78fa      	ldrb	r2, [r7, #3]
 8004dca:	0151      	lsls	r1, r2, #5
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	440a      	add	r2, r1
 8004dd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dd4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004dd8:	60d3      	str	r3, [r2, #12]
      break;
 8004dda:	e040      	b.n	8004e5e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ddc:	78fb      	ldrb	r3, [r7, #3]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de8:	461a      	mov	r2, r3
 8004dea:	f240 639d 	movw	r3, #1693	; 0x69d
 8004dee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004df0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	da34      	bge.n	8004e62 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	78fa      	ldrb	r2, [r7, #3]
 8004e08:	0151      	lsls	r1, r2, #5
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	440a      	add	r2, r1
 8004e0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e16:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004e18:	e023      	b.n	8004e62 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e1a:	78fb      	ldrb	r3, [r7, #3]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e26:	461a      	mov	r2, r3
 8004e28:	f240 2325 	movw	r3, #549	; 0x225
 8004e2c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	da17      	bge.n	8004e66 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004e36:	78fb      	ldrb	r3, [r7, #3]
 8004e38:	015a      	lsls	r2, r3, #5
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	78fa      	ldrb	r2, [r7, #3]
 8004e46:	0151      	lsls	r1, r2, #5
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	440a      	add	r2, r1
 8004e4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e50:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004e54:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004e56:	e006      	b.n	8004e66 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e5c:	e004      	b.n	8004e68 <USB_HC_Init+0x14c>
      break;
 8004e5e:	bf00      	nop
 8004e60:	e002      	b.n	8004e68 <USB_HC_Init+0x14c>
      break;
 8004e62:	bf00      	nop
 8004e64:	e000      	b.n	8004e68 <USB_HC_Init+0x14c>
      break;
 8004e66:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e6e:	699a      	ldr	r2, [r3, #24]
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	2101      	movs	r1, #1
 8004e78:	fa01 f303 	lsl.w	r3, r1, r3
 8004e7c:	68b9      	ldr	r1, [r7, #8]
 8004e7e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e82:	4313      	orrs	r3, r2
 8004e84:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004e92:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	da03      	bge.n	8004ea2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e9e:	613b      	str	r3, [r7, #16]
 8004ea0:	e001      	b.n	8004ea6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004ea6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d103      	bne.n	8004eb6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004eae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	e001      	b.n	8004eba <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004eba:	787b      	ldrb	r3, [r7, #1]
 8004ebc:	059b      	lsls	r3, r3, #22
 8004ebe:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ec2:	78bb      	ldrb	r3, [r7, #2]
 8004ec4:	02db      	lsls	r3, r3, #11
 8004ec6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004eca:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004ecc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ed0:	049b      	lsls	r3, r3, #18
 8004ed2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ed6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ed8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004eda:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004ede:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ee4:	78fb      	ldrb	r3, [r7, #3]
 8004ee6:	0159      	lsls	r1, r3, #5
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	440b      	add	r3, r1
 8004eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ef6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004ef8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d10f      	bne.n	8004f20 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004f00:	78fb      	ldrb	r3, [r7, #3]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	78fa      	ldrb	r2, [r7, #3]
 8004f10:	0151      	lsls	r1, r2, #5
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	440a      	add	r2, r1
 8004f16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f1e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	371c      	adds	r7, #28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop

08004f30 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08c      	sub	sp, #48	; 0x30
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	785b      	ldrb	r3, [r3, #1]
 8004f46:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004f48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f4c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d028      	beq.n	8004fac <USB_HC_StartXfer+0x7c>
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	791b      	ldrb	r3, [r3, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d124      	bne.n	8004fac <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10b      	bne.n	8004f80 <USB_HC_StartXfer+0x50>
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	795b      	ldrb	r3, [r3, #5]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d107      	bne.n	8004f80 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	785b      	ldrb	r3, [r3, #1]
 8004f74:	4619      	mov	r1, r3
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 fa2e 	bl	80053d8 <USB_DoPing>
      return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	e112      	b.n	80051a6 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004f80:	79fb      	ldrb	r3, [r7, #7]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d112      	bne.n	8004fac <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	0151      	lsls	r1, r2, #5
 8004f98:	6a3a      	ldr	r2, [r7, #32]
 8004f9a:	440a      	add	r2, r1
 8004f9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fa0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004fa4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d018      	beq.n	8004fe6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	8912      	ldrh	r2, [r2, #8]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	8912      	ldrh	r2, [r2, #8]
 8004fc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fc8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004fca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004fcc:	8b7b      	ldrh	r3, [r7, #26]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d90b      	bls.n	8004fea <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004fd2:	8b7b      	ldrh	r3, [r7, #26]
 8004fd4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004fd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	8912      	ldrh	r2, [r2, #8]
 8004fdc:	fb02 f203 	mul.w	r2, r2, r3
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	611a      	str	r2, [r3, #16]
 8004fe4:	e001      	b.n	8004fea <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	78db      	ldrb	r3, [r3, #3]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d006      	beq.n	8005000 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004ff2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	8912      	ldrh	r2, [r2, #8]
 8004ff8:	fb02 f203 	mul.w	r2, r2, r3
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005008:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800500a:	04d9      	lsls	r1, r3, #19
 800500c:	4b68      	ldr	r3, [pc, #416]	; (80051b0 <USB_HC_StartXfer+0x280>)
 800500e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005010:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	7a9b      	ldrb	r3, [r3, #10]
 8005016:	075b      	lsls	r3, r3, #29
 8005018:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800501c:	69f9      	ldr	r1, [r7, #28]
 800501e:	0148      	lsls	r0, r1, #5
 8005020:	6a39      	ldr	r1, [r7, #32]
 8005022:	4401      	add	r1, r0
 8005024:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005028:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800502a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800502c:	79fb      	ldrb	r3, [r7, #7]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d009      	beq.n	8005046 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	68d9      	ldr	r1, [r3, #12]
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	4413      	add	r3, r2
 800503e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005042:	460a      	mov	r2, r1
 8005044:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	bf0c      	ite	eq
 8005056:	2301      	moveq	r3, #1
 8005058:	2300      	movne	r3, #0
 800505a:	b2db      	uxtb	r3, r3
 800505c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	4413      	add	r3, r2
 8005066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	0151      	lsls	r1, r2, #5
 8005070:	6a3a      	ldr	r2, [r7, #32]
 8005072:	440a      	add	r2, r1
 8005074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005078:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800507c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	4413      	add	r3, r2
 8005086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	7e7b      	ldrb	r3, [r7, #25]
 800508e:	075b      	lsls	r3, r3, #29
 8005090:	69f9      	ldr	r1, [r7, #28]
 8005092:	0148      	lsls	r0, r1, #5
 8005094:	6a39      	ldr	r1, [r7, #32]
 8005096:	4401      	add	r1, r0
 8005098:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800509c:	4313      	orrs	r3, r2
 800509e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a41      	ldr	r2, [pc, #260]	; (80051b4 <USB_HC_StartXfer+0x284>)
 80050b0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050b2:	4b40      	ldr	r3, [pc, #256]	; (80051b4 <USB_HC_StartXfer+0x284>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050ba:	4a3e      	ldr	r2, [pc, #248]	; (80051b4 <USB_HC_StartXfer+0x284>)
 80050bc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	78db      	ldrb	r3, [r3, #3]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d006      	beq.n	80050d4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80050c6:	4b3b      	ldr	r3, [pc, #236]	; (80051b4 <USB_HC_StartXfer+0x284>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ce:	4a39      	ldr	r2, [pc, #228]	; (80051b4 <USB_HC_StartXfer+0x284>)
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	e005      	b.n	80050e0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80050d4:	4b37      	ldr	r3, [pc, #220]	; (80051b4 <USB_HC_StartXfer+0x284>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050dc:	4a35      	ldr	r2, [pc, #212]	; (80051b4 <USB_HC_StartXfer+0x284>)
 80050de:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050e0:	4b34      	ldr	r3, [pc, #208]	; (80051b4 <USB_HC_StartXfer+0x284>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050e8:	4a32      	ldr	r2, [pc, #200]	; (80051b4 <USB_HC_StartXfer+0x284>)
 80050ea:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f8:	461a      	mov	r2, r3
 80050fa:	4b2e      	ldr	r3, [pc, #184]	; (80051b4 <USB_HC_StartXfer+0x284>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005100:	79fb      	ldrb	r3, [r7, #7]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d14e      	bne.n	80051a4 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	78db      	ldrb	r3, [r3, #3]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d14a      	bne.n	80051a4 <USB_HC_StartXfer+0x274>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d046      	beq.n	80051a4 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	79db      	ldrb	r3, [r3, #7]
 800511a:	2b03      	cmp	r3, #3
 800511c:	d830      	bhi.n	8005180 <USB_HC_StartXfer+0x250>
 800511e:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <USB_HC_StartXfer+0x1f4>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	08005135 	.word	0x08005135
 8005128:	08005159 	.word	0x08005159
 800512c:	08005135 	.word	0x08005135
 8005130:	08005159 	.word	0x08005159
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	3303      	adds	r3, #3
 800513a:	089b      	lsrs	r3, r3, #2
 800513c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800513e:	8afa      	ldrh	r2, [r7, #22]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	b29b      	uxth	r3, r3
 8005146:	429a      	cmp	r2, r3
 8005148:	d91c      	bls.n	8005184 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	f043 0220 	orr.w	r2, r3, #32
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	619a      	str	r2, [r3, #24]
          }
          break;
 8005156:	e015      	b.n	8005184 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	3303      	adds	r3, #3
 800515e:	089b      	lsrs	r3, r3, #2
 8005160:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005162:	8afa      	ldrh	r2, [r7, #22]
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	b29b      	uxth	r3, r3
 800516e:	429a      	cmp	r2, r3
 8005170:	d90a      	bls.n	8005188 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	619a      	str	r2, [r3, #24]
          }
          break;
 800517e:	e003      	b.n	8005188 <USB_HC_StartXfer+0x258>

        default:
          break;
 8005180:	bf00      	nop
 8005182:	e002      	b.n	800518a <USB_HC_StartXfer+0x25a>
          break;
 8005184:	bf00      	nop
 8005186:	e000      	b.n	800518a <USB_HC_StartXfer+0x25a>
          break;
 8005188:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	68d9      	ldr	r1, [r3, #12]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	785a      	ldrb	r2, [r3, #1]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	b298      	uxth	r0, r3
 8005198:	2300      	movs	r3, #0
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	4603      	mov	r3, r0
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f7ff fb92 	bl	80048c8 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3728      	adds	r7, #40	; 0x28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	1ff80000 	.word	0x1ff80000
 80051b4:	200000b4 	.word	0x200000b4

080051b8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	b29b      	uxth	r3, r3
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80051da:	b480      	push	{r7}
 80051dc:	b087      	sub	sp, #28
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	460b      	mov	r3, r1
 80051e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80051ea:	78fb      	ldrb	r3, [r7, #3]
 80051ec:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	0c9b      	lsrs	r3, r3, #18
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <USB_HC_Halt+0x3a>
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b02      	cmp	r3, #2
 8005212:	d16c      	bne.n	80052ee <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	4413      	add	r3, r2
 800521c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	440a      	add	r2, r1
 800522a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800522e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005232:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005238:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d143      	bne.n	80052c8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	4413      	add	r3, r2
 8005248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	0151      	lsls	r1, r2, #5
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	440a      	add	r2, r1
 8005256:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800525a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800525e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	4413      	add	r3, r2
 8005268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	0151      	lsls	r1, r2, #5
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	440a      	add	r2, r1
 8005276:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800527a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800527e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	4413      	add	r3, r2
 8005288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	0151      	lsls	r1, r2, #5
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	440a      	add	r2, r1
 8005296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800529a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800529e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	3301      	adds	r3, #1
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052ac:	d81d      	bhi.n	80052ea <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052c4:	d0ec      	beq.n	80052a0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80052c6:	e080      	b.n	80053ca <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	0151      	lsls	r1, r2, #5
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	440a      	add	r2, r1
 80052de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052e6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80052e8:	e06f      	b.n	80053ca <USB_HC_Halt+0x1f0>
          break;
 80052ea:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80052ec:	e06d      	b.n	80053ca <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	0151      	lsls	r1, r2, #5
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	440a      	add	r2, r1
 8005304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005308:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800530c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d143      	bne.n	80053a6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	4413      	add	r3, r2
 8005326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	0151      	lsls	r1, r2, #5
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	440a      	add	r2, r1
 8005334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005338:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800533c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	4413      	add	r3, r2
 8005346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	0151      	lsls	r1, r2, #5
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	440a      	add	r2, r1
 8005354:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005358:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800535c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	4413      	add	r3, r2
 8005366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	0151      	lsls	r1, r2, #5
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	440a      	add	r2, r1
 8005374:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005378:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800537c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	3301      	adds	r3, #1
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800538a:	d81d      	bhi.n	80053c8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	4413      	add	r3, r2
 8005394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800539e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053a2:	d0ec      	beq.n	800537e <USB_HC_Halt+0x1a4>
 80053a4:	e011      	b.n	80053ca <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	0151      	lsls	r1, r2, #5
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	440a      	add	r2, r1
 80053bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	e000      	b.n	80053ca <USB_HC_Halt+0x1f0>
          break;
 80053c8:	bf00      	nop
    }
  }

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	371c      	adds	r7, #28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80053e8:	78fb      	ldrb	r3, [r7, #3]
 80053ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80053ec:	2301      	movs	r3, #1
 80053ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	04da      	lsls	r2, r3, #19
 80053f4:	4b15      	ldr	r3, [pc, #84]	; (800544c <USB_DoPing+0x74>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	0151      	lsls	r1, r2, #5
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	440a      	add	r2, r1
 8005400:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005408:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	4413      	add	r3, r2
 8005412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005420:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005428:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	4413      	add	r3, r2
 8005432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005436:	461a      	mov	r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	371c      	adds	r7, #28
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	1ff80000 	.word	0x1ff80000

08005450 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff f9ad 	bl	80047c0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005466:	2110      	movs	r1, #16
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7ff f9e5 	bl	8004838 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7ff fa08 	bl	8004884 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005474:	2300      	movs	r3, #0
 8005476:	613b      	str	r3, [r7, #16]
 8005478:	e01f      	b.n	80054ba <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4413      	add	r3, r2
 8005482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005490:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005498:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054a0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ae:	461a      	mov	r2, r3
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	3301      	adds	r3, #1
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	2b0f      	cmp	r3, #15
 80054be:	d9dc      	bls.n	800547a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80054c0:	2300      	movs	r3, #0
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	e034      	b.n	8005530 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054dc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fa:	461a      	mov	r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	3301      	adds	r3, #1
 8005504:	617b      	str	r3, [r7, #20]
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800550c:	d80c      	bhi.n	8005528 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4413      	add	r3, r2
 8005516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005520:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005524:	d0ec      	beq.n	8005500 <USB_StopHost+0xb0>
 8005526:	e000      	b.n	800552a <USB_StopHost+0xda>
        break;
 8005528:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	3301      	adds	r3, #1
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	2b0f      	cmp	r3, #15
 8005534:	d9c7      	bls.n	80054c6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800553c:	461a      	mov	r2, r3
 800553e:	f04f 33ff 	mov.w	r3, #4294967295
 8005542:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f04f 32ff 	mov.w	r2, #4294967295
 800554a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7ff f926 	bl	800479e <USB_EnableGlobalInt>

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800555c:	b590      	push	{r4, r7, lr}
 800555e:	b08b      	sub	sp, #44	; 0x2c
 8005560:	af04      	add	r7, sp, #16
 8005562:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800556e:	7919      	ldrb	r1, [r3, #4]
 8005570:	23ff      	movs	r3, #255	; 0xff
 8005572:	2201      	movs	r2, #1
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fdf7 	bl	8006168 <USBH_FindInterface>
 800557a:	4603      	mov	r3, r0
 800557c:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800557e:	7dbb      	ldrb	r3, [r7, #22]
 8005580:	2bff      	cmp	r3, #255	; 0xff
 8005582:	d002      	beq.n	800558a <USBH_HID_InterfaceInit+0x2e>
 8005584:	7dbb      	ldrb	r3, [r7, #22]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d901      	bls.n	800558e <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800558a:	2302      	movs	r3, #2
 800558c:	e108      	b.n	80057a0 <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 800558e:	7dbb      	ldrb	r3, [r7, #22]
 8005590:	4619      	mov	r1, r3
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fdcc 	bl	8006130 <USBH_SelectInterface>
 8005598:	4603      	mov	r3, r0
 800559a:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 800559c:	7d7b      	ldrb	r3, [r7, #21]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 80055a2:	2302      	movs	r3, #2
 80055a4:	e0fc      	b.n	80057a0 <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80055ac:	2034      	movs	r0, #52	; 0x34
 80055ae:	f002 fb53 	bl	8007c58 <malloc>
 80055b2:	4603      	mov	r3, r0
 80055b4:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 80055c6:	2302      	movs	r3, #2
 80055c8:	e0ea      	b.n	80057a0 <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 80055ca:	2234      	movs	r2, #52	; 0x34
 80055cc:	2100      	movs	r1, #0
 80055ce:	6938      	ldr	r0, [r7, #16]
 80055d0:	f002 fb5d 	bl	8007c8e <memset>

  HID_Handle->state = HID_ERROR;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	2207      	movs	r2, #7
 80055d8:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 80055da:	7dbb      	ldrb	r3, [r7, #22]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	211a      	movs	r1, #26
 80055e0:	fb01 f303 	mul.w	r3, r1, r3
 80055e4:	4413      	add	r3, r2
 80055e6:	f203 3349 	addw	r3, r3, #841	; 0x349
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d103      	bne.n	80055f8 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	4a6d      	ldr	r2, [pc, #436]	; (80057a8 <USBH_HID_InterfaceInit+0x24c>)
 80055f4:	631a      	str	r2, [r3, #48]	; 0x30
 80055f6:	e010      	b.n	800561a <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 80055f8:	7dbb      	ldrb	r3, [r7, #22]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	211a      	movs	r1, #26
 80055fe:	fb01 f303 	mul.w	r3, r1, r3
 8005602:	4413      	add	r3, r2
 8005604:	f203 3349 	addw	r3, r3, #841	; 0x349
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	2b02      	cmp	r3, #2
 800560c:	d103      	bne.n	8005616 <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	4a66      	ldr	r2, [pc, #408]	; (80057ac <USBH_HID_InterfaceInit+0x250>)
 8005612:	631a      	str	r2, [r3, #48]	; 0x30
 8005614:	e001      	b.n	800561a <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 8005616:	2302      	movs	r3, #2
 8005618:	e0c2      	b.n	80057a0 <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	2200      	movs	r2, #0
 800561e:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	2200      	movs	r2, #0
 8005624:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005626:	7dbb      	ldrb	r3, [r7, #22]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	211a      	movs	r1, #26
 800562c:	fb01 f303 	mul.w	r3, r1, r3
 8005630:	4413      	add	r3, r2
 8005632:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005636:	781a      	ldrb	r2, [r3, #0]
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800563c:	7dbb      	ldrb	r3, [r7, #22]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	211a      	movs	r1, #26
 8005642:	fb01 f303 	mul.w	r3, r1, r3
 8005646:	4413      	add	r3, r2
 8005648:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800564c:	881a      	ldrh	r2, [r3, #0]
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8005652:	7dbb      	ldrb	r3, [r7, #22]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	211a      	movs	r1, #26
 8005658:	fb01 f303 	mul.w	r3, r1, r3
 800565c:	4413      	add	r3, r2
 800565e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	b29a      	uxth	r2, r3
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	8b9b      	ldrh	r3, [r3, #28]
 800566e:	2b09      	cmp	r3, #9
 8005670:	d802      	bhi.n	8005678 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	220a      	movs	r2, #10
 8005676:	839a      	strh	r2, [r3, #28]
  }

  /* Check fo available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8005678:	7dbb      	ldrb	r3, [r7, #22]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	211a      	movs	r1, #26
 800567e:	fb01 f303 	mul.w	r3, r1, r3
 8005682:	4413      	add	r3, r2
 8005684:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b02      	cmp	r3, #2
 800568c:	bf28      	it	cs
 800568e:	2302      	movcs	r3, #2
 8005690:	73fb      	strb	r3, [r7, #15]
             phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8005692:	2300      	movs	r3, #0
 8005694:	75fb      	strb	r3, [r7, #23]
 8005696:	e07d      	b.n	8005794 <USBH_HID_InterfaceInit+0x238>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 8005698:	7dbb      	ldrb	r3, [r7, #22]
 800569a:	7df9      	ldrb	r1, [r7, #23]
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	3101      	adds	r1, #1
 80056a0:	00c9      	lsls	r1, r1, #3
 80056a2:	201a      	movs	r0, #26
 80056a4:	fb00 f303 	mul.w	r3, r0, r3
 80056a8:	440b      	add	r3, r1
 80056aa:	4413      	add	r3, r2
 80056ac:	f203 3346 	addw	r3, r3, #838	; 0x346
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	b25b      	sxtb	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	da35      	bge.n	8005724 <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 80056b8:	7dbb      	ldrb	r3, [r7, #22]
 80056ba:	7df9      	ldrb	r1, [r7, #23]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	3101      	adds	r1, #1
 80056c0:	00c9      	lsls	r1, r1, #3
 80056c2:	201a      	movs	r0, #26
 80056c4:	fb00 f303 	mul.w	r3, r0, r3
 80056c8:	440b      	add	r3, r1
 80056ca:	4413      	add	r3, r2
 80056cc:	f203 3346 	addw	r3, r3, #838	; 0x346
 80056d0:	781a      	ldrb	r2, [r3, #0]
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	791b      	ldrb	r3, [r3, #4]
 80056da:	4619      	mov	r1, r3
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f001 ff42 	bl	8007566 <USBH_AllocPipe>
 80056e2:	4603      	mov	r3, r0
 80056e4:	461a      	mov	r2, r3
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	7859      	ldrb	r1, [r3, #1]
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	7918      	ldrb	r0, [r3, #4]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	8b12      	ldrh	r2, [r2, #24]
 8005702:	9202      	str	r2, [sp, #8]
 8005704:	2203      	movs	r2, #3
 8005706:	9201      	str	r2, [sp, #4]
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	4623      	mov	r3, r4
 800570c:	4602      	mov	r2, r0
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f001 fefa 	bl	8007508 <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	785b      	ldrb	r3, [r3, #1]
 8005718:	2200      	movs	r2, #0
 800571a:	4619      	mov	r1, r3
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f002 fa07 	bl	8007b30 <USBH_LL_SetToggle>
 8005722:	e034      	b.n	800578e <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8005724:	7dbb      	ldrb	r3, [r7, #22]
 8005726:	7df9      	ldrb	r1, [r7, #23]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	3101      	adds	r1, #1
 800572c:	00c9      	lsls	r1, r1, #3
 800572e:	201a      	movs	r0, #26
 8005730:	fb00 f303 	mul.w	r3, r0, r3
 8005734:	440b      	add	r3, r1
 8005736:	4413      	add	r3, r2
 8005738:	f203 3346 	addw	r3, r3, #838	; 0x346
 800573c:	781a      	ldrb	r2, [r3, #0]
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	78db      	ldrb	r3, [r3, #3]
 8005746:	4619      	mov	r1, r3
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f001 ff0c 	bl	8007566 <USBH_AllocPipe>
 800574e:	4603      	mov	r3, r0
 8005750:	461a      	mov	r2, r3
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	7819      	ldrb	r1, [r3, #0]
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	78d8      	ldrb	r0, [r3, #3]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	8b12      	ldrh	r2, [r2, #24]
 800576e:	9202      	str	r2, [sp, #8]
 8005770:	2203      	movs	r2, #3
 8005772:	9201      	str	r2, [sp, #4]
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	4623      	mov	r3, r4
 8005778:	4602      	mov	r2, r0
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f001 fec4 	bl	8007508 <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2200      	movs	r2, #0
 8005786:	4619      	mov	r1, r3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f002 f9d1 	bl	8007b30 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 800578e:	7dfb      	ldrb	r3, [r7, #23]
 8005790:	3301      	adds	r3, #1
 8005792:	75fb      	strb	r3, [r7, #23]
 8005794:	7dfa      	ldrb	r2, [r7, #23]
 8005796:	7bfb      	ldrb	r3, [r7, #15]
 8005798:	429a      	cmp	r2, r3
 800579a:	f4ff af7d 	bcc.w	8005698 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd90      	pop	{r4, r7, pc}
 80057a8:	08005e7d 	.word	0x08005e7d
 80057ac:	08005f2d 	.word	0x08005f2d

080057b0 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	785b      	ldrb	r3, [r3, #1]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00e      	beq.n	80057e8 <USBH_HID_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, HID_Handle->InPipe);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	785b      	ldrb	r3, [r3, #1]
 80057ce:	4619      	mov	r1, r3
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f001 feb8 	bl	8007546 <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->InPipe);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	785b      	ldrb	r3, [r3, #1]
 80057da:	4619      	mov	r1, r3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f001 fee3 	bl	80075a8 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00e      	beq.n	800580e <USBH_HID_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	4619      	mov	r1, r3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f001 fea5 	bl	8007546 <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->OutPipe);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	4619      	mov	r1, r3
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f001 fed0 	bl	80075a8 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	701a      	strb	r2, [r3, #0]
  }

  if (phost->pActiveClass->pData)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00b      	beq.n	8005832 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	4618      	mov	r0, r3
 8005824:	f002 fa20 	bl	8007c68 <free>
    phost->pActiveClass->pData = 0U;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800582e:	2200      	movs	r2, #0
 8005830:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8005844:	2301      	movs	r3, #1
 8005846:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8005848:	2301      	movs	r3, #1
 800584a:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	795b      	ldrb	r3, [r3, #5]
 800585a:	2b05      	cmp	r3, #5
 800585c:	d873      	bhi.n	8005946 <USBH_HID_ClassRequest+0x10a>
 800585e:	a201      	add	r2, pc, #4	; (adr r2, 8005864 <USBH_HID_ClassRequest+0x28>)
 8005860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005864:	0800587d 	.word	0x0800587d
 8005868:	08005947 	.word	0x08005947
 800586c:	08005897 	.word	0x08005897
 8005870:	0800587d 	.word	0x0800587d
 8005874:	080058e1 	.word	0x080058e1
 8005878:	08005911 	.word	0x08005911
  {
  case HID_REQ_INIT:
  case HID_REQ_GET_HID_DESC:

    USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	331c      	adds	r3, #28
 8005886:	4619      	mov	r1, r3
 8005888:	4610      	mov	r0, r2
 800588a:	f000 f9df 	bl	8005c4c <USBH_HID_ParseHIDDesc>

    HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2202      	movs	r2, #2
 8005892:	715a      	strb	r2, [r3, #5]

    break;
 8005894:	e05c      	b.n	8005950 <USBH_HID_ClassRequest+0x114>
  case HID_REQ_GET_REPORT_DESC:

    /* Get Report Desc */
    classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800589a:	4619      	mov	r1, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f942 	bl	8005b26 <USBH_HID_GetHIDReportDescriptor>
 80058a2:	4603      	mov	r3, r0
 80058a4:	73bb      	strb	r3, [r7, #14]
    if (classReqStatus == USBH_OK)
 80058a6:	7bbb      	ldrb	r3, [r7, #14]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d103      	bne.n	80058b4 <USBH_HID_ClassRequest+0x78>
    {
      /* The descriptor is available in phost->device.Data */
      HID_Handle->ctl_state = HID_REQ_SET_IDLE;\
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2204      	movs	r2, #4
 80058b0:	715a      	strb	r2, [r3, #5]

    	HID_Handle->ctl_state = HID_REQ_SET_IDLE;
      /* .. */
    }

    break;
 80058b2:	e04d      	b.n	8005950 <USBH_HID_ClassRequest+0x114>
    else if (classReqStatus == USBH_NOT_SUPPORTED)
 80058b4:	7bbb      	ldrb	r3, [r7, #14]
 80058b6:	2b03      	cmp	r3, #3
 80058b8:	d102      	bne.n	80058c0 <USBH_HID_ClassRequest+0x84>
      status = USBH_FAIL;
 80058ba:	2302      	movs	r3, #2
 80058bc:	73fb      	strb	r3, [r7, #15]
    break;
 80058be:	e047      	b.n	8005950 <USBH_HID_ClassRequest+0x114>
    		classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058c4:	4619      	mov	r1, r3
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f92d 	bl	8005b26 <USBH_HID_GetHIDReportDescriptor>
 80058cc:	4603      	mov	r3, r0
 80058ce:	73bb      	strb	r3, [r7, #14]
    	}while(classReqStatus != USBH_OK);
 80058d0:	7bbb      	ldrb	r3, [r7, #14]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1f4      	bne.n	80058c0 <USBH_HID_ClassRequest+0x84>
    	HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2204      	movs	r2, #4
 80058da:	715a      	strb	r2, [r3, #5]
    break;
 80058dc:	e038      	b.n	8005950 <USBH_HID_ClassRequest+0x114>

  case HID_REQ_SET_IDLE:
 80058de:	bf00      	nop
	  do{
    classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 80058e0:	2200      	movs	r2, #0
 80058e2:	2100      	movs	r1, #0
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f937 	bl	8005b58 <USBH_HID_SetIdle>
 80058ea:	4603      	mov	r3, r0
 80058ec:	73bb      	strb	r3, [r7, #14]
	  }while(classReqStatus != USBH_OK);
 80058ee:	7bbb      	ldrb	r3, [r7, #14]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1f4      	bne.n	80058de <USBH_HID_ClassRequest+0xa2>

    /* set Idle */
    if (classReqStatus == USBH_OK)
 80058f4:	7bbb      	ldrb	r3, [r7, #14]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d103      	bne.n	8005902 <USBH_HID_ClassRequest+0xc6>
    {
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2205      	movs	r2, #5
 80058fe:	715a      	strb	r2, [r3, #5]
      if (classReqStatus == USBH_NOT_SUPPORTED)
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
      }
    }
    break;
 8005900:	e023      	b.n	800594a <USBH_HID_ClassRequest+0x10e>
      if (classReqStatus == USBH_NOT_SUPPORTED)
 8005902:	7bbb      	ldrb	r3, [r7, #14]
 8005904:	2b03      	cmp	r3, #3
 8005906:	d120      	bne.n	800594a <USBH_HID_ClassRequest+0x10e>
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2205      	movs	r2, #5
 800590c:	715a      	strb	r2, [r3, #5]
    break;
 800590e:	e01c      	b.n	800594a <USBH_HID_ClassRequest+0x10e>

  case HID_REQ_SET_PROTOCOL:
    /* set protocol */
    classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 8005910:	2100      	movs	r1, #0
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f974 	bl	8005c00 <USBH_HID_SetProtocol>
 8005918:	4603      	mov	r3, r0
 800591a:	73bb      	strb	r3, [r7, #14]
    if (classReqStatus != USBH_BUSY)
 800591c:	7bbb      	ldrb	r3, [r7, #14]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d00b      	beq.n	800593a <USBH_HID_ClassRequest+0xfe>
    {
      HID_Handle->ctl_state = HID_REQ_IDLE;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2201      	movs	r2, #1
 8005926:	715a      	strb	r2, [r3, #5]

      /* all requests performed*/
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800592e:	2102      	movs	r1, #2
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	4798      	blx	r3
      status = USBH_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	73fb      	strb	r3, [r7, #15]
//      }while(classReqStatus != USBH_OK);
//
//      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
//      status = USBH_OK;
    }
    break;
 8005938:	e009      	b.n	800594e <USBH_HID_ClassRequest+0x112>
    else if (classReqStatus == USBH_NOT_SUPPORTED)
 800593a:	7bbb      	ldrb	r3, [r7, #14]
 800593c:	2b03      	cmp	r3, #3
 800593e:	d106      	bne.n	800594e <USBH_HID_ClassRequest+0x112>
      status = USBH_FAIL;
 8005940:	2302      	movs	r3, #2
 8005942:	73fb      	strb	r3, [r7, #15]
    break;
 8005944:	e003      	b.n	800594e <USBH_HID_ClassRequest+0x112>

  case HID_REQ_IDLE:
  default:
    break;
 8005946:	bf00      	nop
 8005948:	e002      	b.n	8005950 <USBH_HID_ClassRequest+0x114>
    break;
 800594a:	bf00      	nop
 800594c:	e000      	b.n	8005950 <USBH_HID_ClassRequest+0x114>
    break;
 800594e:	bf00      	nop
  }

  return status;
 8005950:	7bfb      	ldrb	r3, [r7, #15]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop

0800595c <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af02      	add	r7, sp, #8
 8005962:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8005964:	2300      	movs	r3, #0
 8005966:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	789b      	ldrb	r3, [r3, #2]
 8005976:	2b06      	cmp	r3, #6
 8005978:	f200 80a9 	bhi.w	8005ace <USBH_HID_Process+0x172>
 800597c:	a201      	add	r2, pc, #4	; (adr r2, 8005984 <USBH_HID_Process+0x28>)
 800597e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005982:	bf00      	nop
 8005984:	080059a1 	.word	0x080059a1
 8005988:	080059b1 	.word	0x080059b1
 800598c:	08005acf 	.word	0x08005acf
 8005990:	08005acf 	.word	0x08005acf
 8005994:	08005a21 	.word	0x08005a21
 8005998:	08005a0b 	.word	0x08005a0b
 800599c:	08005a4f 	.word	0x08005a4f
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	2201      	movs	r2, #1
 80059ac:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80059ae:	e093      	b.n	8005ad8 <USBH_HID_Process+0x17c>
//    	if( USBH_HID_GetReport (phost, 0x01, 0, HID_Handle->pData, HID_Handle->length) != USBH_OK){
//    		USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
//			HID_Handle->state = HID_SYNC;
//    	}
//    	break;
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	695a      	ldr	r2, [r3, #20]
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	8b1b      	ldrh	r3, [r3, #24]
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	4613      	mov	r3, r2
 80059be:	2200      	movs	r2, #0
 80059c0:	2101      	movs	r1, #1
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f8f0 	bl	8005ba8 <USBH_HID_GetReport>
 80059c8:	4603      	mov	r3, r0
 80059ca:	75fb      	strb	r3, [r7, #23]
      if (status != USBH_OK)
 80059cc:	7dfb      	ldrb	r3, [r7, #23]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2205      	movs	r2, #5
 80059d6:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80059d8:	e07e      	b.n	8005ad8 <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 80059da:	7dfb      	ldrb	r3, [r7, #23]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d105      	bne.n	80059ec <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	2201      	movs	r2, #1
 80059e4:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	75fb      	strb	r3, [r7, #23]
      break;
 80059ea:	e075      	b.n	8005ad8 <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 80059ec:	7dfb      	ldrb	r3, [r7, #23]
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	d105      	bne.n	80059fe <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	2205      	movs	r2, #5
 80059f6:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	75fb      	strb	r3, [r7, #23]
      break;
 80059fc:	e06c      	b.n	8005ad8 <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	2207      	movs	r2, #7
 8005a02:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8005a04:	2302      	movs	r3, #2
 8005a06:	75fb      	strb	r3, [r7, #23]
      break;
 8005a08:	e066      	b.n	8005ad8 <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if (phost->Timer & 1U)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d05c      	beq.n	8005ad2 <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005a1e:	e058      	b.n	8005ad2 <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	6959      	ldr	r1, [r3, #20]
                                (uint8_t)HID_Handle->length,
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	8b1b      	ldrh	r3, [r3, #24]
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	785b      	ldrb	r3, [r3, #1]
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f001 fd4b 	bl	80074ca <USBH_InterruptReceiveData>
                                HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	2206      	movs	r2, #6
 8005a38:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 8005a4c:	e044      	b.n	8005ad8 <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	785b      	ldrb	r3, [r3, #1]
 8005a52:	4619      	mov	r1, r3
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f002 f833 	bl	8007ac0 <USBH_LL_GetURBState>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d120      	bne.n	8005aa2 <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	785b      	ldrb	r3, [r3, #1]
 8005a64:	4619      	mov	r1, r3
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f001 ff98 	bl	800799c <USBH_LL_GetLastXferSize>
 8005a6c:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d12e      	bne.n	8005ad6 <USBH_HID_Process+0x17a>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d02b      	beq.n	8005ad6 <USBH_HID_Process+0x17a>
        {
          USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f103 0008 	add.w	r0, r3, #8
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	6959      	ldr	r1, [r3, #20]
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	8b1b      	ldrh	r3, [r3, #24]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	f000 f9a0 	bl	8005dd2 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fa ff5e 	bl	800095c <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 8005aa0:	e019      	b.n	8005ad6 <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	785b      	ldrb	r3, [r3, #1]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f002 f809 	bl	8007ac0 <USBH_LL_GetURBState>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b05      	cmp	r3, #5
 8005ab2:	d110      	bne.n	8005ad6 <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	7e9b      	ldrb	r3, [r3, #26]
 8005ab8:	4619      	mov	r1, r3
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f001 f915 	bl	8006cea <USBH_ClrFeature>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d107      	bne.n	8005ad6 <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	2204      	movs	r2, #4
 8005aca:	709a      	strb	r2, [r3, #2]
      break;
 8005acc:	e003      	b.n	8005ad6 <USBH_HID_Process+0x17a>

    default:
      break;
 8005ace:	bf00      	nop
 8005ad0:	e002      	b.n	8005ad8 <USBH_HID_Process+0x17c>
      break;
 8005ad2:	bf00      	nop
 8005ad4:	e000      	b.n	8005ad8 <USBH_HID_Process+0x17c>
      break;
 8005ad6:	bf00      	nop
  }

  return status;
 8005ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop

08005ae4 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	789b      	ldrb	r3, [r3, #2]
 8005afa:	2b06      	cmp	r3, #6
 8005afc:	d10c      	bne.n	8005b18 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	8b92      	ldrh	r2, [r2, #28]
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d302      	bcc.n	8005b18 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2204      	movs	r2, #4
 8005b16:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
  }
  return USBH_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b086      	sub	sp, #24
 8005b2a:	af02      	add	r7, sp, #8
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	460b      	mov	r3, r1
 8005b30:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8005b38:	887b      	ldrh	r3, [r7, #2]
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8005b42:	2101      	movs	r1, #1
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f001 f830 	bl	8006baa <USBH_GetDescriptor>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	70fb      	strb	r3, [r7, #3]
 8005b64:	4613      	mov	r3, r2
 8005b66:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2221      	movs	r2, #33	; 0x21
 8005b6c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	220a      	movs	r2, #10
 8005b72:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8005b74:	78fb      	ldrb	r3, [r7, #3]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	021b      	lsls	r3, r3, #8
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	78bb      	ldrb	r3, [r7, #2]
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	4313      	orrs	r3, r2
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8005b94:	2200      	movs	r2, #0
 8005b96:	2100      	movs	r1, #0
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f001 fa86 	bl	80070aa <USBH_CtlReq>
 8005b9e:	4603      	mov	r3, r0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	607b      	str	r3, [r7, #4]
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	72fb      	strb	r3, [r7, #11]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	22a1      	movs	r2, #161	; 0xa1
 8005bbe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 8005bc6:	7afb      	ldrb	r3, [r7, #11]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	021b      	lsls	r3, r3, #8
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	7abb      	ldrb	r3, [r7, #10]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8005be0:	7e3b      	ldrb	r3, [r7, #24]
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8005be8:	7e3b      	ldrb	r3, [r7, #24]
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	461a      	mov	r2, r3
 8005bee:	6879      	ldr	r1, [r7, #4]
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f001 fa5a 	bl	80070aa <USBH_CtlReq>
 8005bf6:	4603      	mov	r3, r0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2221      	movs	r2, #33	; 0x21
 8005c10:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	220b      	movs	r2, #11
 8005c16:	745a      	strb	r2, [r3, #17]
  if (protocol)
 8005c18:	78fb      	ldrb	r3, [r7, #3]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	825a      	strh	r2, [r3, #18]
 8005c24:	e002      	b.n	8005c2c <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8005c38:	2200      	movs	r2, #0
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f001 fa34 	bl	80070aa <USBH_CtlReq>
 8005c42:	4603      	mov	r3, r0

}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	3302      	adds	r3, #2
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	3303      	adds	r3, #3
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 8005c72:	897b      	ldrh	r3, [r7, #10]
 8005c74:	2b09      	cmp	r3, #9
 8005c76:	d943      	bls.n	8005d00 <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 8005c78:	2309      	movs	r3, #9
 8005c7a:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 8005c7c:	e03c      	b.n	8005cf8 <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005c7e:	f107 0308 	add.w	r3, r7, #8
 8005c82:	4619      	mov	r1, r3
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f001 f9f5 	bl	8007074 <USBH_GetNextDesc>
 8005c8a:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	785b      	ldrb	r3, [r3, #1]
 8005c90:	2b21      	cmp	r3, #33	; 0x21
 8005c92:	d131      	bne.n	8005cf8 <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	781a      	ldrb	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	785a      	ldrb	r2, [r3, #1]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	3302      	adds	r3, #2
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	3303      	adds	r3, #3
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	021b      	lsls	r3, r3, #8
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	791a      	ldrb	r2, [r3, #4]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	795a      	ldrb	r2, [r3, #5]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	799a      	ldrb	r2, [r3, #6]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3307      	adds	r3, #7
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	021b      	lsls	r3, r3, #8
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	4313      	orrs	r3, r2
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	811a      	strh	r2, [r3, #8]
        break;
 8005cf4:	bf00      	nop
      }
    }
  }
}
 8005cf6:	e003      	b.n	8005d00 <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 8005cf8:	893b      	ldrh	r3, [r7, #8]
 8005cfa:	897a      	ldrh	r2, [r7, #10]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d8be      	bhi.n	8005c7e <USBH_HID_ParseHIDDesc+0x32>
}
 8005d00:	bf00      	nop
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	4613      	mov	r3, r2
 8005d14:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	729a      	strb	r2, [r3, #10]
  f->size = size;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	88fa      	ldrh	r2, [r7, #6]
 8005d2c:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	601a      	str	r2, [r3, #0]
}
 8005d34:	bf00      	nop
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	7a9b      	ldrb	r3, [r3, #10]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d131      	bne.n	8005dbe <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8005d60:	2300      	movs	r3, #0
 8005d62:	82fb      	strh	r3, [r7, #22]
 8005d64:	e027      	b.n	8005db6 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	88da      	ldrh	r2, [r3, #6]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	889b      	ldrh	r3, [r3, #4]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d019      	beq.n	8005da6 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	88d2      	ldrh	r2, [r2, #6]
 8005d7a:	441a      	add	r2, r3
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	1c59      	adds	r1, r3, #1
 8005d80:	6139      	str	r1, [r7, #16]
 8005d82:	7812      	ldrb	r2, [r2, #0]
 8005d84:	701a      	strb	r2, [r3, #0]
        f->tail++;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	88db      	ldrh	r3, [r3, #6]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	88da      	ldrh	r2, [r3, #6]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	891b      	ldrh	r3, [r3, #8]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d108      	bne.n	8005db0 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	80da      	strh	r2, [r3, #6]
 8005da4:	e004      	b.n	8005db0 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	729a      	strb	r2, [r3, #10]
        return i;
 8005dac:	8afb      	ldrh	r3, [r7, #22]
 8005dae:	e00a      	b.n	8005dc6 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 8005db0:	8afb      	ldrh	r3, [r7, #22]
 8005db2:	3301      	adds	r3, #1
 8005db4:	82fb      	strh	r3, [r7, #22]
 8005db6:	8afa      	ldrh	r2, [r7, #22]
 8005db8:	88fb      	ldrh	r3, [r7, #6]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d3d3      	bcc.n	8005d66 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8005dc4:	88fb      	ldrh	r3, [r7, #6]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	371c      	adds	r7, #28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b087      	sub	sp, #28
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	7a9b      	ldrb	r3, [r3, #10]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d13c      	bne.n	8005e66 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8005df2:	2300      	movs	r3, #0
 8005df4:	82fb      	strh	r3, [r7, #22]
 8005df6:	e032      	b.n	8005e5e <USBH_HID_FifoWrite+0x8c>
    {
      if ((f->head + 1U == f->tail) ||
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	889b      	ldrh	r3, [r3, #4]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	88d2      	ldrh	r2, [r2, #6]
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00a      	beq.n	8005e1c <USBH_HID_FifoWrite+0x4a>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	889b      	ldrh	r3, [r3, #4]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	8912      	ldrh	r2, [r2, #8]
      if ((f->head + 1U == f->tail) ||
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d108      	bne.n	8005e26 <USBH_HID_FifoWrite+0x54>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	88db      	ldrh	r3, [r3, #6]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d104      	bne.n	8005e26 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	729a      	strb	r2, [r3, #10]
        return i;
 8005e22:	8afb      	ldrh	r3, [r7, #22]
 8005e24:	e023      	b.n	8005e6e <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	1c5a      	adds	r2, r3, #1
 8005e2a:	613a      	str	r2, [r7, #16]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	6812      	ldr	r2, [r2, #0]
 8005e30:	68f9      	ldr	r1, [r7, #12]
 8005e32:	8889      	ldrh	r1, [r1, #4]
 8005e34:	440a      	add	r2, r1
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	7013      	strb	r3, [r2, #0]
        f->head++;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	889b      	ldrh	r3, [r3, #4]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	889a      	ldrh	r2, [r3, #4]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	891b      	ldrh	r3, [r3, #8]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d102      	bne.n	8005e58 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 8005e58:	8afb      	ldrh	r3, [r7, #22]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	82fb      	strh	r3, [r7, #22]
 8005e5e:	8afa      	ldrh	r2, [r7, #22]
 8005e60:	88fb      	ldrh	r3, [r7, #6]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d3c8      	bcc.n	8005df8 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8005e6c:	88fb      	ldrh	r3, [r7, #6]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	371c      	adds	r7, #28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
	...

08005e7c <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 8005e8e:	4b24      	ldr	r3, [pc, #144]	; (8005f20 <USBH_HID_KeybdInit+0xa4>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	709a      	strb	r2, [r3, #2]
 8005e94:	4b22      	ldr	r3, [pc, #136]	; (8005f20 <USBH_HID_KeybdInit+0xa4>)
 8005e96:	789a      	ldrb	r2, [r3, #2]
 8005e98:	4b21      	ldr	r3, [pc, #132]	; (8005f20 <USBH_HID_KeybdInit+0xa4>)
 8005e9a:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 8005e9c:	4b20      	ldr	r3, [pc, #128]	; (8005f20 <USBH_HID_KeybdInit+0xa4>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	711a      	strb	r2, [r3, #4]
 8005ea2:	4b1f      	ldr	r3, [pc, #124]	; (8005f20 <USBH_HID_KeybdInit+0xa4>)
 8005ea4:	791a      	ldrb	r2, [r3, #4]
 8005ea6:	4b1e      	ldr	r3, [pc, #120]	; (8005f20 <USBH_HID_KeybdInit+0xa4>)
 8005ea8:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 8005eaa:	4b1d      	ldr	r3, [pc, #116]	; (8005f20 <USBH_HID_KeybdInit+0xa4>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	719a      	strb	r2, [r3, #6]
 8005eb0:	4b1b      	ldr	r3, [pc, #108]	; (8005f20 <USBH_HID_KeybdInit+0xa4>)
 8005eb2:	799a      	ldrb	r2, [r3, #6]
 8005eb4:	4b1a      	ldr	r3, [pc, #104]	; (8005f20 <USBH_HID_KeybdInit+0xa4>)
 8005eb6:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 8005eb8:	4b19      	ldr	r3, [pc, #100]	; (8005f20 <USBH_HID_KeybdInit+0xa4>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	721a      	strb	r2, [r3, #8]
 8005ebe:	4b18      	ldr	r3, [pc, #96]	; (8005f20 <USBH_HID_KeybdInit+0xa4>)
 8005ec0:	7a1a      	ldrb	r2, [r3, #8]
 8005ec2:	4b17      	ldr	r3, [pc, #92]	; (8005f20 <USBH_HID_KeybdInit+0xa4>)
 8005ec4:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	e00c      	b.n	8005ee6 <USBH_HID_KeybdInit+0x6a>
  {
    keybd_report_data[x] = 0U;
 8005ecc:	4a15      	ldr	r2, [pc, #84]	; (8005f24 <USBH_HID_KeybdInit+0xa8>)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8005ed6:	4a14      	ldr	r2, [pc, #80]	; (8005f28 <USBH_HID_KeybdInit+0xac>)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2100      	movs	r1, #0
 8005edc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d9ef      	bls.n	8005ecc <USBH_HID_KeybdInit+0x50>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	8b1b      	ldrh	r3, [r3, #24]
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d902      	bls.n	8005efa <USBH_HID_KeybdInit+0x7e>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2208      	movs	r2, #8
 8005ef8:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	4a0a      	ldr	r2, [pc, #40]	; (8005f28 <USBH_HID_KeybdInit+0xac>)
 8005efe:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f103 0008 	add.w	r0, r3, #8
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005f0c:	2250      	movs	r2, #80	; 0x50
 8005f0e:	4619      	mov	r1, r3
 8005f10:	f7ff fefa 	bl	8005d08 <USBH_HID_FifoInit>

  return USBH_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20000500 	.word	0x20000500
 8005f24:	200004f0 	.word	0x200004f0
 8005f28:	200004f8 	.word	0x200004f8

08005f2c <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f3a:	69db      	ldr	r3, [r3, #28]
 8005f3c:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8005f3e:	4b1d      	ldr	r3, [pc, #116]	; (8005fb4 <USBH_HID_MouseInit+0x88>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 8005f44:	4b1b      	ldr	r3, [pc, #108]	; (8005fb4 <USBH_HID_MouseInit+0x88>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 8005f4a:	4b1a      	ldr	r3, [pc, #104]	; (8005fb4 <USBH_HID_MouseInit+0x88>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 8005f50:	4b18      	ldr	r3, [pc, #96]	; (8005fb4 <USBH_HID_MouseInit+0x88>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 8005f56:	4b17      	ldr	r3, [pc, #92]	; (8005fb4 <USBH_HID_MouseInit+0x88>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	e00c      	b.n	8005f7c <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 8005f62:	4a15      	ldr	r2, [pc, #84]	; (8005fb8 <USBH_HID_MouseInit+0x8c>)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2100      	movs	r1, #0
 8005f68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 8005f6c:	4a13      	ldr	r2, [pc, #76]	; (8005fbc <USBH_HID_MouseInit+0x90>)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2100      	movs	r1, #0
 8005f72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d9ef      	bls.n	8005f62 <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	8b1b      	ldrh	r3, [r3, #24]
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d902      	bls.n	8005f90 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = sizeof(mouse_report_data);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2208      	movs	r2, #8
 8005f8e:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	4a0a      	ldr	r2, [pc, #40]	; (8005fbc <USBH_HID_MouseInit+0x90>)
 8005f94:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f103 0008 	add.w	r0, r3, #8
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005fa2:	2250      	movs	r2, #80	; 0x50
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	f7ff feaf 	bl	8005d08 <USBH_HID_FifoInit>

  return USBH_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	20000510 	.word	0x20000510
 8005fb8:	20000518 	.word	0x20000518
 8005fbc:	20000520 	.word	0x20000520

08005fc0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d101      	bne.n	8005fd8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	e029      	b.n	800602c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	79fa      	ldrb	r2, [r7, #7]
 8005fdc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 f81f 	bl	8006034 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f001 fc07 	bl	8007838 <USBH_LL_Init>

  return USBH_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800603c:	2300      	movs	r3, #0
 800603e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006040:	2300      	movs	r3, #0
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	e009      	b.n	800605a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	33e0      	adds	r3, #224	; 0xe0
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	2200      	movs	r2, #0
 8006052:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	3301      	adds	r3, #1
 8006058:	60fb      	str	r3, [r7, #12]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b0e      	cmp	r3, #14
 800605e:	d9f2      	bls.n	8006046 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006060:	2300      	movs	r3, #0
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	e009      	b.n	800607a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4413      	add	r3, r2
 800606c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006070:	2200      	movs	r2, #0
 8006072:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	3301      	adds	r3, #1
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006080:	d3f1      	bcc.n	8006066 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2240      	movs	r2, #64	; 0x40
 80060a6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d016      	beq.n	800611e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10e      	bne.n	8006118 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006100:	1c59      	adds	r1, r3, #1
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	33de      	adds	r3, #222	; 0xde
 800610c:	6839      	ldr	r1, [r7, #0]
 800610e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006112:	2300      	movs	r3, #0
 8006114:	73fb      	strb	r3, [r7, #15]
 8006116:	e004      	b.n	8006122 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006118:	2302      	movs	r3, #2
 800611a:	73fb      	strb	r3, [r7, #15]
 800611c:	e001      	b.n	8006122 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800611e:	2302      	movs	r3, #2
 8006120:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006122:	7bfb      	ldrb	r3, [r7, #15]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	460b      	mov	r3, r1
 800613a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800613c:	2300      	movs	r3, #0
 800613e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006146:	78fa      	ldrb	r2, [r7, #3]
 8006148:	429a      	cmp	r2, r3
 800614a:	d204      	bcs.n	8006156 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	78fa      	ldrb	r2, [r7, #3]
 8006150:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006154:	e001      	b.n	800615a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006156:	2302      	movs	r3, #2
 8006158:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800615a:	7bfb      	ldrb	r3, [r7, #15]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	4608      	mov	r0, r1
 8006172:	4611      	mov	r1, r2
 8006174:	461a      	mov	r2, r3
 8006176:	4603      	mov	r3, r0
 8006178:	70fb      	strb	r3, [r7, #3]
 800617a:	460b      	mov	r3, r1
 800617c:	70bb      	strb	r3, [r7, #2]
 800617e:	4613      	mov	r3, r2
 8006180:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006186:	2300      	movs	r3, #0
 8006188:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006190:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006192:	e025      	b.n	80061e0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006194:	7dfb      	ldrb	r3, [r7, #23]
 8006196:	221a      	movs	r2, #26
 8006198:	fb02 f303 	mul.w	r3, r2, r3
 800619c:	3308      	adds	r3, #8
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4413      	add	r3, r2
 80061a2:	3302      	adds	r3, #2
 80061a4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	795b      	ldrb	r3, [r3, #5]
 80061aa:	78fa      	ldrb	r2, [r7, #3]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d002      	beq.n	80061b6 <USBH_FindInterface+0x4e>
 80061b0:	78fb      	ldrb	r3, [r7, #3]
 80061b2:	2bff      	cmp	r3, #255	; 0xff
 80061b4:	d111      	bne.n	80061da <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80061ba:	78ba      	ldrb	r2, [r7, #2]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d002      	beq.n	80061c6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80061c0:	78bb      	ldrb	r3, [r7, #2]
 80061c2:	2bff      	cmp	r3, #255	; 0xff
 80061c4:	d109      	bne.n	80061da <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80061ca:	787a      	ldrb	r2, [r7, #1]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d002      	beq.n	80061d6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80061d0:	787b      	ldrb	r3, [r7, #1]
 80061d2:	2bff      	cmp	r3, #255	; 0xff
 80061d4:	d101      	bne.n	80061da <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80061d6:	7dfb      	ldrb	r3, [r7, #23]
 80061d8:	e006      	b.n	80061e8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80061da:	7dfb      	ldrb	r3, [r7, #23]
 80061dc:	3301      	adds	r3, #1
 80061de:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80061e0:	7dfb      	ldrb	r3, [r7, #23]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d9d6      	bls.n	8006194 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80061e6:	23ff      	movs	r3, #255	; 0xff
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	371c      	adds	r7, #28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f001 fb57 	bl	80078b0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006202:	2101      	movs	r1, #1
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f001 fc6f 	bl	8007ae8 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af04      	add	r7, sp, #16
 800621a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800621c:	2302      	movs	r3, #2
 800621e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b01      	cmp	r3, #1
 800622e:	d102      	bne.n	8006236 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2203      	movs	r2, #3
 8006234:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b0b      	cmp	r3, #11
 800623e:	f200 81b3 	bhi.w	80065a8 <USBH_Process+0x394>
 8006242:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <USBH_Process+0x34>)
 8006244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006248:	08006279 	.word	0x08006279
 800624c:	080062ab 	.word	0x080062ab
 8006250:	08006313 	.word	0x08006313
 8006254:	08006543 	.word	0x08006543
 8006258:	080065a9 	.word	0x080065a9
 800625c:	080063b7 	.word	0x080063b7
 8006260:	080064e9 	.word	0x080064e9
 8006264:	080063ed 	.word	0x080063ed
 8006268:	0800640d 	.word	0x0800640d
 800626c:	0800642d 	.word	0x0800642d
 8006270:	0800645b 	.word	0x0800645b
 8006274:	0800652b 	.word	0x0800652b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 8193 	beq.w	80065ac <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800628c:	20c8      	movs	r0, #200	; 0xc8
 800628e:	f001 fc82 	bl	8007b96 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f001 fb67 	bl	8007966 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80062a8:	e180      	b.n	80065ac <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d107      	bne.n	80062c4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80062c2:	e182      	b.n	80065ca <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80062ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062ce:	d914      	bls.n	80062fa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80062d6:	3301      	adds	r3, #1
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	d903      	bls.n	80062f2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	220d      	movs	r2, #13
 80062ee:	701a      	strb	r2, [r3, #0]
      break;
 80062f0:	e16b      	b.n	80065ca <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	701a      	strb	r2, [r3, #0]
      break;
 80062f8:	e167      	b.n	80065ca <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006300:	f103 020a 	add.w	r2, r3, #10
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800630a:	200a      	movs	r0, #10
 800630c:	f001 fc43 	bl	8007b96 <USBH_Delay>
      break;
 8006310:	e15b      	b.n	80065ca <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006318:	2b00      	cmp	r3, #0
 800631a:	d005      	beq.n	8006328 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006322:	2104      	movs	r1, #4
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006328:	2064      	movs	r0, #100	; 0x64
 800632a:	f001 fc34 	bl	8007b96 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f001 faf4 	bl	800791c <USBH_LL_GetSpeed>
 8006334:	4603      	mov	r3, r0
 8006336:	461a      	mov	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2205      	movs	r2, #5
 8006342:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006344:	2100      	movs	r1, #0
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f001 f90d 	bl	8007566 <USBH_AllocPipe>
 800634c:	4603      	mov	r3, r0
 800634e:	461a      	mov	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006354:	2180      	movs	r1, #128	; 0x80
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f001 f905 	bl	8007566 <USBH_AllocPipe>
 800635c:	4603      	mov	r3, r0
 800635e:	461a      	mov	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	7919      	ldrb	r1, [r3, #4]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006378:	b292      	uxth	r2, r2
 800637a:	9202      	str	r2, [sp, #8]
 800637c:	2200      	movs	r2, #0
 800637e:	9201      	str	r2, [sp, #4]
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	4603      	mov	r3, r0
 8006384:	2280      	movs	r2, #128	; 0x80
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f001 f8be 	bl	8007508 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	7959      	ldrb	r1, [r3, #5]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80063a0:	b292      	uxth	r2, r2
 80063a2:	9202      	str	r2, [sp, #8]
 80063a4:	2200      	movs	r2, #0
 80063a6:	9201      	str	r2, [sp, #4]
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	4603      	mov	r3, r0
 80063ac:	2200      	movs	r2, #0
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f001 f8aa 	bl	8007508 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80063b4:	e109      	b.n	80065ca <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f90c 	bl	80065d4 <USBH_HandleEnum>
 80063bc:	4603      	mov	r3, r0
 80063be:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80063c0:	7bbb      	ldrb	r3, [r7, #14]
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f040 80f3 	bne.w	80065b0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d103      	bne.n	80063e4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2208      	movs	r2, #8
 80063e0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80063e2:	e0e5      	b.n	80065b0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2207      	movs	r2, #7
 80063e8:	701a      	strb	r2, [r3, #0]
      break;
 80063ea:	e0e1      	b.n	80065b0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 80de 	beq.w	80065b4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063fe:	2101      	movs	r1, #1
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2208      	movs	r2, #8
 8006408:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800640a:	e0d3      	b.n	80065b4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006412:	b29b      	uxth	r3, r3
 8006414:	4619      	mov	r1, r3
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fc20 	bl	8006c5c <USBH_SetCfg>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	f040 80ca 	bne.w	80065b8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2209      	movs	r2, #9
 8006428:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800642a:	e0c5      	b.n	80065b8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006432:	f003 0320 	and.w	r3, r3, #32
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00b      	beq.n	8006452 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800643a:	2101      	movs	r1, #1
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fc30 	bl	8006ca2 <USBH_SetFeature>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	f040 80b9 	bne.w	80065bc <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	220a      	movs	r2, #10
 800644e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006450:	e0b4      	b.n	80065bc <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	220a      	movs	r2, #10
 8006456:	701a      	strb	r2, [r3, #0]
      break;
 8006458:	e0b0      	b.n	80065bc <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 80ad 	beq.w	80065c0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800646e:	2300      	movs	r3, #0
 8006470:	73fb      	strb	r3, [r7, #15]
 8006472:	e016      	b.n	80064a2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006474:	7bfa      	ldrb	r2, [r7, #15]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	32de      	adds	r2, #222	; 0xde
 800647a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800647e:	791a      	ldrb	r2, [r3, #4]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006486:	429a      	cmp	r2, r3
 8006488:	d108      	bne.n	800649c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800648a:	7bfa      	ldrb	r2, [r7, #15]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	32de      	adds	r2, #222	; 0xde
 8006490:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800649a:	e005      	b.n	80064a8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800649c:	7bfb      	ldrb	r3, [r7, #15]
 800649e:	3301      	adds	r3, #1
 80064a0:	73fb      	strb	r3, [r7, #15]
 80064a2:	7bfb      	ldrb	r3, [r7, #15]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d0e5      	beq.n	8006474 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d016      	beq.n	80064e0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	4798      	blx	r3
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d109      	bne.n	80064d8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2206      	movs	r2, #6
 80064c8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80064d0:	2103      	movs	r1, #3
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80064d6:	e073      	b.n	80065c0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	220d      	movs	r2, #13
 80064dc:	701a      	strb	r2, [r3, #0]
      break;
 80064de:	e06f      	b.n	80065c0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	220d      	movs	r2, #13
 80064e4:	701a      	strb	r2, [r3, #0]
      break;
 80064e6:	e06b      	b.n	80065c0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d017      	beq.n	8006522 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	4798      	blx	r3
 80064fe:	4603      	mov	r3, r0
 8006500:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006502:	7bbb      	ldrb	r3, [r7, #14]
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d103      	bne.n	8006512 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	220b      	movs	r2, #11
 800650e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006510:	e058      	b.n	80065c4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006512:	7bbb      	ldrb	r3, [r7, #14]
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b02      	cmp	r3, #2
 8006518:	d154      	bne.n	80065c4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	220d      	movs	r2, #13
 800651e:	701a      	strb	r2, [r3, #0]
      break;
 8006520:	e050      	b.n	80065c4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	220d      	movs	r2, #13
 8006526:	701a      	strb	r2, [r3, #0]
      break;
 8006528:	e04c      	b.n	80065c4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006530:	2b00      	cmp	r3, #0
 8006532:	d049      	beq.n	80065c8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	4798      	blx	r3
      }
      break;
 8006540:	e042      	b.n	80065c8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7ff fd72 	bl	8006034 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006556:	2b00      	cmp	r3, #0
 8006558:	d009      	beq.n	800656e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006574:	2b00      	cmp	r3, #0
 8006576:	d005      	beq.n	8006584 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800657e:	2105      	movs	r1, #5
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b01      	cmp	r3, #1
 800658e:	d107      	bne.n	80065a0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7ff fe2b 	bl	80061f4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800659e:	e014      	b.n	80065ca <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f001 f985 	bl	80078b0 <USBH_LL_Start>
      break;
 80065a6:	e010      	b.n	80065ca <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80065a8:	bf00      	nop
 80065aa:	e00e      	b.n	80065ca <USBH_Process+0x3b6>
      break;
 80065ac:	bf00      	nop
 80065ae:	e00c      	b.n	80065ca <USBH_Process+0x3b6>
      break;
 80065b0:	bf00      	nop
 80065b2:	e00a      	b.n	80065ca <USBH_Process+0x3b6>
    break;
 80065b4:	bf00      	nop
 80065b6:	e008      	b.n	80065ca <USBH_Process+0x3b6>
      break;
 80065b8:	bf00      	nop
 80065ba:	e006      	b.n	80065ca <USBH_Process+0x3b6>
      break;
 80065bc:	bf00      	nop
 80065be:	e004      	b.n	80065ca <USBH_Process+0x3b6>
      break;
 80065c0:	bf00      	nop
 80065c2:	e002      	b.n	80065ca <USBH_Process+0x3b6>
      break;
 80065c4:	bf00      	nop
 80065c6:	e000      	b.n	80065ca <USBH_Process+0x3b6>
      break;
 80065c8:	bf00      	nop
  }
  return USBH_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af04      	add	r7, sp, #16
 80065da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80065dc:	2301      	movs	r3, #1
 80065de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80065e0:	2301      	movs	r3, #1
 80065e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	785b      	ldrb	r3, [r3, #1]
 80065e8:	2b07      	cmp	r3, #7
 80065ea:	f200 81c1 	bhi.w	8006970 <USBH_HandleEnum+0x39c>
 80065ee:	a201      	add	r2, pc, #4	; (adr r2, 80065f4 <USBH_HandleEnum+0x20>)
 80065f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f4:	08006615 	.word	0x08006615
 80065f8:	080066d3 	.word	0x080066d3
 80065fc:	0800673d 	.word	0x0800673d
 8006600:	080067cb 	.word	0x080067cb
 8006604:	08006835 	.word	0x08006835
 8006608:	080068a5 	.word	0x080068a5
 800660c:	080068eb 	.word	0x080068eb
 8006610:	08006931 	.word	0x08006931
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006614:	2108      	movs	r1, #8
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fa50 	bl	8006abc <USBH_Get_DevDesc>
 800661c:	4603      	mov	r3, r0
 800661e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006620:	7bbb      	ldrb	r3, [r7, #14]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d130      	bne.n	8006688 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	7919      	ldrb	r1, [r3, #4]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800664a:	b292      	uxth	r2, r2
 800664c:	9202      	str	r2, [sp, #8]
 800664e:	2200      	movs	r2, #0
 8006650:	9201      	str	r2, [sp, #4]
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	4603      	mov	r3, r0
 8006656:	2280      	movs	r2, #128	; 0x80
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 ff55 	bl	8007508 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	7959      	ldrb	r1, [r3, #5]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006672:	b292      	uxth	r2, r2
 8006674:	9202      	str	r2, [sp, #8]
 8006676:	2200      	movs	r2, #0
 8006678:	9201      	str	r2, [sp, #4]
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	4603      	mov	r3, r0
 800667e:	2200      	movs	r2, #0
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 ff41 	bl	8007508 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006686:	e175      	b.n	8006974 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006688:	7bbb      	ldrb	r3, [r7, #14]
 800668a:	2b03      	cmp	r3, #3
 800668c:	f040 8172 	bne.w	8006974 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006696:	3301      	adds	r3, #1
 8006698:	b2da      	uxtb	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d903      	bls.n	80066b2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	220d      	movs	r2, #13
 80066ae:	701a      	strb	r2, [r3, #0]
      break;
 80066b0:	e160      	b.n	8006974 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	795b      	ldrb	r3, [r3, #5]
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 ff75 	bl	80075a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	791b      	ldrb	r3, [r3, #4]
 80066c2:	4619      	mov	r1, r3
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 ff6f 	bl	80075a8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	701a      	strb	r2, [r3, #0]
      break;
 80066d0:	e150      	b.n	8006974 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80066d2:	2112      	movs	r1, #18
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f9f1 	bl	8006abc <USBH_Get_DevDesc>
 80066da:	4603      	mov	r3, r0
 80066dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80066de:	7bbb      	ldrb	r3, [r7, #14]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d103      	bne.n	80066ec <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2202      	movs	r2, #2
 80066e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80066ea:	e145      	b.n	8006978 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80066ec:	7bbb      	ldrb	r3, [r7, #14]
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	f040 8142 	bne.w	8006978 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80066fa:	3301      	adds	r3, #1
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800670a:	2b03      	cmp	r3, #3
 800670c:	d903      	bls.n	8006716 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	220d      	movs	r2, #13
 8006712:	701a      	strb	r2, [r3, #0]
      break;
 8006714:	e130      	b.n	8006978 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	795b      	ldrb	r3, [r3, #5]
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 ff43 	bl	80075a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	791b      	ldrb	r3, [r3, #4]
 8006726:	4619      	mov	r1, r3
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 ff3d 	bl	80075a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	701a      	strb	r2, [r3, #0]
      break;
 800673a:	e11d      	b.n	8006978 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800673c:	2101      	movs	r1, #1
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fa68 	bl	8006c14 <USBH_SetAddress>
 8006744:	4603      	mov	r3, r0
 8006746:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006748:	7bbb      	ldrb	r3, [r7, #14]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d132      	bne.n	80067b4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800674e:	2002      	movs	r0, #2
 8006750:	f001 fa21 	bl	8007b96 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2203      	movs	r2, #3
 8006760:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	7919      	ldrb	r1, [r3, #4]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006776:	b292      	uxth	r2, r2
 8006778:	9202      	str	r2, [sp, #8]
 800677a:	2200      	movs	r2, #0
 800677c:	9201      	str	r2, [sp, #4]
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	4603      	mov	r3, r0
 8006782:	2280      	movs	r2, #128	; 0x80
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 febf 	bl	8007508 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	7959      	ldrb	r1, [r3, #5]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800679e:	b292      	uxth	r2, r2
 80067a0:	9202      	str	r2, [sp, #8]
 80067a2:	2200      	movs	r2, #0
 80067a4:	9201      	str	r2, [sp, #4]
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	4603      	mov	r3, r0
 80067aa:	2200      	movs	r2, #0
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 feab 	bl	8007508 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80067b2:	e0e3      	b.n	800697c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067b4:	7bbb      	ldrb	r3, [r7, #14]
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	f040 80e0 	bne.w	800697c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	220d      	movs	r2, #13
 80067c0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	705a      	strb	r2, [r3, #1]
      break;
 80067c8:	e0d8      	b.n	800697c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80067ca:	2109      	movs	r1, #9
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f99d 	bl	8006b0c <USBH_Get_CfgDesc>
 80067d2:	4603      	mov	r3, r0
 80067d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80067d6:	7bbb      	ldrb	r3, [r7, #14]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d103      	bne.n	80067e4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2204      	movs	r2, #4
 80067e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80067e2:	e0cd      	b.n	8006980 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067e4:	7bbb      	ldrb	r3, [r7, #14]
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	f040 80ca 	bne.w	8006980 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80067f2:	3301      	adds	r3, #1
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006802:	2b03      	cmp	r3, #3
 8006804:	d903      	bls.n	800680e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	220d      	movs	r2, #13
 800680a:	701a      	strb	r2, [r3, #0]
      break;
 800680c:	e0b8      	b.n	8006980 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	795b      	ldrb	r3, [r3, #5]
 8006812:	4619      	mov	r1, r3
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fec7 	bl	80075a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	791b      	ldrb	r3, [r3, #4]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fec1 	bl	80075a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	701a      	strb	r2, [r3, #0]
      break;
 8006832:	e0a5      	b.n	8006980 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f965 	bl	8006b0c <USBH_Get_CfgDesc>
 8006842:	4603      	mov	r3, r0
 8006844:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006846:	7bbb      	ldrb	r3, [r7, #14]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d103      	bne.n	8006854 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2205      	movs	r2, #5
 8006850:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006852:	e097      	b.n	8006984 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006854:	7bbb      	ldrb	r3, [r7, #14]
 8006856:	2b03      	cmp	r3, #3
 8006858:	f040 8094 	bne.w	8006984 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006862:	3301      	adds	r3, #1
 8006864:	b2da      	uxtb	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006872:	2b03      	cmp	r3, #3
 8006874:	d903      	bls.n	800687e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	220d      	movs	r2, #13
 800687a:	701a      	strb	r2, [r3, #0]
      break;
 800687c:	e082      	b.n	8006984 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	795b      	ldrb	r3, [r3, #5]
 8006882:	4619      	mov	r1, r3
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fe8f 	bl	80075a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	791b      	ldrb	r3, [r3, #4]
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fe89 	bl	80075a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	701a      	strb	r2, [r3, #0]
      break;
 80068a2:	e06f      	b.n	8006984 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d019      	beq.n	80068e2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80068ba:	23ff      	movs	r3, #255	; 0xff
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f949 	bl	8006b54 <USBH_Get_StringDesc>
 80068c2:	4603      	mov	r3, r0
 80068c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80068c6:	7bbb      	ldrb	r3, [r7, #14]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d103      	bne.n	80068d4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2206      	movs	r2, #6
 80068d0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80068d2:	e059      	b.n	8006988 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80068d4:	7bbb      	ldrb	r3, [r7, #14]
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d156      	bne.n	8006988 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2206      	movs	r2, #6
 80068de:	705a      	strb	r2, [r3, #1]
      break;
 80068e0:	e052      	b.n	8006988 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2206      	movs	r2, #6
 80068e6:	705a      	strb	r2, [r3, #1]
      break;
 80068e8:	e04e      	b.n	8006988 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d019      	beq.n	8006928 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006900:	23ff      	movs	r3, #255	; 0xff
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f926 	bl	8006b54 <USBH_Get_StringDesc>
 8006908:	4603      	mov	r3, r0
 800690a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800690c:	7bbb      	ldrb	r3, [r7, #14]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d103      	bne.n	800691a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2207      	movs	r2, #7
 8006916:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006918:	e038      	b.n	800698c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800691a:	7bbb      	ldrb	r3, [r7, #14]
 800691c:	2b03      	cmp	r3, #3
 800691e:	d135      	bne.n	800698c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2207      	movs	r2, #7
 8006924:	705a      	strb	r2, [r3, #1]
      break;
 8006926:	e031      	b.n	800698c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2207      	movs	r2, #7
 800692c:	705a      	strb	r2, [r3, #1]
      break;
 800692e:	e02d      	b.n	800698c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006936:	2b00      	cmp	r3, #0
 8006938:	d017      	beq.n	800696a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006946:	23ff      	movs	r3, #255	; 0xff
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f903 	bl	8006b54 <USBH_Get_StringDesc>
 800694e:	4603      	mov	r3, r0
 8006950:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006952:	7bbb      	ldrb	r3, [r7, #14]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d102      	bne.n	800695e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006958:	2300      	movs	r3, #0
 800695a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800695c:	e018      	b.n	8006990 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800695e:	7bbb      	ldrb	r3, [r7, #14]
 8006960:	2b03      	cmp	r3, #3
 8006962:	d115      	bne.n	8006990 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	73fb      	strb	r3, [r7, #15]
      break;
 8006968:	e012      	b.n	8006990 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800696a:	2300      	movs	r3, #0
 800696c:	73fb      	strb	r3, [r7, #15]
      break;
 800696e:	e00f      	b.n	8006990 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006970:	bf00      	nop
 8006972:	e00e      	b.n	8006992 <USBH_HandleEnum+0x3be>
      break;
 8006974:	bf00      	nop
 8006976:	e00c      	b.n	8006992 <USBH_HandleEnum+0x3be>
      break;
 8006978:	bf00      	nop
 800697a:	e00a      	b.n	8006992 <USBH_HandleEnum+0x3be>
      break;
 800697c:	bf00      	nop
 800697e:	e008      	b.n	8006992 <USBH_HandleEnum+0x3be>
      break;
 8006980:	bf00      	nop
 8006982:	e006      	b.n	8006992 <USBH_HandleEnum+0x3be>
      break;
 8006984:	bf00      	nop
 8006986:	e004      	b.n	8006992 <USBH_HandleEnum+0x3be>
      break;
 8006988:	bf00      	nop
 800698a:	e002      	b.n	8006992 <USBH_HandleEnum+0x3be>
      break;
 800698c:	bf00      	nop
 800698e:	e000      	b.n	8006992 <USBH_HandleEnum+0x3be>
      break;
 8006990:	bf00      	nop
  }
  return Status;
 8006992:	7bfb      	ldrb	r3, [r7, #15]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80069ae:	bf00      	nop
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b082      	sub	sp, #8
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f804 	bl	80069de <USBH_HandleSof>
}
 80069d6:	bf00      	nop
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b082      	sub	sp, #8
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b0b      	cmp	r3, #11
 80069ee:	d10a      	bne.n	8006a06 <USBH_HandleSof+0x28>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d005      	beq.n	8006a06 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	4798      	blx	r3
  }
}
 8006a06:	bf00      	nop
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006a1e:	bf00      	nop
}
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006a3a:	bf00      	nop
}
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 ff26 	bl	80078e6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	791b      	ldrb	r3, [r3, #4]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fd81 	bl	80075a8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	795b      	ldrb	r3, [r3, #5]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fd7b 	bl	80075a8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3708      	adds	r7, #8
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006ace:	78fb      	ldrb	r3, [r7, #3]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ada:	2100      	movs	r1, #0
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f864 	bl	8006baa <USBH_GetDescriptor>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	73fb      	strb	r3, [r7, #15]
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10a      	bne.n	8006b02 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006af8:	78fa      	ldrb	r2, [r7, #3]
 8006afa:	b292      	uxth	r2, r2
 8006afc:	4619      	mov	r1, r3
 8006afe:	f000 f918 	bl	8006d32 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af02      	add	r7, sp, #8
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	460b      	mov	r3, r1
 8006b16:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	331c      	adds	r3, #28
 8006b1c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006b1e:	887b      	ldrh	r3, [r7, #2]
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b28:	2100      	movs	r1, #0
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f83d 	bl	8006baa <USBH_GetDescriptor>
 8006b30:	4603      	mov	r3, r0
 8006b32:	72fb      	strb	r3, [r7, #11]
 8006b34:	7afb      	ldrb	r3, [r7, #11]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d107      	bne.n	8006b4a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006b40:	887a      	ldrh	r2, [r7, #2]
 8006b42:	68f9      	ldr	r1, [r7, #12]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 f964 	bl	8006e12 <USBH_ParseCfgDesc>
  }

  return status;
 8006b4a:	7afb      	ldrb	r3, [r7, #11]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b088      	sub	sp, #32
 8006b58:	af02      	add	r7, sp, #8
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	607a      	str	r2, [r7, #4]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	460b      	mov	r3, r1
 8006b62:	72fb      	strb	r3, [r7, #11]
 8006b64:	4613      	mov	r3, r2
 8006b66:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006b68:	7afb      	ldrb	r3, [r7, #11]
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006b70:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006b78:	893b      	ldrh	r3, [r7, #8]
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	2100      	movs	r1, #0
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 f812 	bl	8006baa <USBH_GetDescriptor>
 8006b86:	4603      	mov	r3, r0
 8006b88:	75fb      	strb	r3, [r7, #23]
 8006b8a:	7dfb      	ldrb	r3, [r7, #23]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d107      	bne.n	8006ba0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b96:	893a      	ldrh	r2, [r7, #8]
 8006b98:	6879      	ldr	r1, [r7, #4]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 fa37 	bl	800700e <USBH_ParseStringDesc>
  }

  return status;
 8006ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	60f8      	str	r0, [r7, #12]
 8006bb2:	607b      	str	r3, [r7, #4]
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	72fb      	strb	r3, [r7, #11]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	789b      	ldrb	r3, [r3, #2]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d11c      	bne.n	8006bfe <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006bc4:	7afb      	ldrb	r3, [r7, #11]
 8006bc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2206      	movs	r2, #6
 8006bd4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	893a      	ldrh	r2, [r7, #8]
 8006bda:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006bdc:	893b      	ldrh	r3, [r7, #8]
 8006bde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006be2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006be6:	d104      	bne.n	8006bf2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f240 4209 	movw	r2, #1033	; 0x409
 8006bee:	829a      	strh	r2, [r3, #20]
 8006bf0:	e002      	b.n	8006bf8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	8b3a      	ldrh	r2, [r7, #24]
 8006bfc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006bfe:	8b3b      	ldrh	r3, [r7, #24]
 8006c00:	461a      	mov	r2, r3
 8006c02:	6879      	ldr	r1, [r7, #4]
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 fa50 	bl	80070aa <USBH_CtlReq>
 8006c0a:	4603      	mov	r3, r0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	789b      	ldrb	r3, [r3, #2]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d10f      	bne.n	8006c48 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2205      	movs	r2, #5
 8006c32:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006c34:	78fb      	ldrb	r3, [r7, #3]
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 fa2c 	bl	80070aa <USBH_CtlReq>
 8006c52:	4603      	mov	r3, r0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	789b      	ldrb	r3, [r3, #2]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d10e      	bne.n	8006c8e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2209      	movs	r2, #9
 8006c7a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	887a      	ldrh	r2, [r7, #2]
 8006c80:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006c8e:	2200      	movs	r2, #0
 8006c90:	2100      	movs	r1, #0
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fa09 	bl	80070aa <USBH_CtlReq>
 8006c98:	4603      	mov	r3, r0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b082      	sub	sp, #8
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	460b      	mov	r3, r1
 8006cac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	789b      	ldrb	r3, [r3, #2]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d10f      	bne.n	8006cd6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2203      	movs	r2, #3
 8006cc0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006cc2:	78fb      	ldrb	r3, [r7, #3]
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	2100      	movs	r1, #0
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f9e5 	bl	80070aa <USBH_CtlReq>
 8006ce0:	4603      	mov	r3, r0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b082      	sub	sp, #8
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	789b      	ldrb	r3, [r3, #2]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d10f      	bne.n	8006d1e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2202      	movs	r2, #2
 8006d02:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006d10:	78fb      	ldrb	r3, [r7, #3]
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006d1e:	2200      	movs	r2, #0
 8006d20:	2100      	movs	r1, #0
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f9c1 	bl	80070aa <USBH_CtlReq>
 8006d28:	4603      	mov	r3, r0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b085      	sub	sp, #20
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	60f8      	str	r0, [r7, #12]
 8006d3a:	60b9      	str	r1, [r7, #8]
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	781a      	ldrb	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	785a      	ldrb	r2, [r3, #1]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	3302      	adds	r3, #2
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	3303      	adds	r3, #3
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	021b      	lsls	r3, r3, #8
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	4313      	orrs	r3, r2
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	791a      	ldrb	r2, [r3, #4]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	795a      	ldrb	r2, [r3, #5]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	799a      	ldrb	r2, [r3, #6]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	79da      	ldrb	r2, [r3, #7]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006d8c:	88fb      	ldrh	r3, [r7, #6]
 8006d8e:	2b08      	cmp	r3, #8
 8006d90:	d939      	bls.n	8006e06 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	3308      	adds	r3, #8
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	3309      	adds	r3, #9
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	021b      	lsls	r3, r3, #8
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	4313      	orrs	r3, r2
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	330a      	adds	r3, #10
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	330b      	adds	r3, #11
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	021b      	lsls	r3, r3, #8
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	330c      	adds	r3, #12
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	330d      	adds	r3, #13
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	021b      	lsls	r3, r3, #8
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	4313      	orrs	r3, r2
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	7b9a      	ldrb	r2, [r3, #14]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	7bda      	ldrb	r2, [r3, #15]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	7c1a      	ldrb	r2, [r3, #16]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	7c5a      	ldrb	r2, [r3, #17]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	745a      	strb	r2, [r3, #17]
  }
}
 8006e06:	bf00      	nop
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b08a      	sub	sp, #40	; 0x28
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	60f8      	str	r0, [r7, #12]
 8006e1a:	60b9      	str	r1, [r7, #8]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	781a      	ldrb	r2, [r3, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	785a      	ldrb	r2, [r3, #1]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	3302      	adds	r3, #2
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	3303      	adds	r3, #3
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	021b      	lsls	r3, r3, #8
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	791a      	ldrb	r2, [r3, #4]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	795a      	ldrb	r2, [r3, #5]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	799a      	ldrb	r2, [r3, #6]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	79da      	ldrb	r2, [r3, #7]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	7a1a      	ldrb	r2, [r3, #8]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006e88:	88fb      	ldrh	r3, [r7, #6]
 8006e8a:	2b09      	cmp	r3, #9
 8006e8c:	d95f      	bls.n	8006f4e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006e8e:	2309      	movs	r3, #9
 8006e90:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006e96:	e051      	b.n	8006f3c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006e98:	f107 0316 	add.w	r3, r7, #22
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ea0:	f000 f8e8 	bl	8007074 <USBH_GetNextDesc>
 8006ea4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	785b      	ldrb	r3, [r3, #1]
 8006eaa:	2b04      	cmp	r3, #4
 8006eac:	d146      	bne.n	8006f3c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006eae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006eb2:	221a      	movs	r2, #26
 8006eb4:	fb02 f303 	mul.w	r3, r2, r3
 8006eb8:	3308      	adds	r3, #8
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	3302      	adds	r3, #2
 8006ec0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006ec2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ec4:	69f8      	ldr	r0, [r7, #28]
 8006ec6:	f000 f846 	bl	8006f56 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006ed4:	e022      	b.n	8006f1c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006ed6:	f107 0316 	add.w	r3, r7, #22
 8006eda:	4619      	mov	r1, r3
 8006edc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ede:	f000 f8c9 	bl	8007074 <USBH_GetNextDesc>
 8006ee2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	785b      	ldrb	r3, [r3, #1]
 8006ee8:	2b05      	cmp	r3, #5
 8006eea:	d117      	bne.n	8006f1c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006eec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ef0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006ef4:	3201      	adds	r2, #1
 8006ef6:	00d2      	lsls	r2, r2, #3
 8006ef8:	211a      	movs	r1, #26
 8006efa:	fb01 f303 	mul.w	r3, r1, r3
 8006efe:	4413      	add	r3, r2
 8006f00:	3308      	adds	r3, #8
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	4413      	add	r3, r2
 8006f06:	3304      	adds	r3, #4
 8006f08:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006f0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f0c:	69b8      	ldr	r0, [r7, #24]
 8006f0e:	f000 f851 	bl	8006fb4 <USBH_ParseEPDesc>
            ep_ix++;
 8006f12:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006f16:	3301      	adds	r3, #1
 8006f18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	791b      	ldrb	r3, [r3, #4]
 8006f20:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d204      	bcs.n	8006f32 <USBH_ParseCfgDesc+0x120>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	885a      	ldrh	r2, [r3, #2]
 8006f2c:	8afb      	ldrh	r3, [r7, #22]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d8d1      	bhi.n	8006ed6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006f32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f36:	3301      	adds	r3, #1
 8006f38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006f3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d804      	bhi.n	8006f4e <USBH_ParseCfgDesc+0x13c>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	885a      	ldrh	r2, [r3, #2]
 8006f48:	8afb      	ldrh	r3, [r7, #22]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d8a4      	bhi.n	8006e98 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006f4e:	bf00      	nop
 8006f50:	3728      	adds	r7, #40	; 0x28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b083      	sub	sp, #12
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781a      	ldrb	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	785a      	ldrb	r2, [r3, #1]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	789a      	ldrb	r2, [r3, #2]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	78da      	ldrb	r2, [r3, #3]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	791a      	ldrb	r2, [r3, #4]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	795a      	ldrb	r2, [r3, #5]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	799a      	ldrb	r2, [r3, #6]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	79da      	ldrb	r2, [r3, #7]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	7a1a      	ldrb	r2, [r3, #8]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	721a      	strb	r2, [r3, #8]
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781a      	ldrb	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	785a      	ldrb	r2, [r3, #1]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	789a      	ldrb	r2, [r3, #2]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	78da      	ldrb	r2, [r3, #3]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	3304      	adds	r3, #4
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	3305      	adds	r3, #5
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	021b      	lsls	r3, r3, #8
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	799a      	ldrb	r2, [r3, #6]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	719a      	strb	r2, [r3, #6]
}
 8007002:	bf00      	nop
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800700e:	b480      	push	{r7}
 8007010:	b087      	sub	sp, #28
 8007012:	af00      	add	r7, sp, #0
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	4613      	mov	r3, r2
 800701a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	3301      	adds	r3, #1
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	2b03      	cmp	r3, #3
 8007024:	d120      	bne.n	8007068 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	1e9a      	subs	r2, r3, #2
 800702c:	88fb      	ldrh	r3, [r7, #6]
 800702e:	4293      	cmp	r3, r2
 8007030:	bf28      	it	cs
 8007032:	4613      	movcs	r3, r2
 8007034:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	3302      	adds	r3, #2
 800703a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800703c:	2300      	movs	r3, #0
 800703e:	82fb      	strh	r3, [r7, #22]
 8007040:	e00b      	b.n	800705a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007042:	8afb      	ldrh	r3, [r7, #22]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4413      	add	r3, r2
 8007048:	781a      	ldrb	r2, [r3, #0]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	3301      	adds	r3, #1
 8007052:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007054:	8afb      	ldrh	r3, [r7, #22]
 8007056:	3302      	adds	r3, #2
 8007058:	82fb      	strh	r3, [r7, #22]
 800705a:	8afa      	ldrh	r2, [r7, #22]
 800705c:	8abb      	ldrh	r3, [r7, #20]
 800705e:	429a      	cmp	r2, r3
 8007060:	d3ef      	bcc.n	8007042 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	2200      	movs	r2, #0
 8007066:	701a      	strb	r2, [r3, #0]
  }
}
 8007068:	bf00      	nop
 800706a:	371c      	adds	r7, #28
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	881a      	ldrh	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	b29b      	uxth	r3, r3
 8007088:	4413      	add	r3, r2
 800708a:	b29a      	uxth	r2, r3
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4413      	add	r3, r2
 800709a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800709c:	68fb      	ldr	r3, [r7, #12]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b086      	sub	sp, #24
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	60b9      	str	r1, [r7, #8]
 80070b4:	4613      	mov	r3, r2
 80070b6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80070b8:	2301      	movs	r3, #1
 80070ba:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	789b      	ldrb	r3, [r3, #2]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d002      	beq.n	80070ca <USBH_CtlReq+0x20>
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d00f      	beq.n	80070e8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80070c8:	e027      	b.n	800711a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	88fa      	ldrh	r2, [r7, #6]
 80070d4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2201      	movs	r2, #1
 80070da:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2202      	movs	r2, #2
 80070e0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80070e2:	2301      	movs	r3, #1
 80070e4:	75fb      	strb	r3, [r7, #23]
      break;
 80070e6:	e018      	b.n	800711a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 f81b 	bl	8007124 <USBH_HandleControl>
 80070ee:	4603      	mov	r3, r0
 80070f0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80070f2:	7dfb      	ldrb	r3, [r7, #23]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d002      	beq.n	80070fe <USBH_CtlReq+0x54>
 80070f8:	7dfb      	ldrb	r3, [r7, #23]
 80070fa:	2b03      	cmp	r3, #3
 80070fc:	d106      	bne.n	800710c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2201      	movs	r2, #1
 8007102:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	761a      	strb	r2, [r3, #24]
      break;
 800710a:	e005      	b.n	8007118 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800710c:	7dfb      	ldrb	r3, [r7, #23]
 800710e:	2b02      	cmp	r3, #2
 8007110:	d102      	bne.n	8007118 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2201      	movs	r2, #1
 8007116:	709a      	strb	r2, [r3, #2]
      break;
 8007118:	bf00      	nop
  }
  return status;
 800711a:	7dfb      	ldrb	r3, [r7, #23]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af02      	add	r7, sp, #8
 800712a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800712c:	2301      	movs	r3, #1
 800712e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007130:	2300      	movs	r3, #0
 8007132:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	7e1b      	ldrb	r3, [r3, #24]
 8007138:	3b01      	subs	r3, #1
 800713a:	2b0a      	cmp	r3, #10
 800713c:	f200 8158 	bhi.w	80073f0 <USBH_HandleControl+0x2cc>
 8007140:	a201      	add	r2, pc, #4	; (adr r2, 8007148 <USBH_HandleControl+0x24>)
 8007142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007146:	bf00      	nop
 8007148:	08007175 	.word	0x08007175
 800714c:	0800718f 	.word	0x0800718f
 8007150:	080071f9 	.word	0x080071f9
 8007154:	0800721f 	.word	0x0800721f
 8007158:	08007257 	.word	0x08007257
 800715c:	08007283 	.word	0x08007283
 8007160:	080072d5 	.word	0x080072d5
 8007164:	080072f7 	.word	0x080072f7
 8007168:	08007333 	.word	0x08007333
 800716c:	0800735b 	.word	0x0800735b
 8007170:	08007399 	.word	0x08007399
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f103 0110 	add.w	r1, r3, #16
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	795b      	ldrb	r3, [r3, #5]
 800717e:	461a      	mov	r2, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f945 	bl	8007410 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2202      	movs	r2, #2
 800718a:	761a      	strb	r2, [r3, #24]
      break;
 800718c:	e13b      	b.n	8007406 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	795b      	ldrb	r3, [r3, #5]
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fc93 	bl	8007ac0 <USBH_LL_GetURBState>
 800719a:	4603      	mov	r3, r0
 800719c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800719e:	7bbb      	ldrb	r3, [r7, #14]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d11e      	bne.n	80071e2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	7c1b      	ldrb	r3, [r3, #16]
 80071a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071ac:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	8adb      	ldrh	r3, [r3, #22]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00a      	beq.n	80071cc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80071b6:	7b7b      	ldrb	r3, [r7, #13]
 80071b8:	2b80      	cmp	r3, #128	; 0x80
 80071ba:	d103      	bne.n	80071c4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2203      	movs	r2, #3
 80071c0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80071c2:	e117      	b.n	80073f4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2205      	movs	r2, #5
 80071c8:	761a      	strb	r2, [r3, #24]
      break;
 80071ca:	e113      	b.n	80073f4 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 80071cc:	7b7b      	ldrb	r3, [r7, #13]
 80071ce:	2b80      	cmp	r3, #128	; 0x80
 80071d0:	d103      	bne.n	80071da <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2209      	movs	r2, #9
 80071d6:	761a      	strb	r2, [r3, #24]
      break;
 80071d8:	e10c      	b.n	80073f4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2207      	movs	r2, #7
 80071de:	761a      	strb	r2, [r3, #24]
      break;
 80071e0:	e108      	b.n	80073f4 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80071e2:	7bbb      	ldrb	r3, [r7, #14]
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	d003      	beq.n	80071f0 <USBH_HandleControl+0xcc>
 80071e8:	7bbb      	ldrb	r3, [r7, #14]
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	f040 8102 	bne.w	80073f4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	220b      	movs	r2, #11
 80071f4:	761a      	strb	r2, [r3, #24]
      break;
 80071f6:	e0fd      	b.n	80073f4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071fe:	b29a      	uxth	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6899      	ldr	r1, [r3, #8]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	899a      	ldrh	r2, [r3, #12]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	791b      	ldrb	r3, [r3, #4]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f93c 	bl	800748e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2204      	movs	r2, #4
 800721a:	761a      	strb	r2, [r3, #24]
      break;
 800721c:	e0f3      	b.n	8007406 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	791b      	ldrb	r3, [r3, #4]
 8007222:	4619      	mov	r1, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fc4b 	bl	8007ac0 <USBH_LL_GetURBState>
 800722a:	4603      	mov	r3, r0
 800722c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800722e:	7bbb      	ldrb	r3, [r7, #14]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d102      	bne.n	800723a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2209      	movs	r2, #9
 8007238:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800723a:	7bbb      	ldrb	r3, [r7, #14]
 800723c:	2b05      	cmp	r3, #5
 800723e:	d102      	bne.n	8007246 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007240:	2303      	movs	r3, #3
 8007242:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007244:	e0d8      	b.n	80073f8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007246:	7bbb      	ldrb	r3, [r7, #14]
 8007248:	2b04      	cmp	r3, #4
 800724a:	f040 80d5 	bne.w	80073f8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	220b      	movs	r2, #11
 8007252:	761a      	strb	r2, [r3, #24]
      break;
 8007254:	e0d0      	b.n	80073f8 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6899      	ldr	r1, [r3, #8]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	899a      	ldrh	r2, [r3, #12]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	7958      	ldrb	r0, [r3, #5]
 8007262:	2301      	movs	r3, #1
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	4603      	mov	r3, r0
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f8eb 	bl	8007444 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007274:	b29a      	uxth	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2206      	movs	r2, #6
 800727e:	761a      	strb	r2, [r3, #24]
      break;
 8007280:	e0c1      	b.n	8007406 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	795b      	ldrb	r3, [r3, #5]
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fc19 	bl	8007ac0 <USBH_LL_GetURBState>
 800728e:	4603      	mov	r3, r0
 8007290:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007292:	7bbb      	ldrb	r3, [r7, #14]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d103      	bne.n	80072a0 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2207      	movs	r2, #7
 800729c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800729e:	e0ad      	b.n	80073fc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 80072a0:	7bbb      	ldrb	r3, [r7, #14]
 80072a2:	2b05      	cmp	r3, #5
 80072a4:	d105      	bne.n	80072b2 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	220c      	movs	r2, #12
 80072aa:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80072ac:	2303      	movs	r3, #3
 80072ae:	73fb      	strb	r3, [r7, #15]
      break;
 80072b0:	e0a4      	b.n	80073fc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80072b2:	7bbb      	ldrb	r3, [r7, #14]
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d103      	bne.n	80072c0 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2205      	movs	r2, #5
 80072bc:	761a      	strb	r2, [r3, #24]
      break;
 80072be:	e09d      	b.n	80073fc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 80072c0:	7bbb      	ldrb	r3, [r7, #14]
 80072c2:	2b04      	cmp	r3, #4
 80072c4:	f040 809a 	bne.w	80073fc <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	220b      	movs	r2, #11
 80072cc:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80072ce:	2302      	movs	r3, #2
 80072d0:	73fb      	strb	r3, [r7, #15]
      break;
 80072d2:	e093      	b.n	80073fc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	791b      	ldrb	r3, [r3, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	2100      	movs	r1, #0
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f8d6 	bl	800748e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2208      	movs	r2, #8
 80072f2:	761a      	strb	r2, [r3, #24]

      break;
 80072f4:	e087      	b.n	8007406 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	791b      	ldrb	r3, [r3, #4]
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fbdf 	bl	8007ac0 <USBH_LL_GetURBState>
 8007302:	4603      	mov	r3, r0
 8007304:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007306:	7bbb      	ldrb	r3, [r7, #14]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d105      	bne.n	8007318 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	220d      	movs	r2, #13
 8007310:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007316:	e073      	b.n	8007400 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8007318:	7bbb      	ldrb	r3, [r7, #14]
 800731a:	2b04      	cmp	r3, #4
 800731c:	d103      	bne.n	8007326 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	220b      	movs	r2, #11
 8007322:	761a      	strb	r2, [r3, #24]
      break;
 8007324:	e06c      	b.n	8007400 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8007326:	7bbb      	ldrb	r3, [r7, #14]
 8007328:	2b05      	cmp	r3, #5
 800732a:	d169      	bne.n	8007400 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800732c:	2303      	movs	r3, #3
 800732e:	73fb      	strb	r3, [r7, #15]
      break;
 8007330:	e066      	b.n	8007400 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	795a      	ldrb	r2, [r3, #5]
 8007336:	2301      	movs	r3, #1
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	4613      	mov	r3, r2
 800733c:	2200      	movs	r2, #0
 800733e:	2100      	movs	r1, #0
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f87f 	bl	8007444 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800734c:	b29a      	uxth	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	220a      	movs	r2, #10
 8007356:	761a      	strb	r2, [r3, #24]
      break;
 8007358:	e055      	b.n	8007406 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	795b      	ldrb	r3, [r3, #5]
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fbad 	bl	8007ac0 <USBH_LL_GetURBState>
 8007366:	4603      	mov	r3, r0
 8007368:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800736a:	7bbb      	ldrb	r3, [r7, #14]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d105      	bne.n	800737c <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	220d      	movs	r2, #13
 8007378:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800737a:	e043      	b.n	8007404 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800737c:	7bbb      	ldrb	r3, [r7, #14]
 800737e:	2b02      	cmp	r3, #2
 8007380:	d103      	bne.n	800738a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2209      	movs	r2, #9
 8007386:	761a      	strb	r2, [r3, #24]
      break;
 8007388:	e03c      	b.n	8007404 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800738a:	7bbb      	ldrb	r3, [r7, #14]
 800738c:	2b04      	cmp	r3, #4
 800738e:	d139      	bne.n	8007404 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	220b      	movs	r2, #11
 8007394:	761a      	strb	r2, [r3, #24]
      break;
 8007396:	e035      	b.n	8007404 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	7e5b      	ldrb	r3, [r3, #25]
 800739c:	3301      	adds	r3, #1
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	765a      	strb	r2, [r3, #25]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	7e5b      	ldrb	r3, [r3, #25]
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d806      	bhi.n	80073ba <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80073b8:	e025      	b.n	8007406 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073c0:	2106      	movs	r1, #6
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	795b      	ldrb	r3, [r3, #5]
 80073d0:	4619      	mov	r1, r3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f8e8 	bl	80075a8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	791b      	ldrb	r3, [r3, #4]
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f8e2 	bl	80075a8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80073ea:	2302      	movs	r3, #2
 80073ec:	73fb      	strb	r3, [r7, #15]
      break;
 80073ee:	e00a      	b.n	8007406 <USBH_HandleControl+0x2e2>

    default:
      break;
 80073f0:	bf00      	nop
 80073f2:	e008      	b.n	8007406 <USBH_HandleControl+0x2e2>
      break;
 80073f4:	bf00      	nop
 80073f6:	e006      	b.n	8007406 <USBH_HandleControl+0x2e2>
      break;
 80073f8:	bf00      	nop
 80073fa:	e004      	b.n	8007406 <USBH_HandleControl+0x2e2>
      break;
 80073fc:	bf00      	nop
 80073fe:	e002      	b.n	8007406 <USBH_HandleControl+0x2e2>
      break;
 8007400:	bf00      	nop
 8007402:	e000      	b.n	8007406 <USBH_HandleControl+0x2e2>
      break;
 8007404:	bf00      	nop
  }

  return status;
 8007406:	7bfb      	ldrb	r3, [r7, #15]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b088      	sub	sp, #32
 8007414:	af04      	add	r7, sp, #16
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	4613      	mov	r3, r2
 800741c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800741e:	79f9      	ldrb	r1, [r7, #7]
 8007420:	2300      	movs	r3, #0
 8007422:	9303      	str	r3, [sp, #12]
 8007424:	2308      	movs	r3, #8
 8007426:	9302      	str	r3, [sp, #8]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	9301      	str	r3, [sp, #4]
 800742c:	2300      	movs	r3, #0
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	2300      	movs	r3, #0
 8007432:	2200      	movs	r2, #0
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f000 fb12 	bl	8007a5e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b088      	sub	sp, #32
 8007448:	af04      	add	r7, sp, #16
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	4611      	mov	r1, r2
 8007450:	461a      	mov	r2, r3
 8007452:	460b      	mov	r3, r1
 8007454:	80fb      	strh	r3, [r7, #6]
 8007456:	4613      	mov	r3, r2
 8007458:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007460:	2b00      	cmp	r3, #0
 8007462:	d001      	beq.n	8007468 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007464:	2300      	movs	r3, #0
 8007466:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007468:	7979      	ldrb	r1, [r7, #5]
 800746a:	7e3b      	ldrb	r3, [r7, #24]
 800746c:	9303      	str	r3, [sp, #12]
 800746e:	88fb      	ldrh	r3, [r7, #6]
 8007470:	9302      	str	r3, [sp, #8]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	9301      	str	r3, [sp, #4]
 8007476:	2301      	movs	r3, #1
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	2300      	movs	r3, #0
 800747c:	2200      	movs	r2, #0
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 faed 	bl	8007a5e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b088      	sub	sp, #32
 8007492:	af04      	add	r7, sp, #16
 8007494:	60f8      	str	r0, [r7, #12]
 8007496:	60b9      	str	r1, [r7, #8]
 8007498:	4611      	mov	r1, r2
 800749a:	461a      	mov	r2, r3
 800749c:	460b      	mov	r3, r1
 800749e:	80fb      	strh	r3, [r7, #6]
 80074a0:	4613      	mov	r3, r2
 80074a2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80074a4:	7979      	ldrb	r1, [r7, #5]
 80074a6:	2300      	movs	r3, #0
 80074a8:	9303      	str	r3, [sp, #12]
 80074aa:	88fb      	ldrh	r3, [r7, #6]
 80074ac:	9302      	str	r3, [sp, #8]
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	9301      	str	r3, [sp, #4]
 80074b2:	2301      	movs	r3, #1
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	2300      	movs	r3, #0
 80074b8:	2201      	movs	r2, #1
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 facf 	bl	8007a5e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80074c0:	2300      	movs	r3, #0

}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b088      	sub	sp, #32
 80074ce:	af04      	add	r7, sp, #16
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	4611      	mov	r1, r2
 80074d6:	461a      	mov	r2, r3
 80074d8:	460b      	mov	r3, r1
 80074da:	71fb      	strb	r3, [r7, #7]
 80074dc:	4613      	mov	r3, r2
 80074de:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80074e0:	79fb      	ldrb	r3, [r7, #7]
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	79b9      	ldrb	r1, [r7, #6]
 80074e6:	2200      	movs	r2, #0
 80074e8:	9203      	str	r2, [sp, #12]
 80074ea:	9302      	str	r3, [sp, #8]
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	9301      	str	r3, [sp, #4]
 80074f0:	2301      	movs	r3, #1
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	2303      	movs	r3, #3
 80074f6:	2201      	movs	r2, #1
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f000 fab0 	bl	8007a5e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af04      	add	r7, sp, #16
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	4608      	mov	r0, r1
 8007512:	4611      	mov	r1, r2
 8007514:	461a      	mov	r2, r3
 8007516:	4603      	mov	r3, r0
 8007518:	70fb      	strb	r3, [r7, #3]
 800751a:	460b      	mov	r3, r1
 800751c:	70bb      	strb	r3, [r7, #2]
 800751e:	4613      	mov	r3, r2
 8007520:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007522:	7878      	ldrb	r0, [r7, #1]
 8007524:	78ba      	ldrb	r2, [r7, #2]
 8007526:	78f9      	ldrb	r1, [r7, #3]
 8007528:	8b3b      	ldrh	r3, [r7, #24]
 800752a:	9302      	str	r3, [sp, #8]
 800752c:	7d3b      	ldrb	r3, [r7, #20]
 800752e:	9301      	str	r3, [sp, #4]
 8007530:	7c3b      	ldrb	r3, [r7, #16]
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	4603      	mov	r3, r0
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fa43 	bl	80079c2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b082      	sub	sp, #8
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	460b      	mov	r3, r1
 8007550:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007552:	78fb      	ldrb	r3, [r7, #3]
 8007554:	4619      	mov	r1, r3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fa62 	bl	8007a20 <USBH_LL_ClosePipe>

  return USBH_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3708      	adds	r7, #8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b084      	sub	sp, #16
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	460b      	mov	r3, r1
 8007570:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f836 	bl	80075e4 <USBH_GetFreePipe>
 8007578:	4603      	mov	r3, r0
 800757a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800757c:	89fb      	ldrh	r3, [r7, #14]
 800757e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007582:	4293      	cmp	r3, r2
 8007584:	d00a      	beq.n	800759c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007586:	78fa      	ldrb	r2, [r7, #3]
 8007588:	89fb      	ldrh	r3, [r7, #14]
 800758a:	f003 030f 	and.w	r3, r3, #15
 800758e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007592:	6879      	ldr	r1, [r7, #4]
 8007594:	33e0      	adds	r3, #224	; 0xe0
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	440b      	add	r3, r1
 800759a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800759c:	89fb      	ldrh	r3, [r7, #14]
 800759e:	b2db      	uxtb	r3, r3
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80075b4:	78fb      	ldrb	r3, [r7, #3]
 80075b6:	2b0a      	cmp	r3, #10
 80075b8:	d80d      	bhi.n	80075d6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80075ba:	78fb      	ldrb	r3, [r7, #3]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	33e0      	adds	r3, #224	; 0xe0
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	78fb      	ldrb	r3, [r7, #3]
 80075c8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80075cc:	6879      	ldr	r1, [r7, #4]
 80075ce:	33e0      	adds	r3, #224	; 0xe0
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	440b      	add	r3, r1
 80075d4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80075ec:	2300      	movs	r3, #0
 80075ee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80075f0:	2300      	movs	r3, #0
 80075f2:	73fb      	strb	r3, [r7, #15]
 80075f4:	e00f      	b.n	8007616 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80075f6:	7bfb      	ldrb	r3, [r7, #15]
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	33e0      	adds	r3, #224	; 0xe0
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d102      	bne.n	8007610 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800760a:	7bfb      	ldrb	r3, [r7, #15]
 800760c:	b29b      	uxth	r3, r3
 800760e:	e007      	b.n	8007620 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007610:	7bfb      	ldrb	r3, [r7, #15]
 8007612:	3301      	adds	r3, #1
 8007614:	73fb      	strb	r3, [r7, #15]
 8007616:	7bfb      	ldrb	r3, [r7, #15]
 8007618:	2b0a      	cmp	r3, #10
 800761a:	d9ec      	bls.n	80075f6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800761c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007620:	4618      	mov	r0, r3
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007630:	2201      	movs	r2, #1
 8007632:	490e      	ldr	r1, [pc, #56]	; (800766c <MX_USB_HOST_Init+0x40>)
 8007634:	480e      	ldr	r0, [pc, #56]	; (8007670 <MX_USB_HOST_Init+0x44>)
 8007636:	f7fe fcc3 	bl	8005fc0 <USBH_Init>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d001      	beq.n	8007644 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007640:	f7f9 fa04 	bl	8000a4c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 8007644:	490b      	ldr	r1, [pc, #44]	; (8007674 <MX_USB_HOST_Init+0x48>)
 8007646:	480a      	ldr	r0, [pc, #40]	; (8007670 <MX_USB_HOST_Init+0x44>)
 8007648:	f7fe fd48 	bl	80060dc <USBH_RegisterClass>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007652:	f7f9 f9fb 	bl	8000a4c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007656:	4806      	ldr	r0, [pc, #24]	; (8007670 <MX_USB_HOST_Init+0x44>)
 8007658:	f7fe fdcc 	bl	80061f4 <USBH_Start>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007662:	f7f9 f9f3 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007666:	bf00      	nop
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	0800768d 	.word	0x0800768d
 8007670:	20000528 	.word	0x20000528
 8007674:	2000000c 	.word	0x2000000c

08007678 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800767c:	4802      	ldr	r0, [pc, #8]	; (8007688 <MX_USB_HOST_Process+0x10>)
 800767e:	f7fe fdc9 	bl	8006214 <USBH_Process>
}
 8007682:	bf00      	nop
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	20000528 	.word	0x20000528

0800768c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007698:	78fb      	ldrb	r3, [r7, #3]
 800769a:	3b01      	subs	r3, #1
 800769c:	2b04      	cmp	r3, #4
 800769e:	d81c      	bhi.n	80076da <USBH_UserProcess+0x4e>
 80076a0:	a201      	add	r2, pc, #4	; (adr r2, 80076a8 <USBH_UserProcess+0x1c>)
 80076a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a6:	bf00      	nop
 80076a8:	080076db 	.word	0x080076db
 80076ac:	080076c5 	.word	0x080076c5
 80076b0:	080076db 	.word	0x080076db
 80076b4:	080076d3 	.word	0x080076d3
 80076b8:	080076bd 	.word	0x080076bd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80076bc:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <USBH_UserProcess+0x58>)
 80076be:	2203      	movs	r2, #3
 80076c0:	701a      	strb	r2, [r3, #0]
  break;
 80076c2:	e00b      	b.n	80076dc <USBH_UserProcess+0x50>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80076c4:	4b07      	ldr	r3, [pc, #28]	; (80076e4 <USBH_UserProcess+0x58>)
 80076c6:	2202      	movs	r2, #2
 80076c8:	701a      	strb	r2, [r3, #0]

  USBH_CONNECTION_Callback(phost);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7f9 f8c0 	bl	8000850 <USBH_CONNECTION_Callback>
  break;
 80076d0:	e004      	b.n	80076dc <USBH_UserProcess+0x50>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80076d2:	4b04      	ldr	r3, [pc, #16]	; (80076e4 <USBH_UserProcess+0x58>)
 80076d4:	2201      	movs	r2, #1
 80076d6:	701a      	strb	r2, [r3, #0]

  break;
 80076d8:	e000      	b.n	80076dc <USBH_UserProcess+0x50>

  default:
  break;
 80076da:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80076dc:	bf00      	nop
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	200000b8 	.word	0x200000b8

080076e8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b08a      	sub	sp, #40	; 0x28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076f0:	f107 0314 	add.w	r3, r7, #20
 80076f4:	2200      	movs	r2, #0
 80076f6:	601a      	str	r2, [r3, #0]
 80076f8:	605a      	str	r2, [r3, #4]
 80076fa:	609a      	str	r2, [r3, #8]
 80076fc:	60da      	str	r2, [r3, #12]
 80076fe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007708:	d13a      	bne.n	8007780 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800770a:	2300      	movs	r3, #0
 800770c:	613b      	str	r3, [r7, #16]
 800770e:	4b1e      	ldr	r3, [pc, #120]	; (8007788 <HAL_HCD_MspInit+0xa0>)
 8007710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007712:	4a1d      	ldr	r2, [pc, #116]	; (8007788 <HAL_HCD_MspInit+0xa0>)
 8007714:	f043 0301 	orr.w	r3, r3, #1
 8007718:	6313      	str	r3, [r2, #48]	; 0x30
 800771a:	4b1b      	ldr	r3, [pc, #108]	; (8007788 <HAL_HCD_MspInit+0xa0>)
 800771c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	613b      	str	r3, [r7, #16]
 8007724:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007726:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800772a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800772c:	2302      	movs	r3, #2
 800772e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007730:	2300      	movs	r3, #0
 8007732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007734:	2303      	movs	r3, #3
 8007736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007738:	230a      	movs	r3, #10
 800773a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800773c:	f107 0314 	add.w	r3, r7, #20
 8007740:	4619      	mov	r1, r3
 8007742:	4812      	ldr	r0, [pc, #72]	; (800778c <HAL_HCD_MspInit+0xa4>)
 8007744:	f7f9 fc44 	bl	8000fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007748:	4b0f      	ldr	r3, [pc, #60]	; (8007788 <HAL_HCD_MspInit+0xa0>)
 800774a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800774c:	4a0e      	ldr	r2, [pc, #56]	; (8007788 <HAL_HCD_MspInit+0xa0>)
 800774e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007752:	6353      	str	r3, [r2, #52]	; 0x34
 8007754:	2300      	movs	r3, #0
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	4b0b      	ldr	r3, [pc, #44]	; (8007788 <HAL_HCD_MspInit+0xa0>)
 800775a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800775c:	4a0a      	ldr	r2, [pc, #40]	; (8007788 <HAL_HCD_MspInit+0xa0>)
 800775e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007762:	6453      	str	r3, [r2, #68]	; 0x44
 8007764:	4b08      	ldr	r3, [pc, #32]	; (8007788 <HAL_HCD_MspInit+0xa0>)
 8007766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007770:	2200      	movs	r2, #0
 8007772:	2100      	movs	r1, #0
 8007774:	2043      	movs	r0, #67	; 0x43
 8007776:	f7f9 fbf4 	bl	8000f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800777a:	2043      	movs	r0, #67	; 0x43
 800777c:	f7f9 fc0d 	bl	8000f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007780:	bf00      	nop
 8007782:	3728      	adds	r7, #40	; 0x28
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	40023800 	.word	0x40023800
 800778c:	40020000 	.word	0x40020000

08007790 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800779e:	4618      	mov	r0, r3
 80077a0:	f7ff f90b 	bl	80069ba <USBH_LL_IncTimer>
}
 80077a4:	bf00      	nop
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7ff f943 	bl	8006a46 <USBH_LL_Connect>
}
 80077c0:	bf00      	nop
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7ff f94c 	bl	8006a74 <USBH_LL_Disconnect>
}
 80077dc:	bf00      	nop
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	70fb      	strb	r3, [r7, #3]
 80077f0:	4613      	mov	r3, r2
 80077f2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff f8fd 	bl	8006a0e <USBH_LL_PortEnabled>
} 
 8007814:	bf00      	nop
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800782a:	4618      	mov	r0, r3
 800782c:	f7ff f8fd 	bl	8006a2a <USBH_LL_PortDisabled>
} 
 8007830:	bf00      	nop
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007846:	2b01      	cmp	r3, #1
 8007848:	d12a      	bne.n	80078a0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800784a:	4a18      	ldr	r2, [pc, #96]	; (80078ac <USBH_LL_Init+0x74>)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a15      	ldr	r2, [pc, #84]	; (80078ac <USBH_LL_Init+0x74>)
 8007856:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800785a:	4b14      	ldr	r3, [pc, #80]	; (80078ac <USBH_LL_Init+0x74>)
 800785c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007860:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007862:	4b12      	ldr	r3, [pc, #72]	; (80078ac <USBH_LL_Init+0x74>)
 8007864:	2208      	movs	r2, #8
 8007866:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007868:	4b10      	ldr	r3, [pc, #64]	; (80078ac <USBH_LL_Init+0x74>)
 800786a:	2201      	movs	r2, #1
 800786c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800786e:	4b0f      	ldr	r3, [pc, #60]	; (80078ac <USBH_LL_Init+0x74>)
 8007870:	2200      	movs	r2, #0
 8007872:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007874:	4b0d      	ldr	r3, [pc, #52]	; (80078ac <USBH_LL_Init+0x74>)
 8007876:	2202      	movs	r2, #2
 8007878:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800787a:	4b0c      	ldr	r3, [pc, #48]	; (80078ac <USBH_LL_Init+0x74>)
 800787c:	2200      	movs	r2, #0
 800787e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007880:	480a      	ldr	r0, [pc, #40]	; (80078ac <USBH_LL_Init+0x74>)
 8007882:	f7f9 fd50 	bl	8001326 <HAL_HCD_Init>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800788c:	f7f9 f8de 	bl	8000a4c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007890:	4806      	ldr	r0, [pc, #24]	; (80078ac <USBH_LL_Init+0x74>)
 8007892:	f7fa f953 	bl	8001b3c <HAL_HCD_GetCurrentFrame>
 8007896:	4603      	mov	r3, r0
 8007898:	4619      	mov	r1, r3
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7ff f87e 	bl	800699c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	20000900 	.word	0x20000900

080078b0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078bc:	2300      	movs	r3, #0
 80078be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fa f8c0 	bl	8001a4c <HAL_HCD_Start>
 80078cc:	4603      	mov	r3, r0
 80078ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 f96a 	bl	8007bac <USBH_Get_USB_Status>
 80078d8:	4603      	mov	r3, r0
 80078da:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b084      	sub	sp, #16
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fa f8c8 	bl	8001a92 <HAL_HCD_Stop>
 8007902:	4603      	mov	r3, r0
 8007904:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007906:	7bfb      	ldrb	r3, [r7, #15]
 8007908:	4618      	mov	r0, r3
 800790a:	f000 f94f 	bl	8007bac <USBH_Get_USB_Status>
 800790e:	4603      	mov	r3, r0
 8007910:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007912:	7bbb      	ldrb	r3, [r7, #14]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007924:	2301      	movs	r3, #1
 8007926:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800792e:	4618      	mov	r0, r3
 8007930:	f7fa f912 	bl	8001b58 <HAL_HCD_GetCurrentSpeed>
 8007934:	4603      	mov	r3, r0
 8007936:	2b01      	cmp	r3, #1
 8007938:	d007      	beq.n	800794a <USBH_LL_GetSpeed+0x2e>
 800793a:	2b01      	cmp	r3, #1
 800793c:	d302      	bcc.n	8007944 <USBH_LL_GetSpeed+0x28>
 800793e:	2b02      	cmp	r3, #2
 8007940:	d006      	beq.n	8007950 <USBH_LL_GetSpeed+0x34>
 8007942:	e008      	b.n	8007956 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007944:	2300      	movs	r3, #0
 8007946:	73fb      	strb	r3, [r7, #15]
    break;
 8007948:	e008      	b.n	800795c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800794a:	2301      	movs	r3, #1
 800794c:	73fb      	strb	r3, [r7, #15]
    break;
 800794e:	e005      	b.n	800795c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007950:	2302      	movs	r3, #2
 8007952:	73fb      	strb	r3, [r7, #15]
    break;
 8007954:	e002      	b.n	800795c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8007956:	2301      	movs	r3, #1
 8007958:	73fb      	strb	r3, [r7, #15]
    break;
 800795a:	bf00      	nop
  }
  return  speed;
 800795c:	7bfb      	ldrb	r3, [r7, #15]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b084      	sub	sp, #16
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800797c:	4618      	mov	r0, r3
 800797e:	f7fa f8a5 	bl	8001acc <HAL_HCD_ResetPort>
 8007982:	4603      	mov	r3, r0
 8007984:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8007986:	7bfb      	ldrb	r3, [r7, #15]
 8007988:	4618      	mov	r0, r3
 800798a:	f000 f90f 	bl	8007bac <USBH_Get_USB_Status>
 800798e:	4603      	mov	r3, r0
 8007990:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007992:	7bbb      	ldrb	r3, [r7, #14]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	460b      	mov	r3, r1
 80079a6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079ae:	78fa      	ldrb	r2, [r7, #3]
 80079b0:	4611      	mov	r1, r2
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fa f8ad 	bl	8001b12 <HAL_HCD_HC_GetXferCount>
 80079b8:	4603      	mov	r3, r0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80079c2:	b590      	push	{r4, r7, lr}
 80079c4:	b089      	sub	sp, #36	; 0x24
 80079c6:	af04      	add	r7, sp, #16
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	4608      	mov	r0, r1
 80079cc:	4611      	mov	r1, r2
 80079ce:	461a      	mov	r2, r3
 80079d0:	4603      	mov	r3, r0
 80079d2:	70fb      	strb	r3, [r7, #3]
 80079d4:	460b      	mov	r3, r1
 80079d6:	70bb      	strb	r3, [r7, #2]
 80079d8:	4613      	mov	r3, r2
 80079da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079dc:	2300      	movs	r3, #0
 80079de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079e0:	2300      	movs	r3, #0
 80079e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80079ea:	787c      	ldrb	r4, [r7, #1]
 80079ec:	78ba      	ldrb	r2, [r7, #2]
 80079ee:	78f9      	ldrb	r1, [r7, #3]
 80079f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80079f2:	9302      	str	r3, [sp, #8]
 80079f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80079f8:	9301      	str	r3, [sp, #4]
 80079fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	4623      	mov	r3, r4
 8007a02:	f7f9 fcf2 	bl	80013ea <HAL_HCD_HC_Init>
 8007a06:	4603      	mov	r3, r0
 8007a08:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 f8cd 	bl	8007bac <USBH_Get_USB_Status>
 8007a12:	4603      	mov	r3, r0
 8007a14:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd90      	pop	{r4, r7, pc}

08007a20 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a3a:	78fa      	ldrb	r2, [r7, #3]
 8007a3c:	4611      	mov	r1, r2
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7f9 fd6b 	bl	800151a <HAL_HCD_HC_Halt>
 8007a44:	4603      	mov	r3, r0
 8007a46:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 f8ae 	bl	8007bac <USBH_Get_USB_Status>
 8007a50:	4603      	mov	r3, r0
 8007a52:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007a54:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007a5e:	b590      	push	{r4, r7, lr}
 8007a60:	b089      	sub	sp, #36	; 0x24
 8007a62:	af04      	add	r7, sp, #16
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	4608      	mov	r0, r1
 8007a68:	4611      	mov	r1, r2
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	70fb      	strb	r3, [r7, #3]
 8007a70:	460b      	mov	r3, r1
 8007a72:	70bb      	strb	r3, [r7, #2]
 8007a74:	4613      	mov	r3, r2
 8007a76:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007a86:	787c      	ldrb	r4, [r7, #1]
 8007a88:	78ba      	ldrb	r2, [r7, #2]
 8007a8a:	78f9      	ldrb	r1, [r7, #3]
 8007a8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a90:	9303      	str	r3, [sp, #12]
 8007a92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a94:	9302      	str	r3, [sp, #8]
 8007a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a98:	9301      	str	r3, [sp, #4]
 8007a9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	4623      	mov	r3, r4
 8007aa2:	f7f9 fd5d 	bl	8001560 <HAL_HCD_HC_SubmitRequest>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f000 f87d 	bl	8007bac <USBH_Get_USB_Status>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007ab6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd90      	pop	{r4, r7, pc}

08007ac0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ad2:	78fa      	ldrb	r2, [r7, #3]
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fa f806 	bl	8001ae8 <HAL_HCD_HC_GetURBState>
 8007adc:	4603      	mov	r3, r0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
	...

08007ae8 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	460b      	mov	r3, r1
 8007af2:	70fb      	strb	r3, [r7, #3]

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  if (phost->id == HOST_FS)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d10d      	bne.n	8007b1a <USBH_LL_DriverVBUS+0x32>
  {
    if (state == 0)
 8007afe:	78fb      	ldrb	r3, [r7, #3]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d105      	bne.n	8007b10 <USBH_LL_DriverVBUS+0x28>
    {
      /* Drive high Charge pump */
      /* ToDo: Add IOE driver control */
      /* USER CODE BEGIN DRIVE_HIGH_CHARGE_FOR_FS */
    	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8007b04:	2200      	movs	r2, #0
 8007b06:	2140      	movs	r1, #64	; 0x40
 8007b08:	4808      	ldr	r0, [pc, #32]	; (8007b2c <USBH_LL_DriverVBUS+0x44>)
 8007b0a:	f7f9 fbf3 	bl	80012f4 <HAL_GPIO_WritePin>
 8007b0e:	e004      	b.n	8007b1a <USBH_LL_DriverVBUS+0x32>
    else
    {
      /* Drive low Charge pump */
      /* ToDo: Add IOE driver control */
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */
    	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8007b10:	2201      	movs	r2, #1
 8007b12:	2140      	movs	r1, #64	; 0x40
 8007b14:	4805      	ldr	r0, [pc, #20]	; (8007b2c <USBH_LL_DriverVBUS+0x44>)
 8007b16:	f7f9 fbed 	bl	80012f4 <HAL_GPIO_WritePin>
      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8007b1a:	20c8      	movs	r0, #200	; 0xc8
 8007b1c:	f7f9 f924 	bl	8000d68 <HAL_Delay>
  return USBH_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	40021800 	.word	0x40021800

08007b30 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	70fb      	strb	r3, [r7, #3]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b46:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007b48:	78fa      	ldrb	r2, [r7, #3]
 8007b4a:	68f9      	ldr	r1, [r7, #12]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	00db      	lsls	r3, r3, #3
 8007b54:	440b      	add	r3, r1
 8007b56:	333b      	adds	r3, #59	; 0x3b
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00a      	beq.n	8007b74 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007b5e:	78fa      	ldrb	r2, [r7, #3]
 8007b60:	68f9      	ldr	r1, [r7, #12]
 8007b62:	4613      	mov	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	00db      	lsls	r3, r3, #3
 8007b6a:	440b      	add	r3, r1
 8007b6c:	3350      	adds	r3, #80	; 0x50
 8007b6e:	78ba      	ldrb	r2, [r7, #2]
 8007b70:	701a      	strb	r2, [r3, #0]
 8007b72:	e009      	b.n	8007b88 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007b74:	78fa      	ldrb	r2, [r7, #3]
 8007b76:	68f9      	ldr	r1, [r7, #12]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	00db      	lsls	r3, r3, #3
 8007b80:	440b      	add	r3, r1
 8007b82:	3351      	adds	r3, #81	; 0x51
 8007b84:	78ba      	ldrb	r2, [r7, #2]
 8007b86:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr

08007b96 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b082      	sub	sp, #8
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7f9 f8e2 	bl	8000d68 <HAL_Delay>
}
 8007ba4:	bf00      	nop
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007bba:	79fb      	ldrb	r3, [r7, #7]
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d817      	bhi.n	8007bf0 <USBH_Get_USB_Status+0x44>
 8007bc0:	a201      	add	r2, pc, #4	; (adr r2, 8007bc8 <USBH_Get_USB_Status+0x1c>)
 8007bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc6:	bf00      	nop
 8007bc8:	08007bd9 	.word	0x08007bd9
 8007bcc:	08007bdf 	.word	0x08007bdf
 8007bd0:	08007be5 	.word	0x08007be5
 8007bd4:	08007beb 	.word	0x08007beb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	73fb      	strb	r3, [r7, #15]
    break;
 8007bdc:	e00b      	b.n	8007bf6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007bde:	2302      	movs	r3, #2
 8007be0:	73fb      	strb	r3, [r7, #15]
    break;
 8007be2:	e008      	b.n	8007bf6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007be4:	2301      	movs	r3, #1
 8007be6:	73fb      	strb	r3, [r7, #15]
    break;
 8007be8:	e005      	b.n	8007bf6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007bea:	2302      	movs	r3, #2
 8007bec:	73fb      	strb	r3, [r7, #15]
    break;
 8007bee:	e002      	b.n	8007bf6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	73fb      	strb	r3, [r7, #15]
    break;
 8007bf4:	bf00      	nop
  }
  return usb_status;
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3714      	adds	r7, #20
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <__errno>:
 8007c04:	4b01      	ldr	r3, [pc, #4]	; (8007c0c <__errno+0x8>)
 8007c06:	6818      	ldr	r0, [r3, #0]
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	2000002c 	.word	0x2000002c

08007c10 <__libc_init_array>:
 8007c10:	b570      	push	{r4, r5, r6, lr}
 8007c12:	4e0d      	ldr	r6, [pc, #52]	; (8007c48 <__libc_init_array+0x38>)
 8007c14:	4c0d      	ldr	r4, [pc, #52]	; (8007c4c <__libc_init_array+0x3c>)
 8007c16:	1ba4      	subs	r4, r4, r6
 8007c18:	10a4      	asrs	r4, r4, #2
 8007c1a:	2500      	movs	r5, #0
 8007c1c:	42a5      	cmp	r5, r4
 8007c1e:	d109      	bne.n	8007c34 <__libc_init_array+0x24>
 8007c20:	4e0b      	ldr	r6, [pc, #44]	; (8007c50 <__libc_init_array+0x40>)
 8007c22:	4c0c      	ldr	r4, [pc, #48]	; (8007c54 <__libc_init_array+0x44>)
 8007c24:	f000 fc38 	bl	8008498 <_init>
 8007c28:	1ba4      	subs	r4, r4, r6
 8007c2a:	10a4      	asrs	r4, r4, #2
 8007c2c:	2500      	movs	r5, #0
 8007c2e:	42a5      	cmp	r5, r4
 8007c30:	d105      	bne.n	8007c3e <__libc_init_array+0x2e>
 8007c32:	bd70      	pop	{r4, r5, r6, pc}
 8007c34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c38:	4798      	blx	r3
 8007c3a:	3501      	adds	r5, #1
 8007c3c:	e7ee      	b.n	8007c1c <__libc_init_array+0xc>
 8007c3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c42:	4798      	blx	r3
 8007c44:	3501      	adds	r5, #1
 8007c46:	e7f2      	b.n	8007c2e <__libc_init_array+0x1e>
 8007c48:	08008530 	.word	0x08008530
 8007c4c:	08008530 	.word	0x08008530
 8007c50:	08008530 	.word	0x08008530
 8007c54:	08008534 	.word	0x08008534

08007c58 <malloc>:
 8007c58:	4b02      	ldr	r3, [pc, #8]	; (8007c64 <malloc+0xc>)
 8007c5a:	4601      	mov	r1, r0
 8007c5c:	6818      	ldr	r0, [r3, #0]
 8007c5e:	f000 b86d 	b.w	8007d3c <_malloc_r>
 8007c62:	bf00      	nop
 8007c64:	2000002c 	.word	0x2000002c

08007c68 <free>:
 8007c68:	4b02      	ldr	r3, [pc, #8]	; (8007c74 <free+0xc>)
 8007c6a:	4601      	mov	r1, r0
 8007c6c:	6818      	ldr	r0, [r3, #0]
 8007c6e:	f000 b817 	b.w	8007ca0 <_free_r>
 8007c72:	bf00      	nop
 8007c74:	2000002c 	.word	0x2000002c

08007c78 <memcpy>:
 8007c78:	b510      	push	{r4, lr}
 8007c7a:	1e43      	subs	r3, r0, #1
 8007c7c:	440a      	add	r2, r1
 8007c7e:	4291      	cmp	r1, r2
 8007c80:	d100      	bne.n	8007c84 <memcpy+0xc>
 8007c82:	bd10      	pop	{r4, pc}
 8007c84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c8c:	e7f7      	b.n	8007c7e <memcpy+0x6>

08007c8e <memset>:
 8007c8e:	4402      	add	r2, r0
 8007c90:	4603      	mov	r3, r0
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d100      	bne.n	8007c98 <memset+0xa>
 8007c96:	4770      	bx	lr
 8007c98:	f803 1b01 	strb.w	r1, [r3], #1
 8007c9c:	e7f9      	b.n	8007c92 <memset+0x4>
	...

08007ca0 <_free_r>:
 8007ca0:	b538      	push	{r3, r4, r5, lr}
 8007ca2:	4605      	mov	r5, r0
 8007ca4:	2900      	cmp	r1, #0
 8007ca6:	d045      	beq.n	8007d34 <_free_r+0x94>
 8007ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cac:	1f0c      	subs	r4, r1, #4
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	bfb8      	it	lt
 8007cb2:	18e4      	addlt	r4, r4, r3
 8007cb4:	f000 f8cc 	bl	8007e50 <__malloc_lock>
 8007cb8:	4a1f      	ldr	r2, [pc, #124]	; (8007d38 <_free_r+0x98>)
 8007cba:	6813      	ldr	r3, [r2, #0]
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	b933      	cbnz	r3, 8007cce <_free_r+0x2e>
 8007cc0:	6063      	str	r3, [r4, #4]
 8007cc2:	6014      	str	r4, [r2, #0]
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cca:	f000 b8c2 	b.w	8007e52 <__malloc_unlock>
 8007cce:	42a3      	cmp	r3, r4
 8007cd0:	d90c      	bls.n	8007cec <_free_r+0x4c>
 8007cd2:	6821      	ldr	r1, [r4, #0]
 8007cd4:	1862      	adds	r2, r4, r1
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	bf04      	itt	eq
 8007cda:	681a      	ldreq	r2, [r3, #0]
 8007cdc:	685b      	ldreq	r3, [r3, #4]
 8007cde:	6063      	str	r3, [r4, #4]
 8007ce0:	bf04      	itt	eq
 8007ce2:	1852      	addeq	r2, r2, r1
 8007ce4:	6022      	streq	r2, [r4, #0]
 8007ce6:	6004      	str	r4, [r0, #0]
 8007ce8:	e7ec      	b.n	8007cc4 <_free_r+0x24>
 8007cea:	4613      	mov	r3, r2
 8007cec:	685a      	ldr	r2, [r3, #4]
 8007cee:	b10a      	cbz	r2, 8007cf4 <_free_r+0x54>
 8007cf0:	42a2      	cmp	r2, r4
 8007cf2:	d9fa      	bls.n	8007cea <_free_r+0x4a>
 8007cf4:	6819      	ldr	r1, [r3, #0]
 8007cf6:	1858      	adds	r0, r3, r1
 8007cf8:	42a0      	cmp	r0, r4
 8007cfa:	d10b      	bne.n	8007d14 <_free_r+0x74>
 8007cfc:	6820      	ldr	r0, [r4, #0]
 8007cfe:	4401      	add	r1, r0
 8007d00:	1858      	adds	r0, r3, r1
 8007d02:	4282      	cmp	r2, r0
 8007d04:	6019      	str	r1, [r3, #0]
 8007d06:	d1dd      	bne.n	8007cc4 <_free_r+0x24>
 8007d08:	6810      	ldr	r0, [r2, #0]
 8007d0a:	6852      	ldr	r2, [r2, #4]
 8007d0c:	605a      	str	r2, [r3, #4]
 8007d0e:	4401      	add	r1, r0
 8007d10:	6019      	str	r1, [r3, #0]
 8007d12:	e7d7      	b.n	8007cc4 <_free_r+0x24>
 8007d14:	d902      	bls.n	8007d1c <_free_r+0x7c>
 8007d16:	230c      	movs	r3, #12
 8007d18:	602b      	str	r3, [r5, #0]
 8007d1a:	e7d3      	b.n	8007cc4 <_free_r+0x24>
 8007d1c:	6820      	ldr	r0, [r4, #0]
 8007d1e:	1821      	adds	r1, r4, r0
 8007d20:	428a      	cmp	r2, r1
 8007d22:	bf04      	itt	eq
 8007d24:	6811      	ldreq	r1, [r2, #0]
 8007d26:	6852      	ldreq	r2, [r2, #4]
 8007d28:	6062      	str	r2, [r4, #4]
 8007d2a:	bf04      	itt	eq
 8007d2c:	1809      	addeq	r1, r1, r0
 8007d2e:	6021      	streq	r1, [r4, #0]
 8007d30:	605c      	str	r4, [r3, #4]
 8007d32:	e7c7      	b.n	8007cc4 <_free_r+0x24>
 8007d34:	bd38      	pop	{r3, r4, r5, pc}
 8007d36:	bf00      	nop
 8007d38:	200000bc 	.word	0x200000bc

08007d3c <_malloc_r>:
 8007d3c:	b570      	push	{r4, r5, r6, lr}
 8007d3e:	1ccd      	adds	r5, r1, #3
 8007d40:	f025 0503 	bic.w	r5, r5, #3
 8007d44:	3508      	adds	r5, #8
 8007d46:	2d0c      	cmp	r5, #12
 8007d48:	bf38      	it	cc
 8007d4a:	250c      	movcc	r5, #12
 8007d4c:	2d00      	cmp	r5, #0
 8007d4e:	4606      	mov	r6, r0
 8007d50:	db01      	blt.n	8007d56 <_malloc_r+0x1a>
 8007d52:	42a9      	cmp	r1, r5
 8007d54:	d903      	bls.n	8007d5e <_malloc_r+0x22>
 8007d56:	230c      	movs	r3, #12
 8007d58:	6033      	str	r3, [r6, #0]
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	bd70      	pop	{r4, r5, r6, pc}
 8007d5e:	f000 f877 	bl	8007e50 <__malloc_lock>
 8007d62:	4a21      	ldr	r2, [pc, #132]	; (8007de8 <_malloc_r+0xac>)
 8007d64:	6814      	ldr	r4, [r2, #0]
 8007d66:	4621      	mov	r1, r4
 8007d68:	b991      	cbnz	r1, 8007d90 <_malloc_r+0x54>
 8007d6a:	4c20      	ldr	r4, [pc, #128]	; (8007dec <_malloc_r+0xb0>)
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	b91b      	cbnz	r3, 8007d78 <_malloc_r+0x3c>
 8007d70:	4630      	mov	r0, r6
 8007d72:	f000 f83d 	bl	8007df0 <_sbrk_r>
 8007d76:	6020      	str	r0, [r4, #0]
 8007d78:	4629      	mov	r1, r5
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	f000 f838 	bl	8007df0 <_sbrk_r>
 8007d80:	1c43      	adds	r3, r0, #1
 8007d82:	d124      	bne.n	8007dce <_malloc_r+0x92>
 8007d84:	230c      	movs	r3, #12
 8007d86:	6033      	str	r3, [r6, #0]
 8007d88:	4630      	mov	r0, r6
 8007d8a:	f000 f862 	bl	8007e52 <__malloc_unlock>
 8007d8e:	e7e4      	b.n	8007d5a <_malloc_r+0x1e>
 8007d90:	680b      	ldr	r3, [r1, #0]
 8007d92:	1b5b      	subs	r3, r3, r5
 8007d94:	d418      	bmi.n	8007dc8 <_malloc_r+0x8c>
 8007d96:	2b0b      	cmp	r3, #11
 8007d98:	d90f      	bls.n	8007dba <_malloc_r+0x7e>
 8007d9a:	600b      	str	r3, [r1, #0]
 8007d9c:	50cd      	str	r5, [r1, r3]
 8007d9e:	18cc      	adds	r4, r1, r3
 8007da0:	4630      	mov	r0, r6
 8007da2:	f000 f856 	bl	8007e52 <__malloc_unlock>
 8007da6:	f104 000b 	add.w	r0, r4, #11
 8007daa:	1d23      	adds	r3, r4, #4
 8007dac:	f020 0007 	bic.w	r0, r0, #7
 8007db0:	1ac3      	subs	r3, r0, r3
 8007db2:	d0d3      	beq.n	8007d5c <_malloc_r+0x20>
 8007db4:	425a      	negs	r2, r3
 8007db6:	50e2      	str	r2, [r4, r3]
 8007db8:	e7d0      	b.n	8007d5c <_malloc_r+0x20>
 8007dba:	428c      	cmp	r4, r1
 8007dbc:	684b      	ldr	r3, [r1, #4]
 8007dbe:	bf16      	itet	ne
 8007dc0:	6063      	strne	r3, [r4, #4]
 8007dc2:	6013      	streq	r3, [r2, #0]
 8007dc4:	460c      	movne	r4, r1
 8007dc6:	e7eb      	b.n	8007da0 <_malloc_r+0x64>
 8007dc8:	460c      	mov	r4, r1
 8007dca:	6849      	ldr	r1, [r1, #4]
 8007dcc:	e7cc      	b.n	8007d68 <_malloc_r+0x2c>
 8007dce:	1cc4      	adds	r4, r0, #3
 8007dd0:	f024 0403 	bic.w	r4, r4, #3
 8007dd4:	42a0      	cmp	r0, r4
 8007dd6:	d005      	beq.n	8007de4 <_malloc_r+0xa8>
 8007dd8:	1a21      	subs	r1, r4, r0
 8007dda:	4630      	mov	r0, r6
 8007ddc:	f000 f808 	bl	8007df0 <_sbrk_r>
 8007de0:	3001      	adds	r0, #1
 8007de2:	d0cf      	beq.n	8007d84 <_malloc_r+0x48>
 8007de4:	6025      	str	r5, [r4, #0]
 8007de6:	e7db      	b.n	8007da0 <_malloc_r+0x64>
 8007de8:	200000bc 	.word	0x200000bc
 8007dec:	200000c0 	.word	0x200000c0

08007df0 <_sbrk_r>:
 8007df0:	b538      	push	{r3, r4, r5, lr}
 8007df2:	4c06      	ldr	r4, [pc, #24]	; (8007e0c <_sbrk_r+0x1c>)
 8007df4:	2300      	movs	r3, #0
 8007df6:	4605      	mov	r5, r0
 8007df8:	4608      	mov	r0, r1
 8007dfa:	6023      	str	r3, [r4, #0]
 8007dfc:	f7f8 fed6 	bl	8000bac <_sbrk>
 8007e00:	1c43      	adds	r3, r0, #1
 8007e02:	d102      	bne.n	8007e0a <_sbrk_r+0x1a>
 8007e04:	6823      	ldr	r3, [r4, #0]
 8007e06:	b103      	cbz	r3, 8007e0a <_sbrk_r+0x1a>
 8007e08:	602b      	str	r3, [r5, #0]
 8007e0a:	bd38      	pop	{r3, r4, r5, pc}
 8007e0c:	20000bc4 	.word	0x20000bc4

08007e10 <siprintf>:
 8007e10:	b40e      	push	{r1, r2, r3}
 8007e12:	b500      	push	{lr}
 8007e14:	b09c      	sub	sp, #112	; 0x70
 8007e16:	ab1d      	add	r3, sp, #116	; 0x74
 8007e18:	9002      	str	r0, [sp, #8]
 8007e1a:	9006      	str	r0, [sp, #24]
 8007e1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e20:	4809      	ldr	r0, [pc, #36]	; (8007e48 <siprintf+0x38>)
 8007e22:	9107      	str	r1, [sp, #28]
 8007e24:	9104      	str	r1, [sp, #16]
 8007e26:	4909      	ldr	r1, [pc, #36]	; (8007e4c <siprintf+0x3c>)
 8007e28:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e2c:	9105      	str	r1, [sp, #20]
 8007e2e:	6800      	ldr	r0, [r0, #0]
 8007e30:	9301      	str	r3, [sp, #4]
 8007e32:	a902      	add	r1, sp, #8
 8007e34:	f000 f868 	bl	8007f08 <_svfiprintf_r>
 8007e38:	9b02      	ldr	r3, [sp, #8]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	701a      	strb	r2, [r3, #0]
 8007e3e:	b01c      	add	sp, #112	; 0x70
 8007e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e44:	b003      	add	sp, #12
 8007e46:	4770      	bx	lr
 8007e48:	2000002c 	.word	0x2000002c
 8007e4c:	ffff0208 	.word	0xffff0208

08007e50 <__malloc_lock>:
 8007e50:	4770      	bx	lr

08007e52 <__malloc_unlock>:
 8007e52:	4770      	bx	lr

08007e54 <__ssputs_r>:
 8007e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e58:	688e      	ldr	r6, [r1, #8]
 8007e5a:	429e      	cmp	r6, r3
 8007e5c:	4682      	mov	sl, r0
 8007e5e:	460c      	mov	r4, r1
 8007e60:	4690      	mov	r8, r2
 8007e62:	4699      	mov	r9, r3
 8007e64:	d837      	bhi.n	8007ed6 <__ssputs_r+0x82>
 8007e66:	898a      	ldrh	r2, [r1, #12]
 8007e68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e6c:	d031      	beq.n	8007ed2 <__ssputs_r+0x7e>
 8007e6e:	6825      	ldr	r5, [r4, #0]
 8007e70:	6909      	ldr	r1, [r1, #16]
 8007e72:	1a6f      	subs	r7, r5, r1
 8007e74:	6965      	ldr	r5, [r4, #20]
 8007e76:	2302      	movs	r3, #2
 8007e78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e7c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007e80:	f109 0301 	add.w	r3, r9, #1
 8007e84:	443b      	add	r3, r7
 8007e86:	429d      	cmp	r5, r3
 8007e88:	bf38      	it	cc
 8007e8a:	461d      	movcc	r5, r3
 8007e8c:	0553      	lsls	r3, r2, #21
 8007e8e:	d530      	bpl.n	8007ef2 <__ssputs_r+0x9e>
 8007e90:	4629      	mov	r1, r5
 8007e92:	f7ff ff53 	bl	8007d3c <_malloc_r>
 8007e96:	4606      	mov	r6, r0
 8007e98:	b950      	cbnz	r0, 8007eb0 <__ssputs_r+0x5c>
 8007e9a:	230c      	movs	r3, #12
 8007e9c:	f8ca 3000 	str.w	r3, [sl]
 8007ea0:	89a3      	ldrh	r3, [r4, #12]
 8007ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ea6:	81a3      	strh	r3, [r4, #12]
 8007ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8007eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eb0:	463a      	mov	r2, r7
 8007eb2:	6921      	ldr	r1, [r4, #16]
 8007eb4:	f7ff fee0 	bl	8007c78 <memcpy>
 8007eb8:	89a3      	ldrh	r3, [r4, #12]
 8007eba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec2:	81a3      	strh	r3, [r4, #12]
 8007ec4:	6126      	str	r6, [r4, #16]
 8007ec6:	6165      	str	r5, [r4, #20]
 8007ec8:	443e      	add	r6, r7
 8007eca:	1bed      	subs	r5, r5, r7
 8007ecc:	6026      	str	r6, [r4, #0]
 8007ece:	60a5      	str	r5, [r4, #8]
 8007ed0:	464e      	mov	r6, r9
 8007ed2:	454e      	cmp	r6, r9
 8007ed4:	d900      	bls.n	8007ed8 <__ssputs_r+0x84>
 8007ed6:	464e      	mov	r6, r9
 8007ed8:	4632      	mov	r2, r6
 8007eda:	4641      	mov	r1, r8
 8007edc:	6820      	ldr	r0, [r4, #0]
 8007ede:	f000 fa93 	bl	8008408 <memmove>
 8007ee2:	68a3      	ldr	r3, [r4, #8]
 8007ee4:	1b9b      	subs	r3, r3, r6
 8007ee6:	60a3      	str	r3, [r4, #8]
 8007ee8:	6823      	ldr	r3, [r4, #0]
 8007eea:	441e      	add	r6, r3
 8007eec:	6026      	str	r6, [r4, #0]
 8007eee:	2000      	movs	r0, #0
 8007ef0:	e7dc      	b.n	8007eac <__ssputs_r+0x58>
 8007ef2:	462a      	mov	r2, r5
 8007ef4:	f000 faa1 	bl	800843a <_realloc_r>
 8007ef8:	4606      	mov	r6, r0
 8007efa:	2800      	cmp	r0, #0
 8007efc:	d1e2      	bne.n	8007ec4 <__ssputs_r+0x70>
 8007efe:	6921      	ldr	r1, [r4, #16]
 8007f00:	4650      	mov	r0, sl
 8007f02:	f7ff fecd 	bl	8007ca0 <_free_r>
 8007f06:	e7c8      	b.n	8007e9a <__ssputs_r+0x46>

08007f08 <_svfiprintf_r>:
 8007f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0c:	461d      	mov	r5, r3
 8007f0e:	898b      	ldrh	r3, [r1, #12]
 8007f10:	061f      	lsls	r7, r3, #24
 8007f12:	b09d      	sub	sp, #116	; 0x74
 8007f14:	4680      	mov	r8, r0
 8007f16:	460c      	mov	r4, r1
 8007f18:	4616      	mov	r6, r2
 8007f1a:	d50f      	bpl.n	8007f3c <_svfiprintf_r+0x34>
 8007f1c:	690b      	ldr	r3, [r1, #16]
 8007f1e:	b96b      	cbnz	r3, 8007f3c <_svfiprintf_r+0x34>
 8007f20:	2140      	movs	r1, #64	; 0x40
 8007f22:	f7ff ff0b 	bl	8007d3c <_malloc_r>
 8007f26:	6020      	str	r0, [r4, #0]
 8007f28:	6120      	str	r0, [r4, #16]
 8007f2a:	b928      	cbnz	r0, 8007f38 <_svfiprintf_r+0x30>
 8007f2c:	230c      	movs	r3, #12
 8007f2e:	f8c8 3000 	str.w	r3, [r8]
 8007f32:	f04f 30ff 	mov.w	r0, #4294967295
 8007f36:	e0c8      	b.n	80080ca <_svfiprintf_r+0x1c2>
 8007f38:	2340      	movs	r3, #64	; 0x40
 8007f3a:	6163      	str	r3, [r4, #20]
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f40:	2320      	movs	r3, #32
 8007f42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f46:	2330      	movs	r3, #48	; 0x30
 8007f48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f4c:	9503      	str	r5, [sp, #12]
 8007f4e:	f04f 0b01 	mov.w	fp, #1
 8007f52:	4637      	mov	r7, r6
 8007f54:	463d      	mov	r5, r7
 8007f56:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007f5a:	b10b      	cbz	r3, 8007f60 <_svfiprintf_r+0x58>
 8007f5c:	2b25      	cmp	r3, #37	; 0x25
 8007f5e:	d13e      	bne.n	8007fde <_svfiprintf_r+0xd6>
 8007f60:	ebb7 0a06 	subs.w	sl, r7, r6
 8007f64:	d00b      	beq.n	8007f7e <_svfiprintf_r+0x76>
 8007f66:	4653      	mov	r3, sl
 8007f68:	4632      	mov	r2, r6
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	4640      	mov	r0, r8
 8007f6e:	f7ff ff71 	bl	8007e54 <__ssputs_r>
 8007f72:	3001      	adds	r0, #1
 8007f74:	f000 80a4 	beq.w	80080c0 <_svfiprintf_r+0x1b8>
 8007f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f7a:	4453      	add	r3, sl
 8007f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f7e:	783b      	ldrb	r3, [r7, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 809d 	beq.w	80080c0 <_svfiprintf_r+0x1b8>
 8007f86:	2300      	movs	r3, #0
 8007f88:	f04f 32ff 	mov.w	r2, #4294967295
 8007f8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f90:	9304      	str	r3, [sp, #16]
 8007f92:	9307      	str	r3, [sp, #28]
 8007f94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f98:	931a      	str	r3, [sp, #104]	; 0x68
 8007f9a:	462f      	mov	r7, r5
 8007f9c:	2205      	movs	r2, #5
 8007f9e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007fa2:	4850      	ldr	r0, [pc, #320]	; (80080e4 <_svfiprintf_r+0x1dc>)
 8007fa4:	f7f8 f93c 	bl	8000220 <memchr>
 8007fa8:	9b04      	ldr	r3, [sp, #16]
 8007faa:	b9d0      	cbnz	r0, 8007fe2 <_svfiprintf_r+0xda>
 8007fac:	06d9      	lsls	r1, r3, #27
 8007fae:	bf44      	itt	mi
 8007fb0:	2220      	movmi	r2, #32
 8007fb2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007fb6:	071a      	lsls	r2, r3, #28
 8007fb8:	bf44      	itt	mi
 8007fba:	222b      	movmi	r2, #43	; 0x2b
 8007fbc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007fc0:	782a      	ldrb	r2, [r5, #0]
 8007fc2:	2a2a      	cmp	r2, #42	; 0x2a
 8007fc4:	d015      	beq.n	8007ff2 <_svfiprintf_r+0xea>
 8007fc6:	9a07      	ldr	r2, [sp, #28]
 8007fc8:	462f      	mov	r7, r5
 8007fca:	2000      	movs	r0, #0
 8007fcc:	250a      	movs	r5, #10
 8007fce:	4639      	mov	r1, r7
 8007fd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fd4:	3b30      	subs	r3, #48	; 0x30
 8007fd6:	2b09      	cmp	r3, #9
 8007fd8:	d94d      	bls.n	8008076 <_svfiprintf_r+0x16e>
 8007fda:	b1b8      	cbz	r0, 800800c <_svfiprintf_r+0x104>
 8007fdc:	e00f      	b.n	8007ffe <_svfiprintf_r+0xf6>
 8007fde:	462f      	mov	r7, r5
 8007fe0:	e7b8      	b.n	8007f54 <_svfiprintf_r+0x4c>
 8007fe2:	4a40      	ldr	r2, [pc, #256]	; (80080e4 <_svfiprintf_r+0x1dc>)
 8007fe4:	1a80      	subs	r0, r0, r2
 8007fe6:	fa0b f000 	lsl.w	r0, fp, r0
 8007fea:	4318      	orrs	r0, r3
 8007fec:	9004      	str	r0, [sp, #16]
 8007fee:	463d      	mov	r5, r7
 8007ff0:	e7d3      	b.n	8007f9a <_svfiprintf_r+0x92>
 8007ff2:	9a03      	ldr	r2, [sp, #12]
 8007ff4:	1d11      	adds	r1, r2, #4
 8007ff6:	6812      	ldr	r2, [r2, #0]
 8007ff8:	9103      	str	r1, [sp, #12]
 8007ffa:	2a00      	cmp	r2, #0
 8007ffc:	db01      	blt.n	8008002 <_svfiprintf_r+0xfa>
 8007ffe:	9207      	str	r2, [sp, #28]
 8008000:	e004      	b.n	800800c <_svfiprintf_r+0x104>
 8008002:	4252      	negs	r2, r2
 8008004:	f043 0302 	orr.w	r3, r3, #2
 8008008:	9207      	str	r2, [sp, #28]
 800800a:	9304      	str	r3, [sp, #16]
 800800c:	783b      	ldrb	r3, [r7, #0]
 800800e:	2b2e      	cmp	r3, #46	; 0x2e
 8008010:	d10c      	bne.n	800802c <_svfiprintf_r+0x124>
 8008012:	787b      	ldrb	r3, [r7, #1]
 8008014:	2b2a      	cmp	r3, #42	; 0x2a
 8008016:	d133      	bne.n	8008080 <_svfiprintf_r+0x178>
 8008018:	9b03      	ldr	r3, [sp, #12]
 800801a:	1d1a      	adds	r2, r3, #4
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	9203      	str	r2, [sp, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	bfb8      	it	lt
 8008024:	f04f 33ff 	movlt.w	r3, #4294967295
 8008028:	3702      	adds	r7, #2
 800802a:	9305      	str	r3, [sp, #20]
 800802c:	4d2e      	ldr	r5, [pc, #184]	; (80080e8 <_svfiprintf_r+0x1e0>)
 800802e:	7839      	ldrb	r1, [r7, #0]
 8008030:	2203      	movs	r2, #3
 8008032:	4628      	mov	r0, r5
 8008034:	f7f8 f8f4 	bl	8000220 <memchr>
 8008038:	b138      	cbz	r0, 800804a <_svfiprintf_r+0x142>
 800803a:	2340      	movs	r3, #64	; 0x40
 800803c:	1b40      	subs	r0, r0, r5
 800803e:	fa03 f000 	lsl.w	r0, r3, r0
 8008042:	9b04      	ldr	r3, [sp, #16]
 8008044:	4303      	orrs	r3, r0
 8008046:	3701      	adds	r7, #1
 8008048:	9304      	str	r3, [sp, #16]
 800804a:	7839      	ldrb	r1, [r7, #0]
 800804c:	4827      	ldr	r0, [pc, #156]	; (80080ec <_svfiprintf_r+0x1e4>)
 800804e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008052:	2206      	movs	r2, #6
 8008054:	1c7e      	adds	r6, r7, #1
 8008056:	f7f8 f8e3 	bl	8000220 <memchr>
 800805a:	2800      	cmp	r0, #0
 800805c:	d038      	beq.n	80080d0 <_svfiprintf_r+0x1c8>
 800805e:	4b24      	ldr	r3, [pc, #144]	; (80080f0 <_svfiprintf_r+0x1e8>)
 8008060:	bb13      	cbnz	r3, 80080a8 <_svfiprintf_r+0x1a0>
 8008062:	9b03      	ldr	r3, [sp, #12]
 8008064:	3307      	adds	r3, #7
 8008066:	f023 0307 	bic.w	r3, r3, #7
 800806a:	3308      	adds	r3, #8
 800806c:	9303      	str	r3, [sp, #12]
 800806e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008070:	444b      	add	r3, r9
 8008072:	9309      	str	r3, [sp, #36]	; 0x24
 8008074:	e76d      	b.n	8007f52 <_svfiprintf_r+0x4a>
 8008076:	fb05 3202 	mla	r2, r5, r2, r3
 800807a:	2001      	movs	r0, #1
 800807c:	460f      	mov	r7, r1
 800807e:	e7a6      	b.n	8007fce <_svfiprintf_r+0xc6>
 8008080:	2300      	movs	r3, #0
 8008082:	3701      	adds	r7, #1
 8008084:	9305      	str	r3, [sp, #20]
 8008086:	4619      	mov	r1, r3
 8008088:	250a      	movs	r5, #10
 800808a:	4638      	mov	r0, r7
 800808c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008090:	3a30      	subs	r2, #48	; 0x30
 8008092:	2a09      	cmp	r2, #9
 8008094:	d903      	bls.n	800809e <_svfiprintf_r+0x196>
 8008096:	2b00      	cmp	r3, #0
 8008098:	d0c8      	beq.n	800802c <_svfiprintf_r+0x124>
 800809a:	9105      	str	r1, [sp, #20]
 800809c:	e7c6      	b.n	800802c <_svfiprintf_r+0x124>
 800809e:	fb05 2101 	mla	r1, r5, r1, r2
 80080a2:	2301      	movs	r3, #1
 80080a4:	4607      	mov	r7, r0
 80080a6:	e7f0      	b.n	800808a <_svfiprintf_r+0x182>
 80080a8:	ab03      	add	r3, sp, #12
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	4622      	mov	r2, r4
 80080ae:	4b11      	ldr	r3, [pc, #68]	; (80080f4 <_svfiprintf_r+0x1ec>)
 80080b0:	a904      	add	r1, sp, #16
 80080b2:	4640      	mov	r0, r8
 80080b4:	f3af 8000 	nop.w
 80080b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80080bc:	4681      	mov	r9, r0
 80080be:	d1d6      	bne.n	800806e <_svfiprintf_r+0x166>
 80080c0:	89a3      	ldrh	r3, [r4, #12]
 80080c2:	065b      	lsls	r3, r3, #25
 80080c4:	f53f af35 	bmi.w	8007f32 <_svfiprintf_r+0x2a>
 80080c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080ca:	b01d      	add	sp, #116	; 0x74
 80080cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d0:	ab03      	add	r3, sp, #12
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	4622      	mov	r2, r4
 80080d6:	4b07      	ldr	r3, [pc, #28]	; (80080f4 <_svfiprintf_r+0x1ec>)
 80080d8:	a904      	add	r1, sp, #16
 80080da:	4640      	mov	r0, r8
 80080dc:	f000 f882 	bl	80081e4 <_printf_i>
 80080e0:	e7ea      	b.n	80080b8 <_svfiprintf_r+0x1b0>
 80080e2:	bf00      	nop
 80080e4:	080084f4 	.word	0x080084f4
 80080e8:	080084fa 	.word	0x080084fa
 80080ec:	080084fe 	.word	0x080084fe
 80080f0:	00000000 	.word	0x00000000
 80080f4:	08007e55 	.word	0x08007e55

080080f8 <_printf_common>:
 80080f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080fc:	4691      	mov	r9, r2
 80080fe:	461f      	mov	r7, r3
 8008100:	688a      	ldr	r2, [r1, #8]
 8008102:	690b      	ldr	r3, [r1, #16]
 8008104:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008108:	4293      	cmp	r3, r2
 800810a:	bfb8      	it	lt
 800810c:	4613      	movlt	r3, r2
 800810e:	f8c9 3000 	str.w	r3, [r9]
 8008112:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008116:	4606      	mov	r6, r0
 8008118:	460c      	mov	r4, r1
 800811a:	b112      	cbz	r2, 8008122 <_printf_common+0x2a>
 800811c:	3301      	adds	r3, #1
 800811e:	f8c9 3000 	str.w	r3, [r9]
 8008122:	6823      	ldr	r3, [r4, #0]
 8008124:	0699      	lsls	r1, r3, #26
 8008126:	bf42      	ittt	mi
 8008128:	f8d9 3000 	ldrmi.w	r3, [r9]
 800812c:	3302      	addmi	r3, #2
 800812e:	f8c9 3000 	strmi.w	r3, [r9]
 8008132:	6825      	ldr	r5, [r4, #0]
 8008134:	f015 0506 	ands.w	r5, r5, #6
 8008138:	d107      	bne.n	800814a <_printf_common+0x52>
 800813a:	f104 0a19 	add.w	sl, r4, #25
 800813e:	68e3      	ldr	r3, [r4, #12]
 8008140:	f8d9 2000 	ldr.w	r2, [r9]
 8008144:	1a9b      	subs	r3, r3, r2
 8008146:	42ab      	cmp	r3, r5
 8008148:	dc28      	bgt.n	800819c <_printf_common+0xa4>
 800814a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800814e:	6822      	ldr	r2, [r4, #0]
 8008150:	3300      	adds	r3, #0
 8008152:	bf18      	it	ne
 8008154:	2301      	movne	r3, #1
 8008156:	0692      	lsls	r2, r2, #26
 8008158:	d42d      	bmi.n	80081b6 <_printf_common+0xbe>
 800815a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800815e:	4639      	mov	r1, r7
 8008160:	4630      	mov	r0, r6
 8008162:	47c0      	blx	r8
 8008164:	3001      	adds	r0, #1
 8008166:	d020      	beq.n	80081aa <_printf_common+0xb2>
 8008168:	6823      	ldr	r3, [r4, #0]
 800816a:	68e5      	ldr	r5, [r4, #12]
 800816c:	f8d9 2000 	ldr.w	r2, [r9]
 8008170:	f003 0306 	and.w	r3, r3, #6
 8008174:	2b04      	cmp	r3, #4
 8008176:	bf08      	it	eq
 8008178:	1aad      	subeq	r5, r5, r2
 800817a:	68a3      	ldr	r3, [r4, #8]
 800817c:	6922      	ldr	r2, [r4, #16]
 800817e:	bf0c      	ite	eq
 8008180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008184:	2500      	movne	r5, #0
 8008186:	4293      	cmp	r3, r2
 8008188:	bfc4      	itt	gt
 800818a:	1a9b      	subgt	r3, r3, r2
 800818c:	18ed      	addgt	r5, r5, r3
 800818e:	f04f 0900 	mov.w	r9, #0
 8008192:	341a      	adds	r4, #26
 8008194:	454d      	cmp	r5, r9
 8008196:	d11a      	bne.n	80081ce <_printf_common+0xd6>
 8008198:	2000      	movs	r0, #0
 800819a:	e008      	b.n	80081ae <_printf_common+0xb6>
 800819c:	2301      	movs	r3, #1
 800819e:	4652      	mov	r2, sl
 80081a0:	4639      	mov	r1, r7
 80081a2:	4630      	mov	r0, r6
 80081a4:	47c0      	blx	r8
 80081a6:	3001      	adds	r0, #1
 80081a8:	d103      	bne.n	80081b2 <_printf_common+0xba>
 80081aa:	f04f 30ff 	mov.w	r0, #4294967295
 80081ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b2:	3501      	adds	r5, #1
 80081b4:	e7c3      	b.n	800813e <_printf_common+0x46>
 80081b6:	18e1      	adds	r1, r4, r3
 80081b8:	1c5a      	adds	r2, r3, #1
 80081ba:	2030      	movs	r0, #48	; 0x30
 80081bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081c0:	4422      	add	r2, r4
 80081c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081ca:	3302      	adds	r3, #2
 80081cc:	e7c5      	b.n	800815a <_printf_common+0x62>
 80081ce:	2301      	movs	r3, #1
 80081d0:	4622      	mov	r2, r4
 80081d2:	4639      	mov	r1, r7
 80081d4:	4630      	mov	r0, r6
 80081d6:	47c0      	blx	r8
 80081d8:	3001      	adds	r0, #1
 80081da:	d0e6      	beq.n	80081aa <_printf_common+0xb2>
 80081dc:	f109 0901 	add.w	r9, r9, #1
 80081e0:	e7d8      	b.n	8008194 <_printf_common+0x9c>
	...

080081e4 <_printf_i>:
 80081e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80081ec:	460c      	mov	r4, r1
 80081ee:	7e09      	ldrb	r1, [r1, #24]
 80081f0:	b085      	sub	sp, #20
 80081f2:	296e      	cmp	r1, #110	; 0x6e
 80081f4:	4617      	mov	r7, r2
 80081f6:	4606      	mov	r6, r0
 80081f8:	4698      	mov	r8, r3
 80081fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081fc:	f000 80b3 	beq.w	8008366 <_printf_i+0x182>
 8008200:	d822      	bhi.n	8008248 <_printf_i+0x64>
 8008202:	2963      	cmp	r1, #99	; 0x63
 8008204:	d036      	beq.n	8008274 <_printf_i+0x90>
 8008206:	d80a      	bhi.n	800821e <_printf_i+0x3a>
 8008208:	2900      	cmp	r1, #0
 800820a:	f000 80b9 	beq.w	8008380 <_printf_i+0x19c>
 800820e:	2958      	cmp	r1, #88	; 0x58
 8008210:	f000 8083 	beq.w	800831a <_printf_i+0x136>
 8008214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008218:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800821c:	e032      	b.n	8008284 <_printf_i+0xa0>
 800821e:	2964      	cmp	r1, #100	; 0x64
 8008220:	d001      	beq.n	8008226 <_printf_i+0x42>
 8008222:	2969      	cmp	r1, #105	; 0x69
 8008224:	d1f6      	bne.n	8008214 <_printf_i+0x30>
 8008226:	6820      	ldr	r0, [r4, #0]
 8008228:	6813      	ldr	r3, [r2, #0]
 800822a:	0605      	lsls	r5, r0, #24
 800822c:	f103 0104 	add.w	r1, r3, #4
 8008230:	d52a      	bpl.n	8008288 <_printf_i+0xa4>
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6011      	str	r1, [r2, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	da03      	bge.n	8008242 <_printf_i+0x5e>
 800823a:	222d      	movs	r2, #45	; 0x2d
 800823c:	425b      	negs	r3, r3
 800823e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008242:	486f      	ldr	r0, [pc, #444]	; (8008400 <_printf_i+0x21c>)
 8008244:	220a      	movs	r2, #10
 8008246:	e039      	b.n	80082bc <_printf_i+0xd8>
 8008248:	2973      	cmp	r1, #115	; 0x73
 800824a:	f000 809d 	beq.w	8008388 <_printf_i+0x1a4>
 800824e:	d808      	bhi.n	8008262 <_printf_i+0x7e>
 8008250:	296f      	cmp	r1, #111	; 0x6f
 8008252:	d020      	beq.n	8008296 <_printf_i+0xb2>
 8008254:	2970      	cmp	r1, #112	; 0x70
 8008256:	d1dd      	bne.n	8008214 <_printf_i+0x30>
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	f043 0320 	orr.w	r3, r3, #32
 800825e:	6023      	str	r3, [r4, #0]
 8008260:	e003      	b.n	800826a <_printf_i+0x86>
 8008262:	2975      	cmp	r1, #117	; 0x75
 8008264:	d017      	beq.n	8008296 <_printf_i+0xb2>
 8008266:	2978      	cmp	r1, #120	; 0x78
 8008268:	d1d4      	bne.n	8008214 <_printf_i+0x30>
 800826a:	2378      	movs	r3, #120	; 0x78
 800826c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008270:	4864      	ldr	r0, [pc, #400]	; (8008404 <_printf_i+0x220>)
 8008272:	e055      	b.n	8008320 <_printf_i+0x13c>
 8008274:	6813      	ldr	r3, [r2, #0]
 8008276:	1d19      	adds	r1, r3, #4
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6011      	str	r1, [r2, #0]
 800827c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008284:	2301      	movs	r3, #1
 8008286:	e08c      	b.n	80083a2 <_printf_i+0x1be>
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	6011      	str	r1, [r2, #0]
 800828c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008290:	bf18      	it	ne
 8008292:	b21b      	sxthne	r3, r3
 8008294:	e7cf      	b.n	8008236 <_printf_i+0x52>
 8008296:	6813      	ldr	r3, [r2, #0]
 8008298:	6825      	ldr	r5, [r4, #0]
 800829a:	1d18      	adds	r0, r3, #4
 800829c:	6010      	str	r0, [r2, #0]
 800829e:	0628      	lsls	r0, r5, #24
 80082a0:	d501      	bpl.n	80082a6 <_printf_i+0xc2>
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	e002      	b.n	80082ac <_printf_i+0xc8>
 80082a6:	0668      	lsls	r0, r5, #25
 80082a8:	d5fb      	bpl.n	80082a2 <_printf_i+0xbe>
 80082aa:	881b      	ldrh	r3, [r3, #0]
 80082ac:	4854      	ldr	r0, [pc, #336]	; (8008400 <_printf_i+0x21c>)
 80082ae:	296f      	cmp	r1, #111	; 0x6f
 80082b0:	bf14      	ite	ne
 80082b2:	220a      	movne	r2, #10
 80082b4:	2208      	moveq	r2, #8
 80082b6:	2100      	movs	r1, #0
 80082b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082bc:	6865      	ldr	r5, [r4, #4]
 80082be:	60a5      	str	r5, [r4, #8]
 80082c0:	2d00      	cmp	r5, #0
 80082c2:	f2c0 8095 	blt.w	80083f0 <_printf_i+0x20c>
 80082c6:	6821      	ldr	r1, [r4, #0]
 80082c8:	f021 0104 	bic.w	r1, r1, #4
 80082cc:	6021      	str	r1, [r4, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d13d      	bne.n	800834e <_printf_i+0x16a>
 80082d2:	2d00      	cmp	r5, #0
 80082d4:	f040 808e 	bne.w	80083f4 <_printf_i+0x210>
 80082d8:	4665      	mov	r5, ip
 80082da:	2a08      	cmp	r2, #8
 80082dc:	d10b      	bne.n	80082f6 <_printf_i+0x112>
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	07db      	lsls	r3, r3, #31
 80082e2:	d508      	bpl.n	80082f6 <_printf_i+0x112>
 80082e4:	6923      	ldr	r3, [r4, #16]
 80082e6:	6862      	ldr	r2, [r4, #4]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	bfde      	ittt	le
 80082ec:	2330      	movle	r3, #48	; 0x30
 80082ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082f6:	ebac 0305 	sub.w	r3, ip, r5
 80082fa:	6123      	str	r3, [r4, #16]
 80082fc:	f8cd 8000 	str.w	r8, [sp]
 8008300:	463b      	mov	r3, r7
 8008302:	aa03      	add	r2, sp, #12
 8008304:	4621      	mov	r1, r4
 8008306:	4630      	mov	r0, r6
 8008308:	f7ff fef6 	bl	80080f8 <_printf_common>
 800830c:	3001      	adds	r0, #1
 800830e:	d14d      	bne.n	80083ac <_printf_i+0x1c8>
 8008310:	f04f 30ff 	mov.w	r0, #4294967295
 8008314:	b005      	add	sp, #20
 8008316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800831a:	4839      	ldr	r0, [pc, #228]	; (8008400 <_printf_i+0x21c>)
 800831c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008320:	6813      	ldr	r3, [r2, #0]
 8008322:	6821      	ldr	r1, [r4, #0]
 8008324:	1d1d      	adds	r5, r3, #4
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6015      	str	r5, [r2, #0]
 800832a:	060a      	lsls	r2, r1, #24
 800832c:	d50b      	bpl.n	8008346 <_printf_i+0x162>
 800832e:	07ca      	lsls	r2, r1, #31
 8008330:	bf44      	itt	mi
 8008332:	f041 0120 	orrmi.w	r1, r1, #32
 8008336:	6021      	strmi	r1, [r4, #0]
 8008338:	b91b      	cbnz	r3, 8008342 <_printf_i+0x15e>
 800833a:	6822      	ldr	r2, [r4, #0]
 800833c:	f022 0220 	bic.w	r2, r2, #32
 8008340:	6022      	str	r2, [r4, #0]
 8008342:	2210      	movs	r2, #16
 8008344:	e7b7      	b.n	80082b6 <_printf_i+0xd2>
 8008346:	064d      	lsls	r5, r1, #25
 8008348:	bf48      	it	mi
 800834a:	b29b      	uxthmi	r3, r3
 800834c:	e7ef      	b.n	800832e <_printf_i+0x14a>
 800834e:	4665      	mov	r5, ip
 8008350:	fbb3 f1f2 	udiv	r1, r3, r2
 8008354:	fb02 3311 	mls	r3, r2, r1, r3
 8008358:	5cc3      	ldrb	r3, [r0, r3]
 800835a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800835e:	460b      	mov	r3, r1
 8008360:	2900      	cmp	r1, #0
 8008362:	d1f5      	bne.n	8008350 <_printf_i+0x16c>
 8008364:	e7b9      	b.n	80082da <_printf_i+0xf6>
 8008366:	6813      	ldr	r3, [r2, #0]
 8008368:	6825      	ldr	r5, [r4, #0]
 800836a:	6961      	ldr	r1, [r4, #20]
 800836c:	1d18      	adds	r0, r3, #4
 800836e:	6010      	str	r0, [r2, #0]
 8008370:	0628      	lsls	r0, r5, #24
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	d501      	bpl.n	800837a <_printf_i+0x196>
 8008376:	6019      	str	r1, [r3, #0]
 8008378:	e002      	b.n	8008380 <_printf_i+0x19c>
 800837a:	066a      	lsls	r2, r5, #25
 800837c:	d5fb      	bpl.n	8008376 <_printf_i+0x192>
 800837e:	8019      	strh	r1, [r3, #0]
 8008380:	2300      	movs	r3, #0
 8008382:	6123      	str	r3, [r4, #16]
 8008384:	4665      	mov	r5, ip
 8008386:	e7b9      	b.n	80082fc <_printf_i+0x118>
 8008388:	6813      	ldr	r3, [r2, #0]
 800838a:	1d19      	adds	r1, r3, #4
 800838c:	6011      	str	r1, [r2, #0]
 800838e:	681d      	ldr	r5, [r3, #0]
 8008390:	6862      	ldr	r2, [r4, #4]
 8008392:	2100      	movs	r1, #0
 8008394:	4628      	mov	r0, r5
 8008396:	f7f7 ff43 	bl	8000220 <memchr>
 800839a:	b108      	cbz	r0, 80083a0 <_printf_i+0x1bc>
 800839c:	1b40      	subs	r0, r0, r5
 800839e:	6060      	str	r0, [r4, #4]
 80083a0:	6863      	ldr	r3, [r4, #4]
 80083a2:	6123      	str	r3, [r4, #16]
 80083a4:	2300      	movs	r3, #0
 80083a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083aa:	e7a7      	b.n	80082fc <_printf_i+0x118>
 80083ac:	6923      	ldr	r3, [r4, #16]
 80083ae:	462a      	mov	r2, r5
 80083b0:	4639      	mov	r1, r7
 80083b2:	4630      	mov	r0, r6
 80083b4:	47c0      	blx	r8
 80083b6:	3001      	adds	r0, #1
 80083b8:	d0aa      	beq.n	8008310 <_printf_i+0x12c>
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	079b      	lsls	r3, r3, #30
 80083be:	d413      	bmi.n	80083e8 <_printf_i+0x204>
 80083c0:	68e0      	ldr	r0, [r4, #12]
 80083c2:	9b03      	ldr	r3, [sp, #12]
 80083c4:	4298      	cmp	r0, r3
 80083c6:	bfb8      	it	lt
 80083c8:	4618      	movlt	r0, r3
 80083ca:	e7a3      	b.n	8008314 <_printf_i+0x130>
 80083cc:	2301      	movs	r3, #1
 80083ce:	464a      	mov	r2, r9
 80083d0:	4639      	mov	r1, r7
 80083d2:	4630      	mov	r0, r6
 80083d4:	47c0      	blx	r8
 80083d6:	3001      	adds	r0, #1
 80083d8:	d09a      	beq.n	8008310 <_printf_i+0x12c>
 80083da:	3501      	adds	r5, #1
 80083dc:	68e3      	ldr	r3, [r4, #12]
 80083de:	9a03      	ldr	r2, [sp, #12]
 80083e0:	1a9b      	subs	r3, r3, r2
 80083e2:	42ab      	cmp	r3, r5
 80083e4:	dcf2      	bgt.n	80083cc <_printf_i+0x1e8>
 80083e6:	e7eb      	b.n	80083c0 <_printf_i+0x1dc>
 80083e8:	2500      	movs	r5, #0
 80083ea:	f104 0919 	add.w	r9, r4, #25
 80083ee:	e7f5      	b.n	80083dc <_printf_i+0x1f8>
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1ac      	bne.n	800834e <_printf_i+0x16a>
 80083f4:	7803      	ldrb	r3, [r0, #0]
 80083f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083fe:	e76c      	b.n	80082da <_printf_i+0xf6>
 8008400:	08008505 	.word	0x08008505
 8008404:	08008516 	.word	0x08008516

08008408 <memmove>:
 8008408:	4288      	cmp	r0, r1
 800840a:	b510      	push	{r4, lr}
 800840c:	eb01 0302 	add.w	r3, r1, r2
 8008410:	d807      	bhi.n	8008422 <memmove+0x1a>
 8008412:	1e42      	subs	r2, r0, #1
 8008414:	4299      	cmp	r1, r3
 8008416:	d00a      	beq.n	800842e <memmove+0x26>
 8008418:	f811 4b01 	ldrb.w	r4, [r1], #1
 800841c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008420:	e7f8      	b.n	8008414 <memmove+0xc>
 8008422:	4283      	cmp	r3, r0
 8008424:	d9f5      	bls.n	8008412 <memmove+0xa>
 8008426:	1881      	adds	r1, r0, r2
 8008428:	1ad2      	subs	r2, r2, r3
 800842a:	42d3      	cmn	r3, r2
 800842c:	d100      	bne.n	8008430 <memmove+0x28>
 800842e:	bd10      	pop	{r4, pc}
 8008430:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008434:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008438:	e7f7      	b.n	800842a <memmove+0x22>

0800843a <_realloc_r>:
 800843a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843c:	4607      	mov	r7, r0
 800843e:	4614      	mov	r4, r2
 8008440:	460e      	mov	r6, r1
 8008442:	b921      	cbnz	r1, 800844e <_realloc_r+0x14>
 8008444:	4611      	mov	r1, r2
 8008446:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800844a:	f7ff bc77 	b.w	8007d3c <_malloc_r>
 800844e:	b922      	cbnz	r2, 800845a <_realloc_r+0x20>
 8008450:	f7ff fc26 	bl	8007ca0 <_free_r>
 8008454:	4625      	mov	r5, r4
 8008456:	4628      	mov	r0, r5
 8008458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800845a:	f000 f814 	bl	8008486 <_malloc_usable_size_r>
 800845e:	42a0      	cmp	r0, r4
 8008460:	d20f      	bcs.n	8008482 <_realloc_r+0x48>
 8008462:	4621      	mov	r1, r4
 8008464:	4638      	mov	r0, r7
 8008466:	f7ff fc69 	bl	8007d3c <_malloc_r>
 800846a:	4605      	mov	r5, r0
 800846c:	2800      	cmp	r0, #0
 800846e:	d0f2      	beq.n	8008456 <_realloc_r+0x1c>
 8008470:	4631      	mov	r1, r6
 8008472:	4622      	mov	r2, r4
 8008474:	f7ff fc00 	bl	8007c78 <memcpy>
 8008478:	4631      	mov	r1, r6
 800847a:	4638      	mov	r0, r7
 800847c:	f7ff fc10 	bl	8007ca0 <_free_r>
 8008480:	e7e9      	b.n	8008456 <_realloc_r+0x1c>
 8008482:	4635      	mov	r5, r6
 8008484:	e7e7      	b.n	8008456 <_realloc_r+0x1c>

08008486 <_malloc_usable_size_r>:
 8008486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800848a:	1f18      	subs	r0, r3, #4
 800848c:	2b00      	cmp	r3, #0
 800848e:	bfbc      	itt	lt
 8008490:	580b      	ldrlt	r3, [r1, r0]
 8008492:	18c0      	addlt	r0, r0, r3
 8008494:	4770      	bx	lr
	...

08008498 <_init>:
 8008498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849a:	bf00      	nop
 800849c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800849e:	bc08      	pop	{r3}
 80084a0:	469e      	mov	lr, r3
 80084a2:	4770      	bx	lr

080084a4 <_fini>:
 80084a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a6:	bf00      	nop
 80084a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084aa:	bc08      	pop	{r3}
 80084ac:	469e      	mov	lr, r3
 80084ae:	4770      	bx	lr
